(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4705],{8358:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/node-apis/issuing-api-calls",function(){return n(50483)}])},50483:function(e,t,n){"use strict";n.r(t),n.d(t,{CH:function(){return a},Page:function(){return l},chCodeConfig:function(){return c},meta:function(){return h}});var o=n(52322),s=n(3905),r=n(65854),i=n(72499),a={annotations:r.ds,Code:r.EK},c={staticMediaQuery:"not screen, (max-width: 768px)",theme:{name:"supabase",type:"from-css",tokenColors:[{scope:["comment","punctuation.definition.comment","string.comment"],settings:{foreground:"var(--ch-1)"}},{scope:["constant","entity.name.constant","variable.other.constant","variable.other.enummember","variable.language","entity"],settings:{foreground:"var(--ch-2)"}},{scope:["entity.name","meta.export.default","meta.definition.variable"],settings:{foreground:"var(--ch-3)"}},{scope:["variable.parameter.function","meta.jsx.children","meta.block","meta.tag.attributes","entity.name.constant","meta.object.member","meta.embedded.expression"],settings:{foreground:"var(--ch-4)"}},{scope:"entity.name.function",settings:{foreground:"var(--ch-5)"}},{scope:["entity.name.tag","support.class.component"],settings:{foreground:"var(--ch-6)"}},{scope:"keyword",settings:{foreground:"var(--ch-7)"}},{scope:["storage","storage.type"],settings:{foreground:"var(--ch-7)"}},{scope:["storage.modifier.package","storage.modifier.import","storage.type.java"],settings:{foreground:"var(--ch-4)"}},{scope:["string","string punctuation.section.embedded source"],settings:{foreground:"var(--ch-8)"}},{scope:"support",settings:{foreground:"var(--ch-2)"}},{scope:"meta.property-name",settings:{foreground:"var(--ch-2)"}},{scope:"variable",settings:{foreground:"var(--ch-3)"}},{scope:"variable.other",settings:{foreground:"var(--ch-4)"}},{scope:"invalid.broken",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.deprecated",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.illegal",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.unimplemented",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"carriage-return",settings:{background:"var(--ch-7)",foreground:"var(--ch-10)",fontStyle:"italic underline"}},{scope:"message.error",settings:{foreground:"var(--ch-9)"}},{scope:"string variable",settings:{foreground:"var(--ch-2)"}},{scope:["source.regexp","string.regexp"],settings:{foreground:"var(--ch-8)"}},{scope:["string.regexp.character-class","string.regexp constant.character.escape","string.regexp source.ruby.embedded","string.regexp string.regexp.arbitrary-repitition"],settings:{foreground:"var(--ch-8)"}},{scope:"string.regexp constant.character.escape",settings:{foreground:"var(--ch-6)",fontStyle:"bold"}},{scope:"support.constant",settings:{foreground:"var(--ch-2)"}},{scope:"support.variable",settings:{foreground:"var(--ch-2)"}},{scope:"support.type.property-name.json",settings:{foreground:"var(--ch-6)"}},{scope:"meta.module-reference",settings:{foreground:"var(--ch-2)"}},{scope:"punctuation.definition.list.begin.markdown",settings:{foreground:"var(--ch-3)"}},{scope:["markup.heading","markup.heading entity.name"],settings:{foreground:"var(--ch-2)",fontStyle:"bold"}},{scope:"markup.quote",settings:{foreground:"var(--ch-6)"}},{scope:"markup.italic",settings:{foreground:"var(--ch-4)",fontStyle:"italic"}},{scope:"markup.bold",settings:{foreground:"var(--ch-4)",fontStyle:"bold"}},{scope:["markup.underline"],settings:{fontStyle:"underline"}},{scope:["markup.strikethrough"],settings:{fontStyle:"strikethrough"}},{scope:"markup.inline.raw",settings:{foreground:"var(--ch-2)"}},{scope:["markup.deleted","meta.diff.header.from-file","punctuation.definition.deleted"],settings:{background:"var(--ch-11)",foreground:"var(--ch-9)"}},{scope:["punctuation.section.embedded"],settings:{foreground:"var(--ch-7)"}},{scope:["markup.inserted","meta.diff.header.to-file","punctuation.definition.inserted"],settings:{background:"var(--ch-12)",foreground:"var(--ch-6)"}},{scope:["markup.changed","punctuation.definition.changed"],settings:{background:"var(--ch-13)",foreground:"var(--ch-3)"}},{scope:["markup.ignored","markup.untracked"],settings:{background:"var(--ch-2)",foreground:"var(--ch-14)"}},{scope:"meta.diff.range",settings:{foreground:"var(--ch-5)",fontStyle:"bold"}},{scope:"meta.diff.header",settings:{foreground:"var(--ch-2)"}},{scope:"meta.separator",settings:{foreground:"var(--ch-2)",fontStyle:"bold"}},{scope:"meta.output",settings:{foreground:"var(--ch-2)"}},{scope:["brackethighlighter.tag","brackethighlighter.curly","brackethighlighter.round","brackethighlighter.square","brackethighlighter.angle","brackethighlighter.quote"],settings:{foreground:"var(--ch-15)"}},{scope:"brackethighlighter.unmatched",settings:{foreground:"var(--ch-9)"}},{scope:["constant.other.reference.link","string.other.link"],settings:{foreground:"var(--ch-8)",fontStyle:"underline"}}],colors:{"editor.background":"var(--ch-16)","editor.foreground":"var(--ch-4)","editor.selectionBackground":"var(--ch-17)","editor.infoForeground":"var(--ch-18)","editor.rangeHighlightBackground":"var(--ch-19)","editorLineNumber.foreground":"var(--ch-20)","tab.activeBackground":"var(--ch-16)","tab.inactiveBackground":"var(--ch-21)","tab.activeForeground":"var(--ch-4)","tab.inactiveForeground":"var(--ch-15)","tab.border":"var(--ch-22)","tab.activeBorder":"var(--ch-16)","tab.activeBorderTop":"var(--ch-23)","tab.hoverBackground":"var(--ch-16)","tab.hoverForeground":"var(--ch-15)","editorGroupHeader.tabsBorder":"var(--ch-22)","editorGroupHeader.tabsBackground":"var(--ch-21)","list.inactiveSelectionBackground":"var(--ch-24)","list.inactiveSelectionForeground":"var(--ch-4)","list.hoverBackground":"var(--ch-25)","list.hoverForeground":"var(--ch-4)"}},lineNumbers:!0,showCopyButton:!0,autoImport:!0,skipLanguages:[],filepath:"/Users/saleemfareed/Documents/hal-docs/apps/docs/pages/guides/node-apis/issuing-api-calls.mdx"},h={id:"issuing-api-calls",title:"Issue API Calls",description:"Learn how to make calls to an API exposed by dijets node"},l=function(e){var t=e.children;return(0,o.jsx)(i.Z,{meta:h,children:t})},d=l;function p(e){var t=Object.assign({p:"p",h2:"h2",h3:"h3",code:"code",ul:"ul",li:"li",h4:"h4",a:"a"},(0,s.ah)(),e.components),n=t.Admonition;return n||u("Admonition",!0),a||u("CH",!1),a.Code||u("CH.Code",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Dijets API is a specifically-tailored collection of JSON-RPC API endpoints built to support\nWeb3 usecases and scenarios on Dijets Ternary Chains at almost instant speeds.\nIt is the single point of reference for requests being made to Dijets Primary Network and its chains."}),"\n",(0,o.jsx)(t.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,o.jsx)(t.p,{children:"An API call is made to an endpoint, which is a URL, made up of the base URI\nwhich is the address and the port of the node, and the path the particular\nendpoint the API call is made to."}),"\n",(0,o.jsx)(t.h3,{id:"base-url",children:"Base URL"}),"\n",(0,o.jsx)(t.p,{children:"The base of the URL is always:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"[node-ip]:[http-port]"})}),"\n",(0,o.jsx)(t.p,{children:"where"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"node-ip"})," is the IP address of the node the call is to."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"http-port"})," is the port the node listens on for HTTP calls. (default value ",(0,o.jsx)(t.code,{children:"9650"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["For example, if you're making RPC calls on the local node, the base URL might look like this: ",(0,o.jsx)(t.code,{children:"127.0.0.1:9650"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["If you're making RPC calls to remote nodes, then instead of ",(0,o.jsx)(t.code,{children:"127.0.0.1"})," you\nshould use the public IP of the server where the node is. Note that by default\nthe node will only accept API calls on the local interface, so you will need to\nset up the ",(0,o.jsx)(t.code,{children:"http-host"}),"\nconfig flag on the node. Also, you will need to make sure the firewall and/or\nsecurity policy allows access to the ",(0,o.jsx)(t.code,{children:"http-port"})," from the internet."]}),"\n",(0,o.jsx)(n,{type:"info",children:(0,o.jsxs)(t.p,{children:["When setting up RPC access to a node, make sure you don't leave the\n",(0,o.jsx)(t.code,{children:"http-port"})," accessible to everyone! There are malicious actors that scan for\nnodes that have unrestricted access to their RPC port and then use those nodes\nfor spamming them with resource-intensive queries which can knock the node\noffline. Only allow access to your node's RPC port from known IP addresses!"]})}),"\n",(0,o.jsx)(t.h3,{id:"endpoint-path",children:"Endpoint Path"}),"\n",(0,o.jsx)(t.p,{children:"Each API\u2019s documentation specifies what endpoint path a user should make calls\nto in order to access the API\u2019s methods."}),"\n",(0,o.jsx)(t.p,{children:"In general, they are formatted like:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"/ext/[api-name]",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["So for the Admin API, the endpoint path is ",(0,o.jsx)(t.code,{children:"/ext/admin"}),", for the Info API it is\n",(0,o.jsx)(t.code,{children:"/ext/info"})," and so on. Note that some APIs have additional path components, most\nnotably the chain RPC endpoints which includes the Subnetwork chain RPCs. We'll go\nover those in detail in the next section."]}),"\n",(0,o.jsx)(t.p,{children:"So, in combining the base URL and the endpoint path we get the complete URL for\nmaking RPC calls. For example, to make a local RPC call on the Info API, the\nfull URL would be:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"http://127.0.0.1:9650/ext/info",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.h2,{id:"primary-network-and-subnetwork-rpc-calls",children:"Primary Network and Subnetwork RPC calls"}),"\n",(0,o.jsx)(t.p,{children:"Besides the APIs that are local to the node, like Admin or Metrics APIs, nodes\nalso expose endpoints for talking to particular chains that are either part of\nthe Primary Network (the Value, Method and Utility Chains), or part of any Subnetworks the node\nmight be syncing or validating."}),"\n",(0,o.jsx)(t.p,{children:"In general, chain endpoints are formatted as:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"ext/bc/[blockchainID]",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.h3,{id:"primary-network-endpoints",children:"Primary Network Endpoints"}),"\n",(0,o.jsx)(t.p,{children:"The Primary Network consists of three chains: X, P and Utility Chain. As those chains\nare present on every node, there are also convenient aliases defined that can be\nused instead of the full blockchainIDs. So, the endpoints look like:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"ext/bc/Value",props:{}}]},{tokens:[{content:"ext/bc/Method",props:{}}]},{tokens:[{content:"ext/bc/Utility",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.h3,{id:"utility-chain-and-subnetwork-evm-endpoints",children:"Utility Chain and Subnetwork-EVM Endpoints"}),"\n",(0,o.jsx)(t.p,{children:"Utility Chain and many Subnetworks run a version of the EthereumVM (EVM). EVM exposes its\nown endpoints, which are also accessible on the node: JSON-RPC, and Websocket."}),"\n",(0,o.jsx)(t.h4,{id:"json-rpc-evm-endpoints",children:"JSON-RPC EVM Endpoints"}),"\n",(0,o.jsx)(t.p,{children:"To interact with Utility Chain EVM via the JSON-RPC use the endpoint:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"/ext/bc/C/rpc",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.p,{children:"To interact with Subnetwork instances of the EVM via the JSON-RPC endpoint:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"/ext/bc/[blockchainID]/rpc",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["where ",(0,o.jsx)(t.code,{children:"blockchainID"})," is the ID of the blockchain running the EVM. So for\nexample, the RPC URL for the Swimmer Network (a Subnetwork that runs the Crabada\ngame) running on a local node would be:"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"http://127.0.0.1/ext/bc/2K33xS9AyP9oCDiHYKVrHe7F54h2La5D8erpTChaAhdzeSu2RX/rpc",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.p,{children:"Or for the WAGMI Subnetwork on the Dijets TestNet testnet:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"http://127.0.0.1/ext/bc/2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt/rpc",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.h4,{id:"websocket-evm-endpoints",children:"Websocket EVM Endpoints"}),"\n",(0,o.jsx)(t.p,{children:"To interact with Utility Chain via the websocket endpoint, use:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"/ext/bc/C/ws",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsx)(t.p,{children:"To interact with other instances of the EVM via the websocket endpoint:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"/ext/bc/blockchainID/ws",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["where ",(0,o.jsx)(t.code,{children:"blockchainID"})," is the ID of the blockchain running the EVM. For example,\nto interact with the Utility Chain's Ethereum APIs via websocket on localhost you can\nuse:"]}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"ws://127.0.0.1:9650/ext/bc/C/ws",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(n,{type:"info",children:[(0,o.jsxs)(t.p,{children:["When using the ",(0,o.jsx)(t.a,{href:"/guides/node-apis/public-api",children:"Public API"})," or another host\nthat supports HTTPS, use ",(0,o.jsx)(t.code,{children:"https://"})," or ",(0,o.jsx)(t.code,{children:"wss://"})," instead of ",(0,o.jsx)(t.code,{children:"http://"})," or ",(0,o.jsx)(t.code,{children:"ws://"}),"."]}),(0,o.jsxs)(t.p,{children:["Also, note that the ",(0,o.jsx)(t.a,{href:"/guides/node-apis/public-api",children:"public API"})," only\nsupports Utility Chain websocket API calls for API methods that don't exist on the\nUtility Chain's HTTP API."]})]}),"\n",(0,o.jsx)(t.h2,{id:"making-a-json-rpc-request",children:"Making a JSON RPC Request"}),"\n",(0,o.jsxs)(t.p,{children:["Most of the built-in APIs use the ",(0,o.jsx)(t.a,{href:"https://www.jsonrpc.org/specification",children:"JSON RPC\n2.0"})," format to describe their requests\nand responses. Such APIs include the Platform API and the Value Chain API."]}),"\n",(0,o.jsxs)(t.p,{children:["Suppose we want to call the ",(0,o.jsx)(t.code,{children:"getTxStatus"})," method of the [Value Chain\nAPI](Value Chain.md). The Value Chain API documentation tells us that the endpoint for\nthis API is ",(0,o.jsx)(t.code,{children:"/ext/bc/Value"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"That means that the endpoint we send our API call to is:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"[node-ip]:[http-port]/ext/bc/Value"})}),"\n",(0,o.jsxs)(t.p,{children:["The Value Chain API documentation tells us that the signature of ",(0,o.jsx)(t.code,{children:"getTxStatus"})," is:"]}),"\n",(0,o.jsxs)(t.p,{children:["[",(0,o.jsx)(t.code,{children:"avm.getTxStatus"}),"](Value Chain.md#avmgettxstatus)",(0,o.jsx)(t.code,{children:"(txID:bytes) -> (status:string)"})]}),"\n",(0,o.jsx)(t.p,{children:"where:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Argument ",(0,o.jsx)(t.code,{children:"txID"})," is the ID of the transaction we\u2019re getting the status of."]}),"\n",(0,o.jsxs)(t.li,{children:["Returned value ",(0,o.jsx)(t.code,{children:"status"})," is the status of the transaction in question."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"To call this method, then:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl -X POST --data '{",props:{}}]},{tokens:[{content:'    "jsonrpc":"2.0",',props:{}}]},{tokens:[{content:'    "id"     :4,',props:{}}]},{tokens:[{content:'    "method" :"avm.getTxStatus",',props:{}}]},{tokens:[{content:'    "params" :{',props:{}}]},{tokens:[{content:'        "txID":"2QouvFWUbjuySRxeX5xMbNCuAaKWfbk5FeEa2JmoF85RKLk2dD"',props:{}}]},{tokens:[{content:"    }",props:{}}]},{tokens:[{content:"}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/X",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"jsonrpc"})," specifies the version of the JSON RPC protocol. (In practice is always 2.0)"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"method"})," specifies the service (",(0,o.jsx)(t.code,{children:"avm"}),") and method (",(0,o.jsx)(t.code,{children:"getTxStatus"}),") that we want to invoke."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"params"})," specifies the arguments to the method."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," is the ID of this request. Request IDs should be unique."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"That\u2019s it!"}),"\n",(0,o.jsx)(t.h3,{id:"json-rpc-success-response",children:"JSON RPC Success Response"}),"\n",(0,o.jsx)(t.p,{children:"If the call is successful, the response will look like this:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'  "jsonrpc"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:'"2.0"',props:{style:{color:"var(--ch-8)"}}},{content:",",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'  "result"',props:{style:{color:"var(--ch-6)"}}},{content:": {",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'    "Status"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:'"Accepted"',props:{style:{color:"var(--ch-8)"}}}]},{tokens:[{content:"  },",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'  "id"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:"1",props:{style:{color:"var(--ch-2)"}}}]},{tokens:[{content:"}",props:{style:{color:"var(--ch-4)"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," is the ID of the request that this response corresponds to."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"result"})," is the returned values of ",(0,o.jsx)(t.code,{children:"getTxStatus"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"json-rpc-error-response",children:"JSON RPC Error Response"}),"\n",(0,o.jsxs)(t.p,{children:["If the API method invoked returns an error then the response will have a field\n",(0,o.jsx)(t.code,{children:"error"})," in place of ",(0,o.jsx)(t.code,{children:"result"}),". Additionally, there is an extra field, ",(0,o.jsx)(t.code,{children:"data"}),",\nwhich holds additional information about the error that occurred."]}),"\n",(0,o.jsx)(t.p,{children:"Such a response would look like:"}),"\n",(0,o.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'    "jsonrpc"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:'"2.0"',props:{style:{color:"var(--ch-8)"}}},{content:",",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'    "error"',props:{style:{color:"var(--ch-6)"}}},{content:": {",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'        "code"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:"-32600",props:{style:{color:"var(--ch-2)"}}},{content:",",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'        "message"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:'"[Some error message here]"',props:{style:{color:"var(--ch-8)"}}},{content:",",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'        "data"',props:{style:{color:"var(--ch-6)"}}},{content:": [",props:{style:{color:"var(--ch-4)"}}},{content:"Object with additional information about the error",props:{style:{color:"var(--ch-9)",fontStyle:"italic"}}},{content:"]",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:"    },",props:{style:{color:"var(--ch-4)"}}}]},{tokens:[{content:'    "id"',props:{style:{color:"var(--ch-6)"}}},{content:": ",props:{style:{color:"var(--ch-4)"}}},{content:"1",props:{style:{color:"var(--ch-2)"}}}]},{tokens:[{content:"}",props:{style:{color:"var(--ch-4)"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,o.jsx)(t.h2,{id:"other-api-formats",children:"Other API Formats"}),"\n",(0,o.jsx)(t.p,{children:"Some APIs may use a standard other than JSON RPC 2.0 to format their requests\nand responses. Such extension should specify how to make calls and parse\nresponses to them in their documentation."}),"\n",(0,o.jsx)(t.h2,{id:"sending-and-receiving-bytes",children:"Sending and Receiving Bytes"}),"\n",(0,o.jsxs)(t.p,{children:["Unless otherwise noted, when bytes are sent in an API call/response, they are in\nhex representation. However, Transaction IDs (TXIDs), ChainIDs, and subnetIDs\nare in ",(0,o.jsx)(t.a,{href:"https://support.avalabs.org/en/articles/4587395-what-is-cb58",children:"CB58"}),"\nrepresentation, a base-58 encoding with a checksum."]})]})}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(d,Object.assign({},e,{children:(0,o.jsx)(p,e)}))}}},function(e){e.O(0,[2331,2499,9774,2888,179],(function(){return t=8358,e(e.s=t);var t}));var t=e.O();_N_E=t}]);