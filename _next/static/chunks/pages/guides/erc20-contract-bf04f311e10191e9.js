(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3416],{95910:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/erc20-contract",function(){return n(51704)}])},51704:function(e,t,n){"use strict";n.r(t),n.d(t,{CH:function(){return a},Page:function(){return h},chCodeConfig:function(){return c},meta:function(){return d}});var r=n(52322),o=n(3905),i=n(65854),s=n(72499),a={annotations:i.ds,Code:i.EK},c={staticMediaQuery:"not screen, (max-width: 768px)",theme:{name:"supabase",type:"from-css",tokenColors:[{scope:["comment","punctuation.definition.comment","string.comment"],settings:{foreground:"var(--ch-1)"}},{scope:["constant","entity.name.constant","variable.other.constant","variable.other.enummember","variable.language","entity"],settings:{foreground:"var(--ch-2)"}},{scope:["entity.name","meta.export.default","meta.definition.variable"],settings:{foreground:"var(--ch-3)"}},{scope:["variable.parameter.function","meta.jsx.children","meta.block","meta.tag.attributes","entity.name.constant","meta.object.member","meta.embedded.expression"],settings:{foreground:"var(--ch-4)"}},{scope:"entity.name.function",settings:{foreground:"var(--ch-5)"}},{scope:["entity.name.tag","support.class.component"],settings:{foreground:"var(--ch-6)"}},{scope:"keyword",settings:{foreground:"var(--ch-7)"}},{scope:["storage","storage.type"],settings:{foreground:"var(--ch-7)"}},{scope:["storage.modifier.package","storage.modifier.import","storage.type.java"],settings:{foreground:"var(--ch-4)"}},{scope:["string","string punctuation.section.embedded source"],settings:{foreground:"var(--ch-8)"}},{scope:"support",settings:{foreground:"var(--ch-2)"}},{scope:"meta.property-name",settings:{foreground:"var(--ch-2)"}},{scope:"variable",settings:{foreground:"var(--ch-3)"}},{scope:"variable.other",settings:{foreground:"var(--ch-4)"}},{scope:"invalid.broken",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.deprecated",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.illegal",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"invalid.unimplemented",settings:{foreground:"var(--ch-9)",fontStyle:"italic"}},{scope:"carriage-return",settings:{background:"var(--ch-7)",foreground:"var(--ch-10)",fontStyle:"italic underline"}},{scope:"message.error",settings:{foreground:"var(--ch-9)"}},{scope:"string variable",settings:{foreground:"var(--ch-2)"}},{scope:["source.regexp","string.regexp"],settings:{foreground:"var(--ch-8)"}},{scope:["string.regexp.character-class","string.regexp constant.character.escape","string.regexp source.ruby.embedded","string.regexp string.regexp.arbitrary-repitition"],settings:{foreground:"var(--ch-8)"}},{scope:"string.regexp constant.character.escape",settings:{foreground:"var(--ch-6)",fontStyle:"bold"}},{scope:"support.constant",settings:{foreground:"var(--ch-2)"}},{scope:"support.variable",settings:{foreground:"var(--ch-2)"}},{scope:"support.type.property-name.json",settings:{foreground:"var(--ch-6)"}},{scope:"meta.module-reference",settings:{foreground:"var(--ch-2)"}},{scope:"punctuation.definition.list.begin.markdown",settings:{foreground:"var(--ch-3)"}},{scope:["markup.heading","markup.heading entity.name"],settings:{foreground:"var(--ch-2)",fontStyle:"bold"}},{scope:"markup.quote",settings:{foreground:"var(--ch-6)"}},{scope:"markup.italic",settings:{foreground:"var(--ch-4)",fontStyle:"italic"}},{scope:"markup.bold",settings:{foreground:"var(--ch-4)",fontStyle:"bold"}},{scope:["markup.underline"],settings:{fontStyle:"underline"}},{scope:["markup.strikethrough"],settings:{fontStyle:"strikethrough"}},{scope:"markup.inline.raw",settings:{foreground:"var(--ch-2)"}},{scope:["markup.deleted","meta.diff.header.from-file","punctuation.definition.deleted"],settings:{background:"var(--ch-11)",foreground:"var(--ch-9)"}},{scope:["punctuation.section.embedded"],settings:{foreground:"var(--ch-7)"}},{scope:["markup.inserted","meta.diff.header.to-file","punctuation.definition.inserted"],settings:{background:"var(--ch-12)",foreground:"var(--ch-6)"}},{scope:["markup.changed","punctuation.definition.changed"],settings:{background:"var(--ch-13)",foreground:"var(--ch-3)"}},{scope:["markup.ignored","markup.untracked"],settings:{background:"var(--ch-2)",foreground:"var(--ch-14)"}},{scope:"meta.diff.range",settings:{foreground:"var(--ch-5)",fontStyle:"bold"}},{scope:"meta.diff.header",settings:{foreground:"var(--ch-2)"}},{scope:"meta.separator",settings:{foreground:"var(--ch-2)",fontStyle:"bold"}},{scope:"meta.output",settings:{foreground:"var(--ch-2)"}},{scope:["brackethighlighter.tag","brackethighlighter.curly","brackethighlighter.round","brackethighlighter.square","brackethighlighter.angle","brackethighlighter.quote"],settings:{foreground:"var(--ch-15)"}},{scope:"brackethighlighter.unmatched",settings:{foreground:"var(--ch-9)"}},{scope:["constant.other.reference.link","string.other.link"],settings:{foreground:"var(--ch-8)",fontStyle:"underline"}}],colors:{"editor.background":"var(--ch-16)","editor.foreground":"var(--ch-4)","editor.selectionBackground":"var(--ch-17)","editor.infoForeground":"var(--ch-18)","editor.rangeHighlightBackground":"var(--ch-19)","editorLineNumber.foreground":"var(--ch-20)","tab.activeBackground":"var(--ch-16)","tab.inactiveBackground":"var(--ch-21)","tab.activeForeground":"var(--ch-4)","tab.inactiveForeground":"var(--ch-15)","tab.border":"var(--ch-22)","tab.activeBorder":"var(--ch-16)","tab.activeBorderTop":"var(--ch-23)","tab.hoverBackground":"var(--ch-16)","tab.hoverForeground":"var(--ch-15)","editorGroupHeader.tabsBorder":"var(--ch-22)","editorGroupHeader.tabsBackground":"var(--ch-21)","list.inactiveSelectionBackground":"var(--ch-24)","list.inactiveSelectionForeground":"var(--ch-4)","list.hoverBackground":"var(--ch-25)","list.hoverForeground":"var(--ch-4)"}},lineNumbers:!0,showCopyButton:!0,autoImport:!0,skipLanguages:[],filepath:"/Users/saleemfareed/Documents/hal-docs/apps/docs/pages/guides/erc20-contract.mdx"},d={id:"serialisation-primitives",title:"Create an ERC20 Token",description:"How to create an ERC-20 Token on Dijets Utility Chain",sidebar_label:"Overview"},h=function(e){var t=e.children;return(0,r.jsx)(s.Z,{meta:d,children:t})},l=h;function u(e){var t=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",a:"a",code:"code"},(0,o.ah)(),e.components);return a||p("CH",!1),a.Code||p("CH.Code",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"create-an-erc-20-token-using-solidity",children:"Create an ERC-20 Token Using Solidity"}),"\n",(0,r.jsx)(t.p,{children:"In this tutorial we will be creating our own mintable ERC-20 token and will mint it to\nany address we want. The token will be generated on Dijets Utility Chain."}),"\n",(0,r.jsx)(t.p,{children:"The article focuses on deploying a smart contract written with Solidity to\nDijets. This is the feature that Dijets provides us - to be able to deploy\nany smart contract to the chain and no requirement for a new language specific\ncontract concept to interact. Let\u2019s look at how to create an ERC-20 contract and\ndeploy it on Dijets Utility Chain."}),"\n",(0,r.jsx)(t.h2,{id:"set-up-metamask",children:"Set up MetaMask"}),"\n",(0,r.jsx)(t.p,{children:"The first thing we should set is a MetaMask wallet address."}),"\n",(0,r.jsx)(t.p,{children:'Click on MetaMask icon on the browser and select the network drop-down menu.\nHere we can connect to Dijets Utility Chain. Click "Custom RPC".'}),"\n",(0,r.jsx)(t.p,{children:"Fill in the fields with the information provided below."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Network Name"}),": Dijets Utility Chain"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"New RPC URL"}),": ",(0,r.jsx)(t.a,{href:"https://dijets.ukwest.cloudapp.azure.com:443/ext/bc/C/rpc",children:"https://dijets.ukwest.cloudapp.azure.com:443/ext/bc/C/rpc"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"ChainID"}),": ",(0,r.jsx)(t.code,{children:"98200"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Symbol"}),": DJTX"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Explorer"}),": ",(0,r.jsx)(t.a,{href:"https://utility-explorer.swedencentral.cloudapp.azure.com/",children:(0,r.jsx)(t.code,{children:"https://utility-explorer.swedencentral.cloudapp.azure.com/"})})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"After setting up all the parameters correctly we should have our Metamask connected to Dijets Utility Chain and a wallet address we can use to deploy our contract."}),"\n",(0,r.jsx)(t.h2,{id:"fund-your-utility-chain-address",children:"Fund Your Utility Chain Address"}),"\n",(0,r.jsxs)(t.p,{children:["For funding on Dijets Testnet, you can use the Test Network Faucet. Navigate\nto ",(0,r.jsx)(t.a,{href:"https://faucet.dijets.io",children:"Dijets Faucet"})," and paste your\nUtility Chain address."]}),"\n",(0,r.jsx)(t.h2,{id:"create-mintable-token",children:"Create Mintable Token"}),"\n",(0,r.jsxs)(t.p,{children:["Now, we can create our mintable token on Tinker. Open Tinker on your browser or go\nto ",(0,r.jsx)(t.a,{href:"https://tinker.dijets.io/dijets-ide/",children:"this\nlink"}),"."]}),"\n",(0,r.jsx)(t.p,{children:'On this page, first, click "SOLIDITY" from "Featured\nPlugins" and then click the "New File" button. When you click the New File\nbutton, you will see a pop-up that requires a file name. You can choose a name\nor leave the default.'}),"\n",(0,r.jsxs)(t.p,{children:["Since we will use an ERC-20 contract from\n",(0,r.jsx)(t.a,{href:"https://openzeppelin.com/contracts/",children:"OpenZeppelin"}),", just paste this line to the\nfile and save."]}),"\n",(0,r.jsx)(a.Code,{codeConfig:c,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import ",props:{style:{color:"var(--ch-7)"}}},{content:'"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol"',props:{style:{color:"var(--ch-8)"}}},{content:";",props:{style:{color:"var(--ch-4)"}}}]}],lang:"jsx"},annotations:[]}]}),"\n",(0,r.jsx)(t.p,{children:"After saving the file, we will see a bunch of files being imported into Tinker.\nThese files are imported from a GitHub contract repository\nto Tinker via a URL-link with an import statement."}),"\n",(0,r.jsx)(t.p,{children:"We have ERC20PresetMinterPauser.sol file in the presets. This file is from\nOpenZeppelin's repo and follows the ERC20 standards with minting functionality."}),"\n",(0,r.jsx)(t.p,{children:"The minter functionality declares the deployer (unless specified) of the contract\nas its owner thus giving him/her the authority to mint tokens."}),"\n",(0,r.jsx)(t.p,{children:"Since in this example we are deploying the contract ourselves using our private key and address,\nwe will be the owner of the contract and thus have the\nability to mint the tokens."}),"\n",(0,r.jsx)(t.h2,{id:"deploy-the-contract",children:"Deploy the Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Open the tab with the label ",(0,r.jsx)(t.code,{children:"Compiler"})," and select the solidity version that\nmatches with the solidity version written in file as ",(0,r.jsx)(t.code,{children:"pragma solidity \u2026.."}),". The\nversion should be equal to or higher than the file\u2019s version. For example, in our\nfile the version stated on the top of the contract is ",(0,r.jsx)(t.code,{children:"pragma solidity ^0.6.0"}),"\nso the required version we need to pick should be 0.6.0 or\nhigher."]}),"\n",(0,r.jsx)(t.p,{children:"After checking the solidity version click the compile button. If you did not\nchange anything in the file, or the solidity version is not wrong, the contract\nshould compile without any errors."}),"\n",(0,r.jsxs)(t.p,{children:["Now click the tab with label ",(0,r.jsx)(t.code,{children:"Deploy & run transactions"}),'. Here before\ndeploying our contract, we should change the environment. Click the\nenvironment tab and select "Injected Web3." If a Decypher or Metamask pop-up shows up and asks you to\nconnect the account, then please go ahead and click connect. Once connected you should see your\naddress listed under environment.']}),"\n",(0,r.jsxs)(t.p,{children:["The last step before deployment is to select the correct contract from a dropdown section\nplaced just above the ",(0,r.jsx)(t.code,{children:"Deploy"})," button. Select the contract named ",(0,r.jsx)(t.code,{children:"ERC20PresetMinterPauser.sol"}),".\nYou will see a section asking you to fill out the main details of your token, often called\nthe constructor arguments."]}),"\n",(0,r.jsxs)(t.p,{children:['For this example we will name the token "test" with the symbol\n',(0,r.jsx)(t.code,{children:"tst"}),". Click the ",(0,r.jsx)(t.code,{children:"Transact"})," button."]}),"\n",(0,r.jsx)(t.p,{children:"A pop-up from Decypher or Metamask (depending upon what you are using) will ask you for signing\nand confirming the transaction. Once you confirm the pop-ups, the transaction will be execcuted and the smart\ncontract will be deployed to Dijets Utility Chain."}),"\n",(0,r.jsx)(t.p,{children:"Now that the contract has been deployed, we can start interacting with it."}),"\n",(0,r.jsx)(t.h2,{id:"interact-with-token",children:"Interact with Token"}),"\n",(0,r.jsx)(t.p,{children:"In order to interact with the token contract we first need to find its address called the Contract Address.\nYou can find the contract address by going to Tinker's console and\nclicking the arrow to expand the text. You should now be able to see the transaction hash of the contract we deployed earlier.\nCopy the transaction hash."}),"\n",(0,r.jsxs)(t.p,{children:["Paste the copied transaction hash into the ",(0,r.jsx)(t.a,{href:"https://utility-explorer.swedencentral.cloudapp.azure.com/",children:"Explorer's Search Bar"})," and press enter."]}),"\n",(0,r.jsx)(t.p,{children:"This page is the transaction summary page detailing all the information about the transaction that deployed our Token contract."}),"\n",(0,r.jsxs)(t.p,{children:["The first address on the page is the wallet address that created the token and deployed the contract and the second address is\nthe contract address for the token ",(0,r.jsx)(t.code,{children:"test"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["After deployment a new section named ",(0,r.jsx)(t.code,{children:"Deployed Contracts"})," should now be available on Tinker."]}),"\n",(0,r.jsxs)(t.p,{children:["This section contains all of the functions that we call and use to interact with our token\ncontract. Let's use the ",(0,r.jsx)(t.code,{children:"mint"})," function to get some tokens minted to our address."]}),"\n",(0,r.jsxs)(t.p,{children:["Click the arrow beside the mint method and enter your address and the amount of tokens you wish to mint\nin ",(0,r.jsx)(t.code,{children:"wei"}),". For example, if you wish to mint 1000 ",(0,r.jsx)(t.code,{children:"tst"})," tokens, then the amount in wei for ",(0,r.jsx)(t.code,{children:"1000"})," should be entered\nas ",(0,r.jsx)(t.code,{children:"1000000000000000000000"})]}),"\n",(0,r.jsx)(t.h2,{id:"add-token-to-metamask",children:"Add Token to MetaMask"}),"\n",(0,r.jsxs)(t.p,{children:["Even though we have minted ",(0,r.jsx)(t.code,{children:"1000 tst"})," tokens to our address. The token will only\nbe visible in Metamask once we specify its contract address and import it."]}),"\n",(0,r.jsxs)(t.p,{children:["To import our 1000 tokens we just minted, click ",(0,r.jsx)(t.code,{children:"Import Tokens"})," tab under ",(0,r.jsx)(t.code,{children:"Assets"})," in Metamask.\nUnder Custom Token -> Token Contract address paste the contract address of the token we copied earlier."]}),"\n",(0,r.jsxs)(t.p,{children:["The rest of the details like the token name ",(0,r.jsx)(t.code,{children:"test"})," and its symbol ",(0,r.jsx)(t.code,{children:"tst"})," will automatically get populated.\nClick Next and you should now be able to see your 1000 test tokens within the Metamask wallet."]})]})}function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(l,Object.assign({},e,{children:(0,r.jsx)(u,e)}))}}},function(e){e.O(0,[2331,2499,9774,2888,179],(function(){return t=95910,e(e.s=t);var t}));var t=e.O();_N_E=t}]);