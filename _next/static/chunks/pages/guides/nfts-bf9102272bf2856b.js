(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5481],{2184:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/nfts",function(){return t(70641)}])},70641:function(e,n,t){"use strict";t.r(n),t.d(n,{Page:function(){return s},meta:function(){return a}});var o=t(52322),i=t(3905),r=t(72499),a={id:"nfts",title:"Non-Fungible Tokens",description:"How to make an NFT Token on Dijets Utility Chain",sidebar_label:"Overview"},s=function(e){var n=e.children;return(0,o.jsx)(r.Z,{meta:a,children:n})},c=s;function l(e){var n=Object.assign({h2:"h2",p:"p",a:"a",ul:"ul",li:"li",h3:"h3",img:"img",code:"code",strong:"strong"},(0,i.ah)(),e.components),t=n.Admonition;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Admonition",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"Non-fungible tokens, or NFT, are digital assets that are provably unique.\nThey can be used to represent both tangible and intangible items. Each NFT Token\ncontains identifying information recorded in smart contracts. It\u2019s precisely this information\nthat makes a token - non-fungible and as such, they cannot be directly replaced by another token."}),"\n",(0,o.jsx)(n.h2,{id:"erc-721-nft-smart-contracts",children:"ERC-721 (NFT) Smart Contracts"}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial guides you through a basic ",(0,o.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-721",children:"ERC-721\n(NFT)"})," smart contract on Dijets\nTest Network. We'll deploy our\nNFT on the test networks utility chain and view it on the explorer.\nThese NFTs aren't transferable to Dijets Mainnet. However, once you feel\ncomfortable launching your NFT project, you can do so on Dijets Mainnet and list\nit on an NFT marketplace."]}),"\n",(0,o.jsx)(n.p,{children:"Note that the following tools will be used during this tutorial. It is thus presumed that\nyou chave access to each one of them."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://www.pinata.cloud/",children:"Pinata"}),": To store your NFT images and metadata."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://wizard.openzeppelin.com/",children:"OpenZeppelin\u2019s Wizard"}),": to create the ERC-721 smart contract."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://tinker.dijets.io/",children:"Tinker IDE"}),": To edit the code and deploy it to Dijets TestNet."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://faucet.dijets.io/",children:"Dijets Testnet Faucet"}),": To fund the deployment."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",children:"MetaMask"}),": To process transactions related to funding and deploying the smart contract."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://utility-explorer.swedencentral.cloudapp.azure.com/",children:"Dijets Utility Chain Explorer"}),": To view the deployed smart contract."]}),"\n"]}),"\n",(0,o.jsx)(t,{type:"caution",children:(0,o.jsx)(n.p,{children:"This Solidity smart contract tutorial is for demonstration purposes\nonly. Users should consider proper precautions, error handling, and safeguards\nfor production use. No one at Dijets is responsible for your development, and\nyou must take full responsibility for ensuring your code is secure."})}),"\n",(0,o.jsx)(n.h2,{id:"preparing-your-nft-files",children:"Preparing Your NFT Files"}),"\n",(0,o.jsx)(n.p,{children:"The first step of setting up an NFT smart contract is having your NFT files\nready to use. In this example, the files will get uploaded to Pinata, a pinning\nservice that prevents files from being garbage collected on IPFS."}),"\n",(0,o.jsxs)(n.p,{children:["If you're unfamiliar with the process of uploading image and metadata files to\nan IPFS provider for NFT collection usage, please have a read through ",(0,o.jsx)(n.a,{href:"nft-metadata",children:"this guide on\npreparing NFT files"}),". Ensure that your files are\nuploaded and your base URI is ready to plug into your smart contract."]}),"\n",(0,o.jsx)(n.p,{children:"Once the image and metadata files are ready, we can prepare to deploy a smart contract."}),"\n",(0,o.jsx)(n.h2,{id:"preparing-your-environment",children:"Preparing Your Environment"}),"\n",(0,o.jsx)(n.h3,{id:"metamask-extension",children:"MetaMask Extension"}),"\n",(0,o.jsxs)(n.p,{children:["You'll need the MetaMask Extension installed on whatever browser you're using to\nbe able to fund the deployment of the smart contract. If you've not done so\nalready, download MetaMask and ",(0,o.jsx)(n.a,{href:"/guides/add-dijets-programmatically",children:"add Dijets Network to MetaMask"}),". Create or import Dijets account as necessary."]}),"\n",(0,o.jsx)(n.h3,{id:"getting-testnet-funds",children:"Getting Testnet Funds"}),"\n",(0,o.jsxs)(n.p,{children:["Because we're deploying on the Dijets TestNet, you'll need to get DJTX on Dijets Testnet.\nPlease visit ",(0,o.jsx)(n.a,{href:"https://faucet.dijets.io/",children:"Dijets Faucet"}),", where you\ncan request up to 2 DJTX per day for testing. These DJTX tokens have no monetary value and are only for development purposes only.\nEnter your Utility Chain address of the\naccount linked to your MetaMask in the previous step to get the testnet DJTX."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-smart-contract",children:"Creating the Smart Contract"}),"\n",(0,o.jsxs)(n.p,{children:["To create the smart contract, we're going to use ",(0,o.jsx)(n.a,{href:"https://docs.openzeppelin.com/",children:"Open\nZeppelin"}),". Open Zeppelin is a key tool for\nbuilding smart contracts quickly and easily. While we're only scratching the\nsurface in this tutorial, OpenZeppelin has amazing documentation available on their website for\nyou to read when you want to build more complex contracts."]}),"\n",(0,o.jsxs)(n.p,{children:["Open Zeppelin provides a ",(0,o.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/4.x/wizard",children:"Contract\nWizard"})," that can help with building out\nERC contracts. In the interest of keeping this tutorial beginner-friendly, we'll use the contract wizard to\ncreate our ERC-721 contract."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/docs/img/openzeppelin.png",alt:"Contract Wizard"})}),"\n",(0,o.jsxs)(n.p,{children:["Select ",(0,o.jsx)(n.code,{children:"ERC-721"})," on the Contract Wizard to get started. This will create the\ncontract in ",(0,o.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.15/",children:"Solidity programming\nlanguage"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"As you can see, the template contract is bare-boned. We'll fill out the\ninformation in the left panel to auto-populate it into our contract. Make sure\nyou change to the ERC-721 tab as you get started to make the proper contract."}),"\n",(0,o.jsxs)(n.p,{children:["The Wizard auto-fills in a name and symbol for your NFT collection, which we'll\nmodify here. I'm naming it ",(0,o.jsx)(n.code,{children:"Photography"})," and giving it the symbol ",(0,o.jsx)(n.code,{children:"FOTO"}),". If you\nchose your own files to use during this tutorial, you can choose a relevant name\nand symbol for your collection."]}),"\n",(0,o.jsxs)(n.p,{children:["The Base URI field listed here is the URL of the metadata folder uploaded to\nPinata(for example, using the same URL as the one we generated in the ",(0,o.jsx)(n.a,{href:"nft-metadat",children:"tutorial for preparing the NFT files"}),"\n",(0,o.jsx)(n.code,{children:"https://gateway.pinata.cloud/ipfs/QmUTHR8JWdfsGrWT4Xf7TYvMSU7gKMpxxQNHpTjzhTtpXW"}),").\nPaste the URL into the Base URI field."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, we'll want to check the ",(0,o.jsx)(n.code,{children:"Mintable"})," and ",(0,o.jsx)(n.code,{children:"Auto Increment Ids"})," boxes. This\nwill populate a mint function into our template that would handle the\nincrementing of token Ids on mint if we had more than one NFT in our\ncollection. We still want it to auto-assign our 1 NFT, so we'll check it."]}),"\n",(0,o.jsxs)(n.p,{children:["This automatically checks the ",(0,o.jsx)(n.code,{children:"Ownable"})," button, which gives the ",(0,o.jsx)(n.code,{children:"safeMint"}),"\nfunction the ",(0,o.jsx)(n.code,{children:"onlyOwner"})," modifier. This modifier indicates that only the owner\nof the smart contract will be able to successfully call the function."]}),"\n",(0,o.jsx)(t,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"onlyOwner"})," modifier should be removed when creating a smart contract for a\npublic mint. Otherwise, users wouldn't be able to successfully mint the NFTs\nwhen calling the ",(0,o.jsx)(n.code,{children:"safeMint"})," function. Because this tutorial only handles the owner\u2019s\nwallet address, the modifier is being left in."]})}),"\n",(0,o.jsxs)(n.p,{children:["This ",(0,o.jsx)(n.code,{children:"safeMint"})," function also doubles as an airdrop function in our contract because the\naddress the NFT is minted to does not need to be the function owner. This\nfunctionality is specially useful when NFT collection owners want to give away\nNFTs for free outside of the normal minting window."]}),"\n",(0,o.jsx)(n.p,{children:"You can download or copy the smart contract code\nand paste it in the Tinker IDE to start the deployment process."}),"\n",(0,o.jsx)(n.h2,{id:"deploying-the-smart-contract-with-tinker-ide",children:"Deploying the Smart Contract with Tinker IDE"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://tinker.dijets.io/",children:"Tinker IDE"})," is a fork of Remix that allows you\nto edit, compile, and deploy your smart contracts to Dijets Utility Chain by default.\nThis will prevent you from\nneeding to download any other coding environments or having to change networks and keeps the deployment process pretty straight forward."]}),"\n",(0,o.jsxs)(n.p,{children:["After pasting in or importing the smart contract code into Tinker IDE, the first thing you need to do is compile\nit. Hit the ",(0,o.jsx)(n.code,{children:"Compile"})," button on the left-hand side. You could also use the\nkeyboard shortcut ",(0,o.jsx)(n.code,{children:"Ctrl / Command + S"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Once completed, you'll see a green checkmark on the far left tab.\nNext, you'll click on the bottom tab on the left-hand side to move to the\ndeployment page."}),"\n",(0,o.jsxs)(n.p,{children:["Since we will be using Metamask to sign and confirm the deploymeny transaction, Click on the ",(0,o.jsx)(n.code,{children:"Environment"})," drop-down, and select ",(0,o.jsx)(n.code,{children:"Injected web3"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This should prompt you to connect with your MetaMask account. Once connected,\nyou can verify the correct connection by checking that the Account number\nmatches your MetaMask address."}),"\n",(0,o.jsxs)(n.p,{children:["Now click on the ",(0,o.jsx)(n.code,{children:"Contract"})," drop-down and select the contract you created and\ncompiled. It should show up with the name you gave it in the Open Zeppelin\nWizard. For our tutorial we used the name ",(0,o.jsx)(n.strong,{children:"BlueSphere"})]}),"\n",(0,o.jsxs)(n.p,{children:["Click Deploy. This will open MetaMask and ask you to confirm the transaction. Click ",(0,o.jsx)(n.code,{children:"Confirm"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["It may take a second, but once completed, your newly deployed contract will\nappear underneath the ",(0,o.jsx)(n.code,{children:"Transactions Recorded"})," field."]}),"\n",(0,o.jsxs)(n.p,{children:["Copy your contract\u2019s address and open the ",(0,o.jsx)(n.a,{href:"https://utility-explorer.swedencentral.cloudapp.azure.com/",children:"Dijets Utility Chain Explorer"}),".\nPaste your contract address in the search bar, and click ",(0,o.jsx)(n.code,{children:"Search"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The first transaction you see should be the contract deployment you just did in\nthe Tinker IDE."}),"\n",(0,o.jsx)(n.h2,{id:"minting-an-nft",children:"Minting an NFT"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have deployed the contract, we can mint the NFT. Go back to the\nTinker IDE tab and click on your contract to expand its information. A list of\nfunctions will appear underneath each stating the function you can use to interact with\nthe deployed contract."}),"\n",(0,o.jsxs)(n.p,{children:["The only function we are interested in at the moment is the ",(0,o.jsx)(n.code,{children:"safeMint"})," function. Click the\ndrop-down arrow for the function to expand the address field."]}),"\n",(0,o.jsxs)(n.p,{children:["Copy your MetaMask address and paste it into this address field. This will\nsend the NFT to your address when the mint function has been called. Go ahead and Click\n",(0,o.jsx)(n.code,{children:"transact"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This will reopen MetaMask and ask you to verify the transaction. Click ",(0,o.jsx)(n.code,{children:"Confirm"})," to mint your NFT."]}),"\n",(0,o.jsx)(n.p,{children:"Once the transaction has been confirmed, you'll see a green checkmark in the\nterminal at the bottom of the Tinker IDE."}),"\n",(0,o.jsxs)(n.p,{children:["Head back to the Dijets Utility Chain Explorer page for your contract and refresh\nit. You should now see a second transaction, your call to ",(0,o.jsx)(n.code,{children:"safeMint"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"By clicking on the transaction hash you can see that your NFT was created!"})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(c,Object.assign({},e,{children:(0,o.jsx)(l,e)}))}}},function(e){e.O(0,[2331,2499,9774,2888,179],(function(){return n=2184,e(e.s=n);var n}));var n=e.O();_N_E=n}]);