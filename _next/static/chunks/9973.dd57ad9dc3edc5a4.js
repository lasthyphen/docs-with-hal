(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9973],{40844:function(E){var T=.999,e=/[\\\/\-_+.# \t"@\[\(\{&]/,R=/[\\\/\-_+.# \t"@\[\(\{&]/g;function A(E,S,t,O,I,N){if(N===S.length)return I===E.length?1:.99;for(var r,n,C,L=O.charAt(N),s=t.indexOf(L,I),_=0;s>=0;)(r=A(E,S,t,O,s+1,N+1))>_&&(s===I?r*=1:e.test(E.charAt(s-1))?(r*=.9,(C=E.slice(I,s-1).match(R))&&I>0&&(r*=Math.pow(T,C.length))):e.test(E.slice(I,s-1))?(r*=0,I>0&&(r*=Math.pow(T,s-I))):(r*=.3,I>0&&(r*=Math.pow(T,s-I))),E.charAt(s)!==S.charAt(N)&&(r*=.9999)),r<.1&&t.charAt(s-1)===O.charAt(N+1)&&t.charAt(s-1)!==O.charAt(N)&&.1*(n=A(E,S,t,O,s+1,N+2))>r&&(r=.1*n),r>_&&(_=r),s=t.indexOf(L,s+1);return _}E.exports=function(E,T){return A(E,T,E.toLowerCase(),T.toLowerCase(),0,0)}},80060:function(E,T,e){"use strict";e.d(T,{Pn:function(){return D}});var R,A,S=function(){function E(E,T){for(var e=0;e<T.length;e++){var R=T[e];R.enumerable=R.enumerable||!1,R.configurable=!0,"value"in R&&(R.writable=!0),Object.defineProperty(E,R.key,R)}}return function(T,e,R){return e&&E(T.prototype,e),R&&E(T,R),T}}(),t=(R=["",""],A=["",""],Object.freeze(Object.defineProperties(R,{raw:{value:Object.freeze(A)}})));function O(E,T){if(!(E instanceof T))throw new TypeError("Cannot call a class as a function")}var I=function(){function E(){for(var T=this,e=arguments.length,R=Array(e),A=0;A<e;A++)R[A]=arguments[A];return O(this,E),this.tag=function(E){for(var e=arguments.length,R=Array(e>1?e-1:0),A=1;A<e;A++)R[A-1]=arguments[A];return"function"===typeof E?T.interimTag.bind(T,E):"string"===typeof E?T.transformEndResult(E):(E=E.map(T.transformString.bind(T)),T.transformEndResult(E.reduce(T.processSubstitutions.bind(T,R))))},R.length>0&&Array.isArray(R[0])&&(R=R[0]),this.transformers=R.map((function(E){return"function"===typeof E?E():E})),this.tag}return S(E,[{key:"interimTag",value:function(E,T){for(var e=arguments.length,R=Array(e>2?e-2:0),A=2;A<e;A++)R[A-2]=arguments[A];return this.tag(t,E.apply(void 0,[T].concat(R)))}},{key:"processSubstitutions",value:function(E,T,e){var R=this.transformSubstitution(E.shift(),T);return"".concat(T,R,e)}},{key:"transformString",value:function(E){return this.transformers.reduce((function(E,T){return T.onString?T.onString(E):E}),E)}},{key:"transformSubstitution",value:function(E,T){return this.transformers.reduce((function(E,e){return e.onSubstitution?e.onSubstitution(E,T):E}),E)}},{key:"transformEndResult",value:function(E){return this.transformers.reduce((function(E,T){return T.onEndResult?T.onEndResult(E):E}),E)}}]),E}(),N=I,r={separator:"",conjunction:"",serial:!1},n=function(){var E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r;return{onSubstitution:function(T,e){if(Array.isArray(T)){var R=T.length,A=E.separator,S=E.conjunction,t=E.serial,O=e.match(/(\n?[^\S\n]+)$/);if(T=O?T.join(A+O[1]):T.join(A+" "),S&&R>1){var I=T.lastIndexOf(A);T=T.slice(0,I)+(t?A:"")+" "+S+T.slice(I+1)}}return T}}};function C(E){if(Array.isArray(E)){for(var T=0,e=Array(E.length);T<E.length;T++)e[T]=E[T];return e}return Array.from(E)}var L=function(){var E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"initial";return{onEndResult:function(T){if("initial"===E){var e=T.match(/^[^\S\n]*(?=\S)/gm),R=e&&Math.min.apply(Math,C(e.map((function(E){return E.length}))));if(R){var A=new RegExp("^.{"+R+"}","gm");return T.replace(A,"")}return T}if("all"===E)return T.replace(/^[^\S\n]+/gm,"");throw new Error("Unknown type: "+E)}}},s=function(){var E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{onEndResult:function(T){if(""===E)return T.trim();if("start"===(E=E.toLowerCase())||"left"===E)return T.replace(/^\s*/,"");if("end"===E||"right"===E)return T.replace(/\s*$/,"");throw new Error("Side not supported: "+E)}}},_=(new N(n({separator:","}),L,s),new N(n({separator:",",conjunction:"and"}),L,s),new N(n({separator:",",conjunction:"or"}),L,s),function(E){return{onSubstitution:function(T,e){if(null==E||"string"!==typeof E)throw new Error("You need to specify a string character to split by.");return"string"===typeof T&&T.includes(E)&&(T=T.split(E)),T}}}),o=function(E){return null!=E&&!Number.isNaN(E)&&"boolean"!==typeof E},i=function(){return{onSubstitution:function(E){return Array.isArray(E)?E.filter(o):o(E)?E:""}}},a=(new N(_("\n"),i,n,L,s),function(E,T){return{onSubstitution:function(e,R){if(null==E||null==T)throw new Error("replaceSubstitutionTransformer requires at least 2 arguments.");return null==e?e:e.toString().replace(E,T)}}}),P=(new N(_("\n"),n,L,s,a(/&/g,"&amp;"),a(/</g,"&lt;"),a(/>/g,"&gt;"),a(/"/g,"&quot;"),a(/'/g,"&#x27;"),a(/`/g,"&#x60;")),function(E,T){return{onEndResult:function(e){if(null==E||null==T)throw new Error("replaceResultTransformer requires at least 2 arguments.");return e.replace(E,T)}}}),D=(new N(P(/(?:\n(?:\s*))+/g," "),s),new N(P(/(?:\n\s*)/g,""),s),new N(n({separator:","}),P(/(?:\s+)/g," "),s),new N(n({separator:",",conjunction:"or"}),P(/(?:\s+)/g," "),s),new N(n({separator:",",conjunction:"and"}),P(/(?:\s+)/g," "),s),new N(n,L,s),new N(n,P(/(?:\s+)/g," "),s),new N(L,s));new N(L("all"),s)},50857:function(E,T,e){var R=e(37772).Symbol;E.exports=R},53366:function(E,T,e){var R=e(50857),A=e(62107),S=e(37157),t=R?R.toStringTag:void 0;E.exports=function(E){return null==E?void 0===E?"[object Undefined]":"[object Null]":t&&t in Object(E)?A(E):S(E)}},36244:function(E,T,e){var R=e(52153),A=/^\s+/;E.exports=function(E){return E?E.slice(0,R(E)+1).replace(A,""):E}},51242:function(E,T,e){var R="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g;E.exports=R},62107:function(E,T,e){var R=e(50857),A=Object.prototype,S=A.hasOwnProperty,t=A.toString,O=R?R.toStringTag:void 0;E.exports=function(E){var T=S.call(E,O),e=E[O];try{E[O]=void 0;var R=!0}catch(I){}var A=t.call(E);return R&&(T?E[O]=e:delete E[O]),A}},37157:function(E){var T=Object.prototype.toString;E.exports=function(E){return T.call(E)}},37772:function(E,T,e){var R=e(51242),A="object"==typeof self&&self&&self.Object===Object&&self,S=R||A||Function("return this")();E.exports=S},52153:function(E){var T=/\s/;E.exports=function(E){for(var e=E.length;e--&&T.test(E.charAt(e)););return e}},54073:function(E,T,e){var R=e(29259),A=e(61100),S=e(7642),t=Math.max,O=Math.min;E.exports=function(E,T,e){var I,N,r,n,C,L,s=0,_=!1,o=!1,i=!0;if("function"!=typeof E)throw new TypeError("Expected a function");function a(T){var e=I,R=N;return I=N=void 0,s=T,n=E.apply(R,e)}function P(E){return s=E,C=setTimeout(l,T),_?a(E):n}function D(E){var e=E-L;return void 0===L||e>=T||e<0||o&&E-s>=r}function l(){var E=A();if(D(E))return M(E);C=setTimeout(l,function(E){var e=T-(E-L);return o?O(e,r-(E-s)):e}(E))}function M(E){return C=void 0,i&&I?a(E):(I=N=void 0,n)}function U(){var E=A(),e=D(E);if(I=arguments,N=this,L=E,e){if(void 0===C)return P(L);if(o)return clearTimeout(C),C=setTimeout(l,T),a(L)}return void 0===C&&(C=setTimeout(l,T)),n}return T=S(T)||0,R(e)&&(_=!!e.leading,r=(o="maxWait"in e)?t(S(e.maxWait)||0,T):r,i="trailing"in e?!!e.trailing:i),U.cancel=function(){void 0!==C&&clearTimeout(C),s=0,I=L=N=C=void 0},U.flush=function(){return void 0===C?n:M(A())},U}},29259:function(E){E.exports=function(E){var T=typeof E;return null!=E&&("object"==T||"function"==T)}},15125:function(E){E.exports=function(E){return null!=E&&"object"==typeof E}},4795:function(E,T,e){var R=e(53366),A=e(15125);E.exports=function(E){return"symbol"==typeof E||A(E)&&"[object Symbol]"==R(E)}},61100:function(E,T,e){var R=e(37772);E.exports=function(){return R.Date.now()}},7642:function(E,T,e){var R=e(36244),A=e(29259),S=e(4795),t=/^[-+]0x[0-9a-f]+$/i,O=/^0b[01]+$/i,I=/^0o[0-7]+$/i,N=parseInt;E.exports=function(E){if("number"==typeof E)return E;if(S(E))return NaN;if(A(E)){var T="function"==typeof E.valueOf?E.valueOf():E;E=A(T)?T+"":T}if("string"!=typeof E)return 0===E?E:+E;E=R(E);var e=O.test(E);return e||I.test(E)?N(E.slice(2),e?2:8):t.test(E)?NaN:+E}},97656:function(E,T,e){"use strict";e.d(T,{Z:function(){return S}});var R=e(2784),A={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const S=((E,T)=>{const e=(0,R.forwardRef)((({color:e="currentColor",size:S=24,strokeWidth:t=2,children:O,...I},N)=>{return(0,R.createElement)("svg",{ref:N,...A,width:S,height:S,stroke:e,strokeWidth:t,className:`lucide lucide-${r=E,r.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,...I},[...T.map((([E,T])=>(0,R.createElement)(E,T))),...(Array.isArray(O)?O:[O])||[]]);var r}));return e.displayName=`${E}`,e})("Microscope",[["path",{d:"M6 18h8",key:"1borvv"}],["path",{d:"M3 22h18",key:"8prr45"}],["path",{d:"M14 22a7 7 0 1 0 0-14h-1",key:"1jwaiy"}],["path",{d:"M9 14h2",key:"197e7h"}],["path",{d:"M8 6h4",key:"i9thid"}],["path",{d:"M13 10V6.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v2.5a.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V10c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2Z",key:"z62yqi"}]])},43614:function(E){var T,e;T=this,e=function(){function E(T,e,R){return this.id=++E.highestId,this.name=T,this.symbols=e,this.postprocess=R,this}function T(E,T,e,R){this.rule=E,this.dot=T,this.reference=e,this.data=[],this.wantedBy=R,this.isComplete=this.dot===E.symbols.length}function e(E,T){this.grammar=E,this.index=T,this.states=[],this.wants={},this.scannable=[],this.completed={}}function R(E,T){this.rules=E,this.start=T||this.rules[0].name;var e=this.byName={};this.rules.forEach((function(E){e.hasOwnProperty(E.name)||(e[E.name]=[]),e[E.name].push(E)}))}function A(){this.reset("")}function S(E,T,S){if(E instanceof R){var t=E;S=T}else t=R.fromCompiled(E,T);for(var O in this.grammar=t,this.options={keepHistory:!1,lexer:t.lexer||new A},S||{})this.options[O]=S[O];this.lexer=this.options.lexer,this.lexerState=void 0;var I=new e(t,0);this.table=[I],I.wants[t.start]=[],I.predict(t.start),I.process(),this.current=0}function t(E){var T=typeof E;if("string"===T)return E;if("object"===T){if(E.literal)return JSON.stringify(E.literal);if(E instanceof RegExp)return E.toString();if(E.type)return"%"+E.type;if(E.test)return"<"+String(E.test)+">";throw new Error("Unknown symbol type: "+E)}}return E.highestId=0,E.prototype.toString=function(E){var T="undefined"===typeof E?this.symbols.map(t).join(" "):this.symbols.slice(0,E).map(t).join(" ")+" \u25cf "+this.symbols.slice(E).map(t).join(" ");return this.name+" \u2192 "+T},T.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},T.prototype.nextState=function(E){var e=new T(this.rule,this.dot+1,this.reference,this.wantedBy);return e.left=this,e.right=E,e.isComplete&&(e.data=e.build(),e.right=void 0),e},T.prototype.build=function(){var E=[],T=this;do{E.push(T.right.data),T=T.left}while(T.left);return E.reverse(),E},T.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,S.fail))},e.prototype.process=function(E){for(var T=this.states,e=this.wants,R=this.completed,A=0;A<T.length;A++){var t=T[A];if(t.isComplete){if(t.finish(),t.data!==S.fail){for(var O=t.wantedBy,I=O.length;I--;){var N=O[I];this.complete(N,t)}if(t.reference===this.index){var r=t.rule.name;(this.completed[r]=this.completed[r]||[]).push(t)}}}else{if("string"!==typeof(r=t.rule.symbols[t.dot])){this.scannable.push(t);continue}if(e[r]){if(e[r].push(t),R.hasOwnProperty(r)){var n=R[r];for(I=0;I<n.length;I++){var C=n[I];this.complete(t,C)}}}else e[r]=[t],this.predict(r)}}},e.prototype.predict=function(E){for(var e=this.grammar.byName[E]||[],R=0;R<e.length;R++){var A=e[R],S=this.wants[E],t=new T(A,0,this.index,S);this.states.push(t)}},e.prototype.complete=function(E,T){var e=E.nextState(T);this.states.push(e)},R.fromCompiled=function(T,e){var A=T.Lexer;T.ParserStart&&(e=T.ParserStart,T=T.ParserRules);var S=new R(T=T.map((function(T){return new E(T.name,T.symbols,T.postprocess)})),e);return S.lexer=A,S},A.prototype.reset=function(E,T){this.buffer=E,this.index=0,this.line=T?T.line:1,this.lastLineBreak=T?-T.col:0},A.prototype.next=function(){if(this.index<this.buffer.length){var E=this.buffer[this.index++];return"\n"===E&&(this.line+=1,this.lastLineBreak=this.index),{value:E}}},A.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},A.prototype.formatError=function(E,T){var e=this.buffer;if("string"===typeof e){var R=e.split("\n").slice(Math.max(0,this.line-5),this.line),A=e.indexOf("\n",this.index);-1===A&&(A=e.length);var S=this.index-this.lastLineBreak,t=String(this.line).length;return T+=" at line "+this.line+" col "+S+":\n\n",T+=R.map((function(E,T){return O(this.line-R.length+T+1,t)+" "+E}),this).join("\n"),T+="\n"+O("",t+S)+"^\n"}return T+" at index "+(this.index-1);function O(E,T){var e=String(E);return Array(T-e.length+1).join(" ")+e}},S.fail={},S.prototype.feed=function(E){var T,R=this.lexer;for(R.reset(E,this.lexerState);;){try{if(!(T=R.next()))break}catch(o){var S=new e(this.grammar,this.current+1);throw this.table.push(S),(I=new Error(this.reportLexerError(o))).offset=this.current,I.token=o.token,I}var t=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var O=this.current+1;S=new e(this.grammar,O),this.table.push(S);for(var I,N=void 0!==T.text?T.text:T.value,r=R.constructor===A?T.value:T,n=t.scannable,C=n.length;C--;){var L=n[C],s=L.rule.symbols[L.dot];if(s.test?s.test(r):s.type?s.type===T.type:s.literal===N){var _=L.nextState({data:r,token:T,isToken:!0,reference:O-1});S.states.push(_)}}if(S.process(),0===S.states.length)throw(I=new Error(this.reportError(T))).offset=this.current,I.token=T,I;this.options.keepHistory&&(t.lexerState=R.save()),this.current++}return t&&(this.lexerState=R.save()),this.results=this.finish(),this},S.prototype.reportLexerError=function(E){var T,e,R=E.token;return R?(T="input "+JSON.stringify(R.text[0])+" (lexer error)",e=this.lexer.formatError(R,"Syntax error")):(T="input (lexer error)",e=E.message),this.reportErrorCommon(e,T)},S.prototype.reportError=function(E){var T=(E.type?E.type+" token: ":"")+JSON.stringify(void 0!==E.value?E.value:E),e=this.lexer.formatError(E,"Syntax error");return this.reportErrorCommon(e,T)},S.prototype.reportErrorCommon=function(E,T){var e=[];e.push(E);var R=this.table.length-2,A=this.table[R],S=A.states.filter((function(E){var T=E.rule.symbols[E.dot];return T&&"string"!==typeof T}));return 0===S.length?(e.push("Unexpected "+T+". I did not expect any more input. Here is the state of my parse table:\n"),this.displayStateStack(A.states,e)):(e.push("Unexpected "+T+". Instead, I was expecting to see one of the following:\n"),S.map((function(E){return this.buildFirstStateStack(E,[])||[E]}),this).forEach((function(E){var T=E[0],R=T.rule.symbols[T.dot],A=this.getSymbolDisplay(R);e.push("A "+A+" based on:"),this.displayStateStack(E,e)}),this)),e.push(""),e.join("\n")},S.prototype.displayStateStack=function(E,T){for(var e,R=0,A=0;A<E.length;A++){var S=E[A],t=S.rule.toString(S.dot);t===e?R++:(R>0&&T.push("    ^ "+R+" more lines identical to this"),R=0,T.push("    "+t)),e=t}},S.prototype.getSymbolDisplay=function(E){return function(E){var T=typeof E;if("string"===T)return E;if("object"===T){if(E.literal)return JSON.stringify(E.literal);if(E instanceof RegExp)return"character matching "+E;if(E.type)return E.type+" token";if(E.test)return"token matching "+String(E.test);throw new Error("Unknown symbol type: "+E)}}(E)},S.prototype.buildFirstStateStack=function(E,T){if(-1!==T.indexOf(E))return null;if(0===E.wantedBy.length)return[E];var e=E.wantedBy[0],R=[E].concat(T),A=this.buildFirstStateStack(e,R);return null===A?null:[E].concat(A)},S.prototype.save=function(){var E=this.table[this.current];return E.lexerState=this.lexerState,E},S.prototype.restore=function(E){var T=E.index;this.current=T,this.table[T]=E,this.table.splice(T+1),this.lexerState=E.lexerState,this.results=this.finish()},S.prototype.rewind=function(E){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[E])},S.prototype.finish=function(){var E=[],T=this.grammar.start;return this.table[this.table.length-1].states.forEach((function(e){e.rule.name===T&&e.dot===e.rule.symbols.length&&0===e.reference&&e.data!==S.fail&&E.push(e)})),E.map((function(E){return E.data}))},{Parser:S,Grammar:R,Rule:E}},E.exports?E.exports=e():T.nearley=e()},27320:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("line",{x1:"19",y1:"12",x2:"5",y2:"12"}),R.createElement("polyline",{points:"12 19 5 12 12 5"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="ArrowLeft",T.Z=I},1724:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("line",{x1:"5",y1:"12",x2:"19",y2:"12"}),R.createElement("polyline",{points:"12 5 19 12 12 19"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="ArrowRight",T.Z=I},27068:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}),R.createElement("path",{d:"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Book",T.Z=I},13852:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}),R.createElement("rect",{x:"8",y:"2",width:"8",height:"4",rx:"1",ry:"1"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Clipboard",T.Z=I},83371:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Columns",T.Z=I},52145:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("polyline",{points:"9 10 4 15 9 20"}),R.createElement("path",{d:"M20 4v7a4 4 0 0 1-4 4H4"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="CornerDownLeft",T.Z=I},99843:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="GitHub",T.Z=I},83178:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("line",{x1:"4",y1:"9",x2:"20",y2:"9"}),R.createElement("line",{x1:"4",y1:"15",x2:"20",y2:"15"}),R.createElement("line",{x1:"10",y1:"3",x2:"8",y2:"21"}),R.createElement("line",{x1:"16",y1:"3",x2:"14",y2:"21"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Hash",T.Z=I},97497:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"}),R.createElement("polyline",{points:"9 22 9 12 15 12 15 22"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Home",T.Z=I},95425:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("polyline",{points:"22 12 16 12 14 15 10 15 8 12 2 12"}),R.createElement("path",{d:"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Inbox",T.Z=I},9075:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="MessageSquare",T.Z=I},91186:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("rect",{x:"2",y:"3",width:"20",height:"14",rx:"2",ry:"2"}),R.createElement("line",{x1:"8",y1:"21",x2:"16",y2:"21"}),R.createElement("line",{x1:"12",y1:"17",x2:"12",y2:"21"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Monitor",T.Z=I},59235:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Phone",T.Z=I},77732:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}),R.createElement("polyline",{points:"17 21 17 13 7 13 7 21"}),R.createElement("polyline",{points:"7 3 7 8 15 8"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Save",T.Z=I},32465:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("circle",{cx:"11",cy:"11",r:"8"}),R.createElement("line",{x1:"21",y1:"21",x2:"16.65",y2:"16.65"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="Search",T.Z=I},79048:function(E,T,e){"use strict";var R=e(2784),A=e(13980),S=e.n(A);function t(){return t=Object.assign||function(E){for(var T=1;T<arguments.length;T++){var e=arguments[T];for(var R in e)Object.prototype.hasOwnProperty.call(e,R)&&(E[R]=e[R])}return E},t.apply(this,arguments)}function O(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}var I=(0,R.forwardRef)((function(E,T){var e=E.color,A=void 0===e?"currentColor":e,S=E.size,I=void 0===S?24:S,N=O(E,["color","size"]);return R.createElement("svg",t({ref:T,xmlns:"http://www.w3.org/2000/svg",width:I,height:I,viewBox:"0 0 24 24",fill:"none",stroke:A,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},N),R.createElement("path",{d:"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}),R.createElement("circle",{cx:"12",cy:"7",r:"4"}))}));I.propTypes={color:S().string,size:S().oneOfType([S().string,S().number])},I.displayName="User",T.Z=I},65924:function(E,T){var e=function(E,T){if(!(this instanceof e))return new e(E,T);this.INITIALIZING=-1,this.CONNECTING=0,this.OPEN=1,this.CLOSED=2,this.url=E,T=T||{},this.headers=T.headers||{},this.payload=void 0!==T.payload?T.payload:"",this.method=T.method||(this.payload?"POST":"GET"),this.withCredentials=!!T.withCredentials,this.FIELD_SEPARATOR=":",this.listeners={},this.xhr=null,this.readyState=this.INITIALIZING,this.progress=0,this.chunk="",this.addEventListener=function(E,T){void 0===this.listeners[E]&&(this.listeners[E]=[]),-1===this.listeners[E].indexOf(T)&&this.listeners[E].push(T)},this.removeEventListener=function(E,T){if(void 0!==this.listeners[E]){var e=[];this.listeners[E].forEach((function(E){E!==T&&e.push(E)})),0===e.length?delete this.listeners[E]:this.listeners[E]=e}},this.dispatchEvent=function(E){if(!E)return!0;E.source=this;var T="on"+E.type;return(!this.hasOwnProperty(T)||(this[T].call(this,E),!E.defaultPrevented))&&(!this.listeners[E.type]||this.listeners[E.type].every((function(T){return T(E),!E.defaultPrevented})))},this._setReadyState=function(E){var T=new CustomEvent("readystatechange");T.readyState=E,this.readyState=E,this.dispatchEvent(T)},this._onStreamFailure=function(E){var T=new CustomEvent("error");T.data=E.currentTarget.response,this.dispatchEvent(T),this.close()},this._onStreamAbort=function(E){this.dispatchEvent(new CustomEvent("abort")),this.close()},this._onStreamProgress=function(E){if(this.xhr)if(200===this.xhr.status){this.readyState==this.CONNECTING&&(this.dispatchEvent(new CustomEvent("open")),this._setReadyState(this.OPEN));var T=this.xhr.responseText.substring(this.progress);this.progress+=T.length,T.split(/(\r\n|\r|\n){2}/g).forEach(function(E){0===E.trim().length?(this.dispatchEvent(this._parseEventChunk(this.chunk.trim())),this.chunk=""):this.chunk+=E}.bind(this))}else this._onStreamFailure(E)},this._onStreamLoaded=function(E){this._onStreamProgress(E),this.dispatchEvent(this._parseEventChunk(this.chunk)),this.chunk=""},this._parseEventChunk=function(E){if(!E||0===E.length)return null;var T={id:null,retry:null,data:"",event:"message"};E.split(/\n|\r\n|\r/).forEach(function(E){var e=(E=E.trimRight()).indexOf(this.FIELD_SEPARATOR);if(!(e<=0)){var R=E.substring(0,e);if(R in T){var A=E.substring(e+1).trimLeft();"data"===R?T[R]+=A:T[R]=A}}}.bind(this));var e=new CustomEvent(T.event);return e.data=T.data,e.id=T.id,e},this._checkStreamClosed=function(){this.xhr&&this.xhr.readyState===XMLHttpRequest.DONE&&this._setReadyState(this.CLOSED)},this.stream=function(){for(var E in this._setReadyState(this.CONNECTING),this.xhr=new XMLHttpRequest,this.xhr.addEventListener("progress",this._onStreamProgress.bind(this)),this.xhr.addEventListener("load",this._onStreamLoaded.bind(this)),this.xhr.addEventListener("readystatechange",this._checkStreamClosed.bind(this)),this.xhr.addEventListener("error",this._onStreamFailure.bind(this)),this.xhr.addEventListener("abort",this._onStreamAbort.bind(this)),this.xhr.open(this.method,this.url),this.headers)this.xhr.setRequestHeader(E,this.headers[E]);this.xhr.withCredentials=this.withCredentials,this.xhr.send(this.payload)},this.close=function(){this.readyState!==this.CLOSED&&(this.xhr.abort(),this.xhr=null,this._setReadyState(this.CLOSED))}};T.L=e},92228:function(E,T,e){"use strict";function R(E,T){return T||(T=E.slice(0)),Object.freeze(Object.defineProperties(E,{raw:{value:Object.freeze(T)}}))}e.d(T,{Z:function(){return R}})},38524:function(E,T,e){"use strict";e.d(T,{mY:function(){return sT},fu:function(){return OT},U8:function(){return lT}});var R=e(7896),A=e(2784),S=e.t(A,2),t=e(41816),O=e(26215),I=e(34540),N=e(64680);const r=S["useId".toString()]||(()=>{});let n=0;function C(E){const[T,e]=A.useState(r());return(0,N.b)((()=>{E||e((E=>null!==E&&void 0!==E?E:String(n++)))}),[E]),E||(T?`radix-${T}`:"")}var L=e(73597),s=e(28316);const _=(0,A.forwardRef)(((E,T)=>{const{children:e,...S}=E,t=A.Children.toArray(e),O=t.find(a);if(O){const E=O.props.children,e=t.map((T=>T===O?A.Children.count(E)>1?A.Children.only(null):(0,A.isValidElement)(E)?E.props.children:null:T));return(0,A.createElement)(o,(0,R.Z)({},S,{ref:T}),(0,A.isValidElement)(E)?(0,A.cloneElement)(E,void 0,e):null)}return(0,A.createElement)(o,(0,R.Z)({},S,{ref:T}),e)}));_.displayName="Slot";const o=(0,A.forwardRef)(((E,T)=>{const{children:e,...R}=E;return(0,A.isValidElement)(e)?(0,A.cloneElement)(e,{...P(R,e.props),ref:(0,O.F)(T,e.ref)}):A.Children.count(e)>1?A.Children.only(null):null}));o.displayName="SlotClone";const i=({children:E})=>(0,A.createElement)(A.Fragment,null,E);function a(E){return(0,A.isValidElement)(E)&&E.type===i}function P(E,T){const e={...T};for(const R in T){const A=E[R],S=T[R];/^on[A-Z]/.test(R)?e[R]=(...E)=>{null===S||void 0===S||S(...E),null===A||void 0===A||A(...E)}:"style"===R?e[R]={...A,...S}:"className"===R&&(e[R]=[A,S].filter(Boolean).join(" "))}return{...E,...e}}const D=["a","button","div","h2","h3","img","li","nav","ol","p","span","svg","ul"].reduce(((E,T)=>{const e=(0,A.forwardRef)(((E,e)=>{const{asChild:S,...t}=E,O=S?_:T;return(0,A.useEffect)((()=>{window[Symbol.for("radix-ui")]=!0}),[]),(0,A.createElement)(O,(0,R.Z)({},t,{ref:e}))}));return e.displayName=`Primitive.${T}`,{...E,[T]:e}}),{});var l=e(86029);const M="dismissableLayer.update",U="dismissableLayer.pointerDownOutside",u="dismissableLayer.focusOutside";let c;const G=(0,A.createContext)({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),p=(0,A.forwardRef)(((E,T)=>{const{disableOutsidePointerEvents:e=!1,onEscapeKeyDown:S,onPointerDownOutside:I,onFocusOutside:N,onInteractOutside:r,onDismiss:n,...C}=E,L=(0,A.useContext)(G),[s,_]=(0,A.useState)(null),[,o]=(0,A.useState)({}),i=(0,O.e)(T,(E=>_(E))),a=Array.from(L.layers),[P]=[...L.layersWithOutsidePointerEventsDisabled].slice(-1),p=a.indexOf(P),B=s?a.indexOf(s):-1,d=L.layersWithOutsidePointerEventsDisabled.size>0,h=B>=p,F=function(E){const T=(0,l.W)(E),e=(0,A.useRef)(!1),R=(0,A.useRef)((()=>{}));return(0,A.useEffect)((()=>{const E=E=>{if(E.target&&!e.current){const A={originalEvent:E};function S(){H(U,T,A,{discrete:!0})}"touch"===E.pointerType?(document.removeEventListener("click",R.current),R.current=S,document.addEventListener("click",R.current,{once:!0})):S()}e.current=!1},A=window.setTimeout((()=>{document.addEventListener("pointerdown",E)}),0);return()=>{window.clearTimeout(A),document.removeEventListener("pointerdown",E),document.removeEventListener("click",R.current)}}),[T]),{onPointerDownCapture:()=>e.current=!0}}((E=>{const T=E.target,e=[...L.branches].some((E=>E.contains(T)));h&&!e&&(null===I||void 0===I||I(E),null===r||void 0===r||r(E),E.defaultPrevented||null===n||void 0===n||n())})),Y=function(E){const T=(0,l.W)(E),e=(0,A.useRef)(!1);return(0,A.useEffect)((()=>{const E=E=>{if(E.target&&!e.current){H(u,T,{originalEvent:E},{discrete:!1})}};return document.addEventListener("focusin",E),()=>document.removeEventListener("focusin",E)}),[T]),{onFocusCapture:()=>e.current=!0,onBlurCapture:()=>e.current=!1}}((E=>{const T=E.target;[...L.branches].some((E=>E.contains(T)))||(null===N||void 0===N||N(E),null===r||void 0===r||r(E),E.defaultPrevented||null===n||void 0===n||n())}));return function(E){const T=(0,l.W)(E);(0,A.useEffect)((()=>{const E=E=>{"Escape"===E.key&&T(E)};return document.addEventListener("keydown",E),()=>document.removeEventListener("keydown",E)}),[T])}((E=>{B===L.layers.size-1&&(null===S||void 0===S||S(E),!E.defaultPrevented&&n&&(E.preventDefault(),n()))})),(0,A.useEffect)((()=>{if(s)return e&&(0===L.layersWithOutsidePointerEventsDisabled.size&&(c=document.body.style.pointerEvents,document.body.style.pointerEvents="none"),L.layersWithOutsidePointerEventsDisabled.add(s)),L.layers.add(s),f(),()=>{e&&1===L.layersWithOutsidePointerEventsDisabled.size&&(document.body.style.pointerEvents=c)}}),[s,e,L]),(0,A.useEffect)((()=>()=>{s&&(L.layers.delete(s),L.layersWithOutsidePointerEventsDisabled.delete(s),f())}),[s,L]),(0,A.useEffect)((()=>{const E=()=>o({});return document.addEventListener(M,E),()=>document.removeEventListener(M,E)}),[]),(0,A.createElement)(D.div,(0,R.Z)({},C,{ref:i,style:{pointerEvents:d?h?"auto":"none":void 0,...E.style},onFocusCapture:(0,t.M)(E.onFocusCapture,Y.onFocusCapture),onBlurCapture:(0,t.M)(E.onBlurCapture,Y.onBlurCapture),onPointerDownCapture:(0,t.M)(E.onPointerDownCapture,F.onPointerDownCapture)}))}));function f(){const E=new CustomEvent(M);document.dispatchEvent(E)}function H(E,T,e,{discrete:R}){const A=e.originalEvent.target,S=new CustomEvent(E,{bubbles:!1,cancelable:!0,detail:e});T&&A.addEventListener(E,T,{once:!0}),R?function(E,T){E&&(0,s.flushSync)((()=>E.dispatchEvent(T)))}(A,S):A.dispatchEvent(S)}const B="focusScope.autoFocusOnMount",d="focusScope.autoFocusOnUnmount",h={bubbles:!1,cancelable:!0},F=(0,A.forwardRef)(((E,T)=>{const{loop:e=!1,trapped:S=!1,onMountAutoFocus:t,onUnmountAutoFocus:I,...N}=E,[r,n]=(0,A.useState)(null),C=(0,l.W)(t),L=(0,l.W)(I),s=(0,A.useRef)(null),_=(0,O.e)(T,(E=>n(E))),o=(0,A.useRef)({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;(0,A.useEffect)((()=>{if(S){function E(E){if(o.paused||!r)return;const T=E.target;r.contains(T)?s.current=T:W(s.current,{select:!0})}function T(E){!o.paused&&r&&(r.contains(E.relatedTarget)||W(s.current,{select:!0}))}return document.addEventListener("focusin",E),document.addEventListener("focusout",T),()=>{document.removeEventListener("focusin",E),document.removeEventListener("focusout",T)}}}),[S,r,o.paused]),(0,A.useEffect)((()=>{if(r){y.add(o);const T=document.activeElement;if(!r.contains(T)){const e=new CustomEvent(B,h);r.addEventListener(B,C),r.dispatchEvent(e),e.defaultPrevented||(!function(E,{select:T=!1}={}){const e=document.activeElement;for(const R of E)if(W(R,{select:T}),document.activeElement!==e)return}((E=Y(r),E.filter((E=>"A"!==E.tagName))),{select:!0}),document.activeElement===T&&W(r))}return()=>{r.removeEventListener(B,C),setTimeout((()=>{const E=new CustomEvent(d,h);r.addEventListener(d,L),r.dispatchEvent(E),E.defaultPrevented||W(null!==T&&void 0!==T?T:document.body,{select:!0}),r.removeEventListener(d,L),y.remove(o)}),0)}}var E}),[r,C,L,o]);const i=(0,A.useCallback)((E=>{if(!e&&!S)return;if(o.paused)return;const T="Tab"===E.key&&!E.altKey&&!E.ctrlKey&&!E.metaKey,R=document.activeElement;if(T&&R){const T=E.currentTarget,[A,S]=function(E){const T=Y(E),e=m(T,E),R=m(T.reverse(),E);return[e,R]}(T);A&&S?E.shiftKey||R!==S?E.shiftKey&&R===A&&(E.preventDefault(),e&&W(S,{select:!0})):(E.preventDefault(),e&&W(A,{select:!0})):R===T&&E.preventDefault()}}),[e,S,o.paused]);return(0,A.createElement)(D.div,(0,R.Z)({tabIndex:-1},N,{ref:_,onKeyDown:i}))}));function Y(E){const T=[],e=document.createTreeWalker(E,NodeFilter.SHOW_ELEMENT,{acceptNode:E=>{const T="INPUT"===E.tagName&&"hidden"===E.type;return E.disabled||E.hidden||T?NodeFilter.FILTER_SKIP:E.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;e.nextNode();)T.push(e.currentNode);return T}function m(E,T){for(const e of E)if(!V(e,{upTo:T}))return e}function V(E,{upTo:T}){if("hidden"===getComputedStyle(E).visibility)return!0;for(;E;){if(void 0!==T&&E===T)return!1;if("none"===getComputedStyle(E).display)return!0;E=E.parentElement}return!1}function W(E,{select:T=!1}={}){if(E&&E.focus){const e=document.activeElement;E.focus({preventScroll:!0}),E!==e&&function(E){return E instanceof HTMLInputElement&&"select"in E}(E)&&T&&E.select()}}const y=function(){let E=[];return{add(T){const e=E[0];T!==e&&(null===e||void 0===e||e.pause()),E=g(E,T),E.unshift(T)},remove(T){var e;E=g(E,T),null===(e=E[0])||void 0===e||e.resume()}}}();function g(E,T){const e=[...E],R=e.indexOf(T);return-1!==R&&e.splice(R,1),e}const X=(0,A.forwardRef)(((E,T)=>{var e;const{container:S=(null===globalThis||void 0===globalThis||null===(e=globalThis.document)||void 0===e?void 0:e.body),...t}=E;return S?s.createPortal((0,A.createElement)(D.div,(0,R.Z)({},t,{ref:T})),S):null}));var b=e(28245),v=e(55070),K=e(5163),x=e(95346),w=e(22442),k=(0,e(64597)._)(),$=function(){},J=A.forwardRef((function(E,T){var e=A.useRef(null),R=A.useState({onScrollCapture:$,onWheelCapture:$,onTouchMoveCapture:$}),S=R[0],t=R[1],O=E.forwardProps,I=E.children,N=E.className,r=E.removeScrollBar,n=E.enabled,C=E.shards,L=E.sideCar,s=E.noIsolation,_=E.inert,o=E.allowPinchZoom,i=E.as,a=void 0===i?"div":i,P=(0,K.__rest)(E,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as"]),D=L,l=(0,w.q)([e,T]),M=(0,K.__assign)((0,K.__assign)({},P),S);return A.createElement(A.Fragment,null,n&&A.createElement(D,{sideCar:k,removeScrollBar:r,shards:C,noIsolation:s,inert:_,setCallbacks:t,allowPinchZoom:!!o,lockRef:e}),O?A.cloneElement(A.Children.only(I),(0,K.__assign)((0,K.__assign)({},M),{ref:l})):A.createElement(a,(0,K.__assign)({},M,{className:N,ref:l}),I))}));J.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1},J.classNames={fullWidth:x.zi,zeroRight:x.pF};var Z=e(57758),Q=e(181),j=e(33225),q=!1;if("undefined"!==typeof window)try{var z=Object.defineProperty({},"passive",{get:function(){return q=!0,!0}});window.addEventListener("test",z,z),window.removeEventListener("test",z,z)}catch(cT){q=!1}var EE=!!q&&{passive:!1},TE=function(E,T){var e=T;do{if("undefined"!==typeof ShadowRoot&&e instanceof ShadowRoot&&(e=e.host),eE(E,e)){var R=RE(E,e);if(R[1]>R[2])return!0}e=e.parentNode}while(e&&e!==document.body);return!1},eE=function(E,T){return"v"===E?function(E){var T=window.getComputedStyle(E);return"hidden"!==T.overflowY&&!(T.overflowY===T.overflowX&&"visible"===T.overflowY)}(T):function(E){var T=window.getComputedStyle(E);return"hidden"!==T.overflowX&&!(T.overflowY===T.overflowX&&"visible"===T.overflowX)}(T)},RE=function(E,T){return"v"===E?[(e=T).scrollTop,e.scrollHeight,e.clientHeight]:function(E){return[E.scrollLeft,E.scrollWidth,E.clientWidth]}(T);var e},AE=function(E){return"changedTouches"in E?[E.changedTouches[0].clientX,E.changedTouches[0].clientY]:[0,0]},SE=function(E){return[E.deltaX,E.deltaY]},tE=function(E){return E&&"current"in E?E.current:E},OE=function(E){return"\n  .block-interactivity-".concat(E," {pointer-events: none;}\n  .allow-interactivity-").concat(E," {pointer-events: all;}\n")},IE=0,NE=[];var rE=(0,Z.L)(k,(function(E){var T=A.useRef([]),e=A.useRef([0,0]),R=A.useRef(),S=A.useState(IE++)[0],t=A.useState((function(){return(0,j.Ws)()}))[0],O=A.useRef(E);A.useEffect((function(){O.current=E}),[E]),A.useEffect((function(){if(E.inert){document.body.classList.add("block-interactivity-".concat(S));var T=(0,K.__spreadArray)([E.lockRef.current],(E.shards||[]).map(tE),!0).filter(Boolean);return T.forEach((function(E){return E.classList.add("allow-interactivity-".concat(S))})),function(){document.body.classList.remove("block-interactivity-".concat(S)),T.forEach((function(E){return E.classList.remove("allow-interactivity-".concat(S))}))}}}),[E.inert,E.lockRef.current,E.shards]);var I=A.useCallback((function(E,T){if("touches"in E&&2===E.touches.length)return!O.current.allowPinchZoom;var A,S=AE(E),t=e.current,I="deltaX"in E?E.deltaX:t[0]-S[0],N="deltaY"in E?E.deltaY:t[1]-S[1],r=E.target,n=Math.abs(I)>Math.abs(N)?"h":"v";if("touches"in E&&"h"===n&&"range"===r.type)return!1;var C=TE(n,r);if(!C)return!0;if(C?A=n:(A="v"===n?"h":"v",C=TE(n,r)),!C)return!1;if(!R.current&&"changedTouches"in E&&(I||N)&&(R.current=A),!A)return!0;var L=R.current||A;return function(E,T,e,R,A){var S=function(E,T){return"h"===E&&"rtl"===T?-1:1}(E,window.getComputedStyle(T).direction),t=S*R,O=e.target,I=T.contains(O),N=!1,r=t>0,n=0,C=0;do{var L=RE(E,O),s=L[0],_=L[1]-L[2]-S*s;(s||_)&&eE(E,O)&&(n+=_,C+=s),O=O.parentNode}while(!I&&O!==document.body||I&&(T.contains(O)||T===O));return(r&&(A&&0===n||!A&&t>n)||!r&&(A&&0===C||!A&&-t>C))&&(N=!0),N}(L,T,E,"h"===L?I:N,!0)}),[]),N=A.useCallback((function(E){var e=E;if(NE.length&&NE[NE.length-1]===t){var R="deltaY"in e?SE(e):AE(e),A=T.current.filter((function(E){return E.name===e.type&&E.target===e.target&&function(E,T){return E[0]===T[0]&&E[1]===T[1]}(E.delta,R)}))[0];if(A&&A.should)e.preventDefault();else if(!A){var S=(O.current.shards||[]).map(tE).filter(Boolean).filter((function(E){return E.contains(e.target)}));(S.length>0?I(e,S[0]):!O.current.noIsolation)&&e.preventDefault()}}}),[]),r=A.useCallback((function(E,e,R,A){var S={name:E,delta:e,target:R,should:A};T.current.push(S),setTimeout((function(){T.current=T.current.filter((function(E){return E!==S}))}),1)}),[]),n=A.useCallback((function(E){e.current=AE(E),R.current=void 0}),[]),C=A.useCallback((function(T){r(T.type,SE(T),T.target,I(T,E.lockRef.current))}),[]),L=A.useCallback((function(T){r(T.type,AE(T),T.target,I(T,E.lockRef.current))}),[]);A.useEffect((function(){return NE.push(t),E.setCallbacks({onScrollCapture:C,onWheelCapture:C,onTouchMoveCapture:L}),document.addEventListener("wheel",N,EE),document.addEventListener("touchmove",N,EE),document.addEventListener("touchstart",n,EE),function(){NE=NE.filter((function(E){return E!==t})),document.removeEventListener("wheel",N,EE),document.removeEventListener("touchmove",N,EE),document.removeEventListener("touchstart",n,EE)}}),[]);var s=E.removeScrollBar,_=E.inert;return A.createElement(A.Fragment,null,_?A.createElement(t,{styles:OE(S)}):null,s?A.createElement(Q.jp,{gapMode:"margin"}):null)})),nE=A.forwardRef((function(E,T){return A.createElement(J,(0,K.__assign)({},E,{ref:T,sideCar:rE}))}));nE.classNames=J.classNames;var CE=nE,LE=e(49732);const sE="Dialog",[_E,oE]=(0,I.b)(sE),[iE,aE]=_E(sE),PE=E=>{const{__scopeDialog:T,children:e,open:R,defaultOpen:S,onOpenChange:t,modal:O=!0}=E,I=(0,A.useRef)(null),N=(0,A.useRef)(null),[r=!1,n]=(0,L.T)({prop:R,defaultProp:S,onChange:t});return(0,A.createElement)(iE,{scope:T,triggerRef:I,contentRef:N,contentId:C(),titleId:C(),descriptionId:C(),open:r,onOpenChange:n,onOpenToggle:(0,A.useCallback)((()=>n((E=>!E))),[n]),modal:O},e)},DE="DialogPortal",[lE,ME]=_E(DE,{forceMount:void 0}),UE=E=>{const{__scopeDialog:T,forceMount:e,children:R,container:S}=E,t=aE(DE,T);return(0,A.createElement)(lE,{scope:T,forceMount:e},A.Children.map(R,(E=>(0,A.createElement)(b.z,{present:e||t.open},(0,A.createElement)(X,{asChild:!0,container:S},E)))))},uE="DialogOverlay",cE=(0,A.forwardRef)(((E,T)=>{const e=ME(uE,E.__scopeDialog),{forceMount:S=e.forceMount,...t}=E,O=aE(uE,E.__scopeDialog);return O.modal?(0,A.createElement)(b.z,{present:S||O.open},(0,A.createElement)(GE,(0,R.Z)({},t,{ref:T}))):null})),GE=(0,A.forwardRef)(((E,T)=>{const{__scopeDialog:e,...S}=E,t=aE(uE,e);return(0,A.createElement)(CE,{as:_,allowPinchZoom:!0,shards:[t.contentRef]},(0,A.createElement)(D.div,(0,R.Z)({"data-state":FE(t.open)},S,{ref:T,style:{pointerEvents:"auto",...S.style}})))})),pE="DialogContent",fE=(0,A.forwardRef)(((E,T)=>{const e=ME(pE,E.__scopeDialog),{forceMount:S=e.forceMount,...t}=E,O=aE(pE,E.__scopeDialog);return(0,A.createElement)(b.z,{present:S||O.open},O.modal?(0,A.createElement)(HE,(0,R.Z)({},t,{ref:T})):(0,A.createElement)(BE,(0,R.Z)({},t,{ref:T})))})),HE=(0,A.forwardRef)(((E,T)=>{const e=aE(pE,E.__scopeDialog),S=(0,A.useRef)(null),I=(0,O.e)(T,e.contentRef,S);return(0,A.useEffect)((()=>{const E=S.current;if(E)return(0,LE.Ry)(E)}),[]),(0,A.createElement)(dE,(0,R.Z)({},E,{ref:I,trapFocus:e.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:(0,t.M)(E.onCloseAutoFocus,(E=>{var T;E.preventDefault(),null===(T=e.triggerRef.current)||void 0===T||T.focus()})),onPointerDownOutside:(0,t.M)(E.onPointerDownOutside,(E=>{const T=E.detail.originalEvent,e=0===T.button&&!0===T.ctrlKey;(2===T.button||e)&&E.preventDefault()})),onFocusOutside:(0,t.M)(E.onFocusOutside,(E=>E.preventDefault()))}))})),BE=(0,A.forwardRef)(((E,T)=>{const e=aE(pE,E.__scopeDialog),S=(0,A.useRef)(!1);return(0,A.createElement)(dE,(0,R.Z)({},E,{ref:T,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:T=>{var R,A;(null===(R=E.onCloseAutoFocus)||void 0===R||R.call(E,T),T.defaultPrevented)||(S.current||null===(A=e.triggerRef.current)||void 0===A||A.focus(),T.preventDefault());S.current=!1},onInteractOutside:T=>{var R,A;null===(R=E.onInteractOutside)||void 0===R||R.call(E,T),T.defaultPrevented||(S.current=!0);const t=T.target;(null===(A=e.triggerRef.current)||void 0===A?void 0:A.contains(t))&&T.preventDefault()}}))})),dE=(0,A.forwardRef)(((E,T)=>{const{__scopeDialog:e,trapFocus:S,onOpenAutoFocus:t,onCloseAutoFocus:I,...N}=E,r=aE(pE,e),n=(0,A.useRef)(null),C=(0,O.e)(T,n);return(0,v.EW)(),(0,A.createElement)(A.Fragment,null,(0,A.createElement)(F,{asChild:!0,loop:!0,trapped:S,onMountAutoFocus:t,onUnmountAutoFocus:I},(0,A.createElement)(p,(0,R.Z)({role:"dialog",id:r.contentId,"aria-describedby":r.descriptionId,"aria-labelledby":r.titleId,"data-state":FE(r.open)},N,{ref:C,onDismiss:()=>r.onOpenChange(!1)}))),!1)})),hE="DialogTitle";function FE(E){return E?"open":"closed"}const YE="DialogTitleWarning",[mE,VE]=(0,I.k)(YE,{contentName:pE,titleName:hE,docsSlug:"dialog"}),WE=PE,yE=UE,gE=cE,XE=fE;var bE=e(40844),vE=e(43100);const KE={prefix:Math.round(1e10*Math.random()),current:0},xE=A.createContext(KE),wE=E=>{const T=A.useContext(xE),e=T===KE,S=A.useMemo((()=>({prefix:e?0:++T.prefix,current:0})),[e,T]);return A.createElement(xE.Provider,(0,R.Z)({value:S},E))};function kE(E){const T=A.useContext(xE);return Boolean(null===globalThis||void 0===globalThis?void 0:globalThis.document)||T!==KE||console.warn("When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server."),A.useMemo((()=>E||`radix-id-${T.prefix}-${++T.current}`),[E])}var $E='[cmdk-group=""]',JE='[cmdk-group-items=""]',ZE='[cmdk-item=""]',QE=`${ZE}:not([aria-disabled="true"])`,jE="cmdk-item-select",qE="data-value",zE=(E,T)=>bE(E,T),ET=A.createContext(void 0),TT=()=>A.useContext(ET),eT=A.createContext(void 0),RT=()=>A.useContext(eT),AT=A.createContext(void 0),ST=A.forwardRef(((E,T)=>{let e=A.useRef(null),R=PT((()=>({search:"",value:"",filtered:{count:0,items:new Map,groups:new Set}}))),S=PT((()=>new Set)),t=PT((()=>new Map)),O=PT((()=>new Map)),I=PT((()=>new Set)),N=iT(E),{label:r,children:n,value:C,onValueChange:L,filter:s,shouldFilter:_,...o}=E,i=kE(),a=kE(),P=kE(),D=UT();aT((()=>{if(void 0!==C){let E=C.trim().toLowerCase();R.current.value=E,D(6,p),l.emit()}}),[C]);let l=A.useMemo((()=>({subscribe:E=>(I.current.add(E),()=>I.current.delete(E)),snapshot:()=>R.current,setState:(E,T,e)=>{var A,S,t;if(!Object.is(R.current[E],T)){if(R.current[E]=T,"search"===E)G(),u(),D(1,c);else if("value"===E){if(void 0!==(null==(A=N.current)?void 0:A.value))return void(null==(t=(S=N.current).onValueChange)||t.call(S,T));e||D(5,p)}l.emit()}},emit:()=>{I.current.forEach((E=>E()))}})),[]),M=A.useMemo((()=>({value:(E,T)=>{T!==O.current.get(E)&&(O.current.set(E,T),R.current.filtered.items.set(E,U(T)),D(2,(()=>{u(),l.emit()})))},item:(E,T)=>(S.current.add(E),T&&(t.current.has(T)?t.current.get(T).add(E):t.current.set(T,new Set([E]))),D(3,(()=>{G(),u(),R.current.value||c(),l.emit()})),()=>{O.current.delete(E),S.current.delete(E),R.current.filtered.items.delete(E),D(4,(()=>{G(),c(),l.emit()}))}),group:E=>(t.current.has(E)||t.current.set(E,new Set),()=>{O.current.delete(E),t.current.delete(E)}),filter:()=>N.current.shouldFilter,label:r||E["aria-label"],listId:i,inputId:P,labelId:a})),[]);function U(E){var T;let e=(null==(T=N.current)?void 0:T.filter)??zE;return E?e(E,R.current.search):0}function u(){if(!e.current||!R.current.search||!1===N.current.shouldFilter)return;let E=R.current.filtered.items,T=[];R.current.filtered.groups.forEach((e=>{let R=t.current.get(e),A=0;R.forEach((T=>{let e=E.get(T);A=Math.max(e,A)})),T.push([e,A])}));let A=e.current.querySelector('[cmdk-list-sizer=""]');H().sort(((T,e)=>{let R=T.getAttribute(qE),A=e.getAttribute(qE);return(E.get(A)??0)-(E.get(R)??0)})).forEach((E=>{let T=E.closest(JE);T?T.appendChild(E.parentElement===T?E:E.closest(`${JE} > *`)):A.appendChild(E.parentElement===A?E:E.closest(`${JE} > *`))})),T.sort(((E,T)=>T[1]-E[1])).forEach((E=>{let T=e.current.querySelector(`${$E}[${qE}="${E[0]}"]`);null==T||T.parentElement.appendChild(T)}))}function c(){let E=H().find((E=>!E.ariaDisabled)),T=null==E?void 0:E.getAttribute(qE);l.setState("value",T||void 0)}function G(){if(!R.current.search||!1===N.current.shouldFilter)return void(R.current.filtered.count=S.current.size);R.current.filtered.groups=new Set;let E=0;for(let T of S.current){let e=U(O.current.get(T));R.current.filtered.items.set(T,e),e>0&&E++}for(let[T,e]of t.current)for(let E of e)if(R.current.filtered.items.get(E)>0){R.current.filtered.groups.add(T);break}R.current.filtered.count=E}function p(){var E,T,e;let R=f();R&&((null==(E=R.parentElement)?void 0:E.firstChild)===R&&(null==(e=null==(T=R.closest($E))?void 0:T.querySelector('[cmdk-group-heading=""]'))||e.scrollIntoView({block:"nearest"})),R.scrollIntoView({block:"nearest"}))}function f(){return e.current.querySelector(`${ZE}[aria-selected="true"]`)}function H(){return Array.from(e.current.querySelectorAll(QE))}function B(E){let T=H()[E];T&&l.setState("value",T.getAttribute(qE))}function d(E){var T;let e=f(),R=H(),A=R.findIndex((E=>E===e)),S=R[A+E];null!=(T=N.current)&&T.loop&&(S=A+E<0?R[R.length-1]:A+E===R.length?R[0]:R[A+E]),S&&l.setState("value",S.getAttribute(qE))}function h(E){let T,e=f(),R=null==e?void 0:e.closest($E);for(;R&&!T;)R=E>0?_T(R,$E):oT(R,$E),T=null==R?void 0:R.querySelector(QE);T?l.setState("value",T.getAttribute(qE)):d(E)}let F=()=>B(H().length-1),Y=E=>{E.preventDefault(),E.metaKey?F():E.altKey?h(1):d(1)},m=E=>{E.preventDefault(),E.metaKey?B(0):E.altKey?h(-1):d(-1)};return A.createElement(wE,null,A.createElement("div",{ref:DT([e,T]),...o,"cmdk-root":"",onKeyDown:E=>{var T;if(null==(T=o.onKeyDown)||T.call(o,E),!E.defaultPrevented)switch(E.key){case"n":case"j":E.ctrlKey&&Y(E);break;case"ArrowDown":Y(E);break;case"p":case"k":E.ctrlKey&&m(E);break;case"ArrowUp":m(E);break;case"Home":E.preventDefault(),B(0);break;case"End":E.preventDefault(),F();break;case"Enter":{E.preventDefault();let T=f();if(T){let E=new Event(jE);T.dispatchEvent(E)}}}}},A.createElement("label",{"cmdk-label":"",htmlFor:M.inputId,id:M.labelId,style:uT},r),A.createElement(eT.Provider,{value:l},A.createElement(ET.Provider,{value:M},n))))})),tT=A.forwardRef(((E,T)=>{let e=kE(),R=A.useRef(null),S=A.useContext(AT),t=TT(),O=iT(E);aT((()=>t.item(e,S)),[]);let I=MT(e,R,[E.value,E.children,R]),N=RT(),r=lT((E=>E.value&&E.value===I.current)),n=lT((T=>!(!E.forceMount&&!1!==t.filter())||(!T.search||T.filtered.items.get(e)>0)));function C(){var E,T;null==(T=(E=O.current).onSelect)||T.call(E,I.current)}if(A.useEffect((()=>{let T=R.current;if(T&&!E.disabled)return T.addEventListener(jE,C),()=>T.removeEventListener(jE,C)}),[n,E.onSelect,E.disabled]),!n)return null;let{disabled:L,value:s,onSelect:_,...o}=E;return A.createElement("div",{ref:DT([R,T]),...o,"cmdk-item":"",role:"option","aria-disabled":L||void 0,"aria-selected":r||void 0,"data-selected":r||void 0,onPointerMove:L?void 0:function(){N.setState("value",I.current,!0)},onClick:L?void 0:C},E.children)})),OT=A.forwardRef(((E,T)=>{let{heading:e,children:R,...S}=E,t=kE(),O=A.useRef(null),I=A.useRef(null),N=kE(),r=TT(),n=lT((T=>!(!E.forceMount&&!1!==r.filter())||(!T.search||T.filtered.groups.has(t))));aT((()=>r.group(t)),[]),MT(t,O,[E.value,E.heading,I]);let C=A.createElement(AT.Provider,{value:t},R);return A.createElement("div",{ref:DT([O,T]),...S,"cmdk-group":"",role:"presentation",hidden:!n||void 0},e&&A.createElement("div",{ref:I,"cmdk-group-heading":"","aria-hidden":!0,id:N},e),A.createElement("div",{"cmdk-group-items":"",role:"group","aria-labelledby":e?N:void 0},C))})),IT=A.forwardRef(((E,T)=>{let{alwaysRender:e,...R}=E,S=A.useRef(null),t=lT((E=>!E.search));return e||t?A.createElement("div",{ref:DT([S,T]),...R,"cmdk-separator":"",role:"separator"}):null})),NT=A.forwardRef(((E,T)=>{let{onValueChange:e,...R}=E,S=null!=E.value,t=RT(),O=lT((E=>E.search)),I=TT();return A.useEffect((()=>{null!=E.value&&t.setState("search",E.value)}),[E.value]),A.createElement("input",{ref:T,...R,"cmdk-input":"",autoComplete:"off",autoCorrect:"off",spellCheck:!1,"aria-autocomplete":"list",role:"combobox","aria-expanded":!0,"aria-controls":I.listId,"aria-labelledby":I.labelId,id:I.inputId,type:"text",value:S?E.value:O,onChange:E=>{S||t.setState("search",E.target.value),null==e||e(E.target.value)}})})),rT=A.forwardRef(((E,T)=>{let{children:e,...R}=E,S=A.useRef(null),t=A.useRef(null),O=TT();return A.useEffect((()=>{if(t.current&&S.current){let E,T=t.current,e=S.current,R=new ResizeObserver((()=>{E=requestAnimationFrame((()=>{let E=T.getBoundingClientRect().height;e.style.setProperty("--cmdk-list-height",E.toFixed(1)+"px")}))}));return R.observe(T),()=>{cancelAnimationFrame(E),R.unobserve(T)}}}),[]),A.createElement("div",{ref:DT([S,T]),...R,"cmdk-list":"",role:"listbox","aria-label":"Suggestions",id:O.listId,"aria-labelledby":O.inputId},A.createElement("div",{ref:t,"cmdk-list-sizer":""},e))})),nT=A.forwardRef(((E,T)=>{let{open:e,onOpenChange:R,container:S,...t}=E;return A.createElement(WE,{open:e,onOpenChange:R},A.createElement(yE,{container:S},A.createElement(gE,{"cmdk-overlay":""}),A.createElement(XE,{"aria-label":E.label,"cmdk-dialog":""},A.createElement(ST,{ref:T,...t}))))})),CT=A.forwardRef(((E,T)=>{let e=A.useRef(!0),R=lT((E=>0===E.filtered.count));return A.useEffect((()=>{e.current=!1}),[]),e.current||!R?null:A.createElement("div",{ref:T,...E,"cmdk-empty":"",role:"presentation"})})),LT=A.forwardRef(((E,T)=>{let{progress:e,children:R,...S}=E;return A.createElement("div",{ref:T,...S,"cmdk-loading":"",role:"progressbar","aria-valuenow":e,"aria-valuemin":0,"aria-valuemax":100,"aria-label":"Loading..."},A.createElement("div",{"aria-hidden":!0},R))})),sT=Object.assign(ST,{List:rT,Item:tT,Input:NT,Group:OT,Separator:IT,Dialog:nT,Empty:CT,Loading:LT});function _T(E,T){let e=E.nextElementSibling;for(;e;){if(e.matches(T))return e;e=e.nextElementSibling}}function oT(E,T){let e=E.previousElementSibling;for(;e;){if(e.matches(T))return e;e=e.previousElementSibling}}function iT(E){let T=A.useRef(E);return aT((()=>{T.current=E})),T}var aT=typeof window>"u"?A.useEffect:A.useLayoutEffect;function PT(E){let T=A.useRef();return void 0===T.current&&(T.current=E()),T}function DT(E){return T=>{E.forEach((E=>{"function"==typeof E?E(T):null!=E&&(E.current=T)}))}}function lT(E){let T=RT(),e=()=>E(T.snapshot());return(0,vE.useSyncExternalStore)(T.subscribe,e,e)}function MT(E,T,e){let R=A.useRef(),S=TT();return aT((()=>{var A;let t=(()=>{var E;for(let T of e){if("string"==typeof T)return T.trim().toLowerCase();if("object"==typeof T&&"current"in T&&T.current)return null==(E=T.current.textContent)?void 0:E.trim().toLowerCase()}})();S.value(E,t),null==(A=T.current)||A.setAttribute(qE,t),R.current=t})),R}var UT=()=>{let[E,T]=A.useState(),e=PT((()=>new Map));return aT((()=>{e.current.forEach((E=>E())),e.current=new Map}),[E]),(E,R)=>{e.current.set(E,R),T({})}},uT={position:"absolute",width:"1px",height:"1px",padding:"0",margin:"-1px",overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",borderWidth:"0"}},70419:function(E,T,e){"use strict";e.d(T,{Z:function(){return KE}});var R=e(87842),A=e(51748);const S={tokenize:function(E,T,e){return function(T){return E.consume(T),R};function R(T){return 87===T||119===T?(E.consume(T),S):e(T)}function S(T){return 87===T||119===T?(E.consume(T),t):e(T)}function t(T){return 46===T?(E.consume(T),O):e(T)}function O(E){return null===E||(0,A.Ch)(E)?e(E):T(E)}},partial:!0},t={tokenize:function(E,T,e){let R,S;return t;function t(T){return 38===T?E.check(N,r,O)(T):46===T||95===T?E.check(I,r,O)(T):null===T||(0,A.Av)(T)||(0,A.B8)(T)||45!==T&&(0,A.Xh)(T)?r(T):(E.consume(T),t)}function O(T){return 46===T?(S=R,R=void 0,E.consume(T),t):(95===T&&(R=!0),E.consume(T),t)}function r(E){return S||R?e(E):T(E)}},partial:!0},O={tokenize:function(E,T){let e=0;return R;function R(t){return 38===t?E.check(N,T,A)(t):(40===t&&e++,41===t?E.check(I,S,A)(t):i(t)?T(t):o(t)?E.check(I,T,A)(t):(E.consume(t),R))}function A(T){return E.consume(T),R}function S(E){return e--,e<0?T(E):A(E)}},partial:!0},I={tokenize:function(E,T,e){return function(T){return E.consume(T),R};function R(A){return o(A)?(E.consume(A),R):i(A)?T(A):e(A)}},partial:!0},N={tokenize:function(E,T,e){return function(T){return E.consume(T),R};function R(T){return(0,A.jv)(T)?(E.consume(T),R):59===T?(E.consume(T),S):e(T)}function S(E){return i(E)?T(E):e(E)}},partial:!0},r={tokenize:function(E,T,e){const R=this;return function(T){if(87!==T&&119!==T||!P(R.previous)||M(R.events))return e(T);return E.enter("literalAutolink"),E.enter("literalAutolinkWww"),E.check(S,E.attempt(t,E.attempt(O,A),e),e)(T)};function A(e){return E.exit("literalAutolinkWww"),E.exit("literalAutolink"),T(e)}},previous:P},n={tokenize:function(E,T,e){const R=this;return function(T){if(72!==T&&104!==T||!D(R.previous)||M(R.events))return e(T);return E.enter("literalAutolink"),E.enter("literalAutolinkHttp"),E.consume(T),S};function S(T){return 84===T||116===T?(E.consume(T),I):e(T)}function I(T){return 84===T||116===T?(E.consume(T),N):e(T)}function N(T){return 80===T||112===T?(E.consume(T),r):e(T)}function r(T){return 83===T||115===T?(E.consume(T),n):n(T)}function n(T){return 58===T?(E.consume(T),C):e(T)}function C(T){return 47===T?(E.consume(T),L):e(T)}function L(T){return 47===T?(E.consume(T),s):e(T)}function s(T){return null===T||(0,A.Av)(T)||(0,A.B8)(T)||(0,A.Xh)(T)?e(T):E.attempt(t,E.attempt(O,_),e)(T)}function _(e){return E.exit("literalAutolinkHttp"),E.exit("literalAutolink"),T(e)}},previous:D},C={tokenize:function(E,T,e){const R=this;let S,t;return function(T){if(!a(T)||!l(R.previous)||M(R.events))return e(T);return E.enter("literalAutolink"),E.enter("literalAutolinkEmail"),O(T)};function O(T){return a(T)?(E.consume(T),O):64===T?(E.consume(T),N):e(T)}function N(T){return 46===T?E.check(I,L,r)(T):45===T||95===T?E.check(I,e,n)(T):(0,A.H$)(T)?(!t&&(0,A.pY)(T)&&(t=!0),E.consume(T),N):L(T)}function r(T){return E.consume(T),S=!0,t=void 0,N}function n(T){return E.consume(T),C}function C(T){return 46===T?E.check(I,e,r)(T):N(T)}function L(R){return S&&!t?(E.exit("literalAutolinkEmail"),E.exit("literalAutolink"),T(R)):e(R)}},previous:l},L={},s={text:L};let _=48;for(;_<123;)L[_]=C,_++,58===_?_=65:91===_&&(_=97);function o(E){return 33===E||34===E||39===E||41===E||42===E||44===E||46===E||58===E||59===E||60===E||63===E||95===E||126===E}function i(E){return null===E||60===E||(0,A.z3)(E)}function a(E){return 43===E||45===E||46===E||95===E||(0,A.H$)(E)}function P(E){return null===E||40===E||42===E||95===E||126===E||(0,A.z3)(E)}function D(E){return null===E||!(0,A.jv)(E)}function l(E){return 47!==E&&D(E)}function M(E){let T=E.length,e=!1;for(;T--;){const R=E[T][1];if(("labelLink"===R.type||"labelImage"===R.type)&&!R._balanced){e=!0;break}if(R._gfmAutolinkLiteralWalkedInto){e=!1;break}}return E.length>0&&!e&&(E[E.length-1][1]._gfmAutolinkLiteralWalkedInto=!0),e}L[43]=C,L[45]=C,L[46]=C,L[95]=C,L[72]=[C,n],L[104]=[C,n],L[87]=[C,r],L[119]=[C,r];var U=e(8466),u=e(72473),c=e(36910);const G={tokenize:function(E,T,e){const R=this;return(0,u.f)(E,(function(E){const A=R.events[R.events.length-1];return A&&"gfmFootnoteDefinitionIndent"===A[1].type&&4===A[2].sliceSerialize(A[1],!0).length?T(E):e(E)}),"gfmFootnoteDefinitionIndent",5)},partial:!0};function p(E,T,e){const R=this;let A=R.events.length;const S=R.parser.gfmFootnotes||(R.parser.gfmFootnotes=[]);let t;for(;A--;){const E=R.events[A][1];if("labelImage"===E.type){t=E;break}if("gfmFootnoteCall"===E.type||"labelLink"===E.type||"label"===E.type||"image"===E.type||"link"===E.type)break}return function(A){if(!t||!t._balanced)return e(A);const O=(0,c.d)(R.sliceSerialize({start:t.end,end:R.now()}));if(94!==O.charCodeAt(0)||!S.includes(O.slice(1)))return e(A);return E.enter("gfmFootnoteCallLabelMarker"),E.consume(A),E.exit("gfmFootnoteCallLabelMarker"),T(A)}}function f(E,T){let e,R=E.length;for(;R--;)if("labelImage"===E[R][1].type&&"enter"===E[R][0]){e=E[R][1];break}E[R+1][1].type="data",E[R+3][1].type="gfmFootnoteCallLabelMarker";const A={type:"gfmFootnoteCall",start:Object.assign({},E[R+3][1].start),end:Object.assign({},E[E.length-1][1].end)},S={type:"gfmFootnoteCallMarker",start:Object.assign({},E[R+3][1].end),end:Object.assign({},E[R+3][1].end)};S.end.column++,S.end.offset++,S.end._bufferIndex++;const t={type:"gfmFootnoteCallString",start:Object.assign({},S.end),end:Object.assign({},E[E.length-1][1].start)},O={type:"chunkString",contentType:"string",start:Object.assign({},t.start),end:Object.assign({},t.end)},I=[E[R+1],E[R+2],["enter",A,T],E[R+3],E[R+4],["enter",S,T],["exit",S,T],["enter",t,T],["enter",O,T],["exit",O,T],["exit",t,T],E[E.length-2],E[E.length-1],["exit",A,T]];return E.splice(R,E.length-R+1,...I),E}function H(E,T,e){const R=this,S=R.parser.gfmFootnotes||(R.parser.gfmFootnotes=[]);let t,O=0;return function(T){return E.enter("gfmFootnoteCall"),E.enter("gfmFootnoteCallLabelMarker"),E.consume(T),E.exit("gfmFootnoteCallLabelMarker"),I};function I(T){return 94!==T?e(T):(E.enter("gfmFootnoteCallMarker"),E.consume(T),E.exit("gfmFootnoteCallMarker"),E.enter("gfmFootnoteCallString"),E.enter("chunkString").contentType="string",N)}function N(I){let n;return null===I||91===I||O++>999?e(I):93===I?t?(E.exit("chunkString"),n=E.exit("gfmFootnoteCallString"),S.includes((0,c.d)(R.sliceSerialize(n)))?function(e){return E.enter("gfmFootnoteCallLabelMarker"),E.consume(e),E.exit("gfmFootnoteCallLabelMarker"),E.exit("gfmFootnoteCall"),T}(I):e(I)):e(I):(E.consume(I),(0,A.z3)(I)||(t=!0),92===I?r:N)}function r(T){return 91===T||92===T||93===T?(E.consume(T),O++,N):N(T)}}function B(E,T,e){const R=this,S=R.parser.gfmFootnotes||(R.parser.gfmFootnotes=[]);let t,O,I=0;return function(T){return E.enter("gfmFootnoteDefinition")._container=!0,E.enter("gfmFootnoteDefinitionLabel"),E.enter("gfmFootnoteDefinitionLabelMarker"),E.consume(T),E.exit("gfmFootnoteDefinitionLabelMarker"),N};function N(T){return 94===T?(E.enter("gfmFootnoteDefinitionMarker"),E.consume(T),E.exit("gfmFootnoteDefinitionMarker"),E.enter("gfmFootnoteDefinitionLabelString"),r):e(T)}function r(T){let S;return null===T||91===T||I>999?e(T):93===T?O?(S=E.exit("gfmFootnoteDefinitionLabelString"),t=(0,c.d)(R.sliceSerialize(S)),E.enter("gfmFootnoteDefinitionLabelMarker"),E.consume(T),E.exit("gfmFootnoteDefinitionLabelMarker"),E.exit("gfmFootnoteDefinitionLabel"),L):e(T):(0,A.Ch)(T)?(E.enter("lineEnding"),E.consume(T),E.exit("lineEnding"),I++,r):(E.enter("chunkString").contentType="string",n(T))}function n(T){return null===T||(0,A.Ch)(T)||91===T||93===T||I>999?(E.exit("chunkString"),r(T)):((0,A.z3)(T)||(O=!0),I++,E.consume(T),92===T?C:n)}function C(T){return 91===T||92===T||93===T?(E.consume(T),I++,n):n(T)}function L(T){return 58===T?(E.enter("definitionMarker"),E.consume(T),E.exit("definitionMarker"),(0,u.f)(E,s,"gfmFootnoteDefinitionWhitespace")):e(T)}function s(E){return S.includes(t)||S.push(t),T(E)}}function d(E,T,e){return E.check(U.w,T,E.attempt(G,T,e))}function h(E){E.exit("gfmFootnoteDefinition")}var F=e(98391),Y=e(20898),m=e(27828);function V(E){let T=(E||{}).singleTilde;const e={tokenize:function(E,e,R){const A=this.previous,S=this.events;let t=0;return function(T){if(126===A&&"characterEscape"!==S[S.length-1][1].type)return R(T);return E.enter("strikethroughSequenceTemporary"),O(T)};function O(S){const I=(0,Y.r)(A);if(126===S)return t>1?R(S):(E.consume(S),t++,O);if(t<2&&!T)return R(S);const N=E.exit("strikethroughSequenceTemporary"),r=(0,Y.r)(S);return N._open=!r||2===r&&Boolean(I),N._close=!I||2===I&&Boolean(r),e(S)}},resolveAll:function(E,T){let e=-1;for(;++e<E.length;)if("enter"===E[e][0]&&"strikethroughSequenceTemporary"===E[e][1].type&&E[e][1]._close){let R=e;for(;R--;)if("exit"===E[R][0]&&"strikethroughSequenceTemporary"===E[R][1].type&&E[R][1]._open&&E[e][1].end.offset-E[e][1].start.offset===E[R][1].end.offset-E[R][1].start.offset){E[e][1].type="strikethroughSequence",E[R][1].type="strikethroughSequence";const A={type:"strikethrough",start:Object.assign({},E[R][1].start),end:Object.assign({},E[e][1].end)},S={type:"strikethroughText",start:Object.assign({},E[R][1].end),end:Object.assign({},E[e][1].start)},t=[["enter",A,T],["enter",E[R][1],T],["exit",E[R][1],T],["enter",S,T]],O=T.parser.constructs.insideSpan.null;O&&(0,F.d)(t,t.length,0,(0,m.C)(O,E.slice(R+1,e),T)),(0,F.d)(t,t.length,0,[["exit",S,T],["enter",E[e][1],T],["exit",E[e][1],T],["exit",A,T]]),(0,F.d)(E,R-1,e-R+3,t),e=R+t.length-2;break}}e=-1;for(;++e<E.length;)"strikethroughSequenceTemporary"===E[e][1].type&&(E[e][1].type="data");return E}};return null!==T&&void 0!==T||(T=!0),{text:{126:e},insideSpan:{null:[e]},attentionMarkers:{null:[126]}}}const W={flow:{null:{tokenize:function(E,T,e){const R=this,S=[];let t,O,I=0;return function(T){if(E.enter("table")._align=S,E.enter("tableHead"),E.enter("tableRow"),124===T)return N(T);return I++,E.enter("temporaryTableCellContent"),C(T)};function N(T){return E.enter("tableCellDivider"),E.consume(T),E.exit("tableCellDivider"),t=!0,r}function r(T){return null===T||(0,A.Ch)(T)?function(T){if(null===T)return e(T);E.exit("tableRow"),E.exit("tableHead");const A=R.interrupt;return R.interrupt=!0,E.attempt({tokenize:B,partial:!0},(function(T){return R.interrupt=A,E.enter("tableDelimiterRow"),s(T)}),(function(E){return R.interrupt=A,e(E)}))(T)}(T):(0,A.xz)(T)?(E.enter("whitespace"),E.consume(T),n):(t&&(t=void 0,I++),124===T?N(T):(E.enter("temporaryTableCellContent"),C(T)))}function n(T){return(0,A.xz)(T)?(E.consume(T),n):(E.exit("whitespace"),r(T))}function C(T){return null===T||124===T||(0,A.z3)(T)?(E.exit("temporaryTableCellContent"),r(T)):(E.consume(T),92===T?L:C)}function L(T){return 92===T||124===T?(E.consume(T),C):C(T)}function s(T){return null===T||(0,A.Ch)(T)?P(T):(0,A.xz)(T)?(E.enter("whitespace"),E.consume(T),_):45===T?(E.enter("tableDelimiterFiller"),E.consume(T),O=!0,S.push("none"),o):58===T?(E.enter("tableDelimiterAlignment"),E.consume(T),E.exit("tableDelimiterAlignment"),S.push("left"),i):124===T?(E.enter("tableCellDivider"),E.consume(T),E.exit("tableCellDivider"),s):e(T)}function _(T){return(0,A.xz)(T)?(E.consume(T),_):(E.exit("whitespace"),s(T))}function o(T){return 45===T?(E.consume(T),o):(E.exit("tableDelimiterFiller"),58===T?(E.enter("tableDelimiterAlignment"),E.consume(T),E.exit("tableDelimiterAlignment"),S[S.length-1]="left"===S[S.length-1]?"center":"right",a):s(T))}function i(T){return 45===T?(E.enter("tableDelimiterFiller"),E.consume(T),O=!0,o):e(T)}function a(T){return null===T||(0,A.Ch)(T)?P(T):(0,A.xz)(T)?(E.enter("whitespace"),E.consume(T),_):124===T?(E.enter("tableCellDivider"),E.consume(T),E.exit("tableCellDivider"),s):e(T)}function P(T){return E.exit("tableDelimiterRow"),O&&I===S.length?null===T?D(T):E.check(y,D,E.attempt({tokenize:B,partial:!0},(0,u.f)(E,l,"linePrefix",4),D))(T):e(T)}function D(e){return E.exit("table"),T(e)}function l(T){return E.enter("tableBody"),M(T)}function M(T){return E.enter("tableRow"),124===T?U(T):(E.enter("temporaryTableCellContent"),p(T))}function U(T){return E.enter("tableCellDivider"),E.consume(T),E.exit("tableCellDivider"),c}function c(T){return null===T||(0,A.Ch)(T)?function(T){if(E.exit("tableRow"),null===T)return H(T);return E.check(y,H,E.attempt({tokenize:B,partial:!0},(0,u.f)(E,M,"linePrefix",4),H))(T)}(T):(0,A.xz)(T)?(E.enter("whitespace"),E.consume(T),G):124===T?U(T):(E.enter("temporaryTableCellContent"),p(T))}function G(T){return(0,A.xz)(T)?(E.consume(T),G):(E.exit("whitespace"),c(T))}function p(T){return null===T||124===T||(0,A.z3)(T)?(E.exit("temporaryTableCellContent"),c(T)):(E.consume(T),92===T?f:p)}function f(T){return 92===T||124===T?(E.consume(T),p):p(T)}function H(T){return E.exit("tableBody"),D(T)}function B(E,T,e){return function(T){return E.enter("lineEnding"),E.consume(T),E.exit("lineEnding"),(0,u.f)(E,S,"linePrefix")};function S(S){if(R.parser.lazy[R.now().line]||null===S||(0,A.Ch)(S))return e(S);const t=R.events[R.events.length-1];return!R.parser.constructs.disable.null.includes("codeIndented")&&t&&"linePrefix"===t[1].type&&t[2].sliceSerialize(t[1],!0).length>=4?e(S):(R._gfmTableDynamicInterruptHack=!0,E.check(R.parser.constructs.flow,(function(E){return R._gfmTableDynamicInterruptHack=!1,e(E)}),(function(E){return R._gfmTableDynamicInterruptHack=!1,T(E)}))(S))}}},resolve:function(E,T){let e,R,A,S,t,O,I,N=-1;for(;++N<E.length;){const r=E[N][1];if(A&&("temporaryTableCellContent"===r.type&&(S=S||N,t=N),("tableCellDivider"===r.type||"tableRow"===r.type)&&t)){const e={type:"tableContent",start:E[S][1].start,end:E[t][1].end},R={type:"chunkText",start:e.start,end:e.end,contentType:"text"};E.splice(S,t-S+1,["enter",e,T],["enter",R,T],["exit",R,T],["exit",e,T]),N-=t-S-3,S=void 0,t=void 0}if("exit"===E[N][0]&&void 0!==O&&O+(I?0:1)<N&&("tableCellDivider"===r.type||"tableRow"===r.type&&(O+3<N||"whitespace"!==E[O][1].type))){const A={type:R?"tableDelimiter":e?"tableHeader":"tableData",start:E[O][1].start,end:E[N][1].end};E.splice(N+("tableCellDivider"===r.type?1:0),0,["exit",A,T]),E.splice(O,0,["enter",A,T]),N+=2,O=N+1,I=!0}"tableRow"===r.type&&(A="enter"===E[N][0],A&&(O=N+1,I=!1)),"tableDelimiterRow"===r.type&&(R="enter"===E[N][0],R&&(O=N+1,I=!1)),"tableHead"===r.type&&(e="enter"===E[N][0])}return E}}}},y={tokenize:function(E,T,e){let R=0;return function(T){return E.enter("check"),E.consume(T),S};function S(t){return-1===t||32===t?(E.consume(t),R++,4===R?T:S):null===t||(0,A.z3)(t)?T(t):e(t)}},partial:!0};const g={tokenize:function(E,T,e){const R=this;return function(T){if(null!==R.previous||!R._gfmTasklistFirstContentOfListItem)return e(T);return E.enter("taskListCheck"),E.enter("taskListCheckMarker"),E.consume(T),E.exit("taskListCheckMarker"),S};function S(T){return(0,A.z3)(T)?(E.enter("taskListCheckValueUnchecked"),E.consume(T),E.exit("taskListCheckValueUnchecked"),t):88===T||120===T?(E.enter("taskListCheckValueChecked"),E.consume(T),E.exit("taskListCheckValueChecked"),t):e(T)}function t(T){return 93===T?(E.enter("taskListCheckMarker"),E.consume(T),E.exit("taskListCheckMarker"),E.exit("taskListCheck"),O):e(T)}function O(R){return(0,A.Ch)(R)?T(R):(0,A.xz)(R)?E.check({tokenize:b},T,e)(R):e(R)}}},X={text:{91:g}};function b(E,T,e){return(0,u.f)(E,(function(E){return null===E?e(E):T(E)}),"whitespace")}function v(E,T){const e=String(E);if("string"!==typeof T)throw new TypeError("Expected character");let R=0,A=e.indexOf(T);for(;-1!==A;)R++,A=e.indexOf(T,A+T.length);return R}var K=e(84020);const x=function(E){if(void 0===E||null===E)return k;if("string"===typeof E)return function(E){return w(T);function T(T){return T&&T.type===E}}(E);if("object"===typeof E)return Array.isArray(E)?function(E){const T=[];let e=-1;for(;++e<E.length;)T[e]=x(E[e]);return w(R);function R(...E){let e=-1;for(;++e<T.length;)if(T[e].call(this,...E))return!0;return!1}}(E):function(E){return w(T);function T(T){let e;for(e in E)if(T[e]!==E[e])return!1;return!0}}(E);if("function"===typeof E)return w(E);throw new Error("Expected function, string, or object as test")};function w(E){return function(T,...e){return Boolean(T&&"object"===typeof T&&"type"in T&&Boolean(E.call(this,T,...e)))}}function k(){return!0}const $={}.hasOwnProperty,J=function(E,T,e,R){let A,S;"string"===typeof T||T instanceof RegExp?(S=[[T,e]],A=R):(S=T,A=e),A||(A={});const t=x(A.ignore||[]),O=function(E){const T=[];if("object"!==typeof E)throw new TypeError("Expected array or object as schema");if(Array.isArray(E)){let e=-1;for(;++e<E.length;)T.push([Z(E[e][0]),Q(E[e][1])])}else{let e;for(e in E)$.call(E,e)&&T.push([Z(e),Q(E[e])])}return T}(S);let I=-1;for(;++I<O.length;)(0,K.S4)(E,"text",N);return E;function N(E,T){let e,R=-1;for(;++R<T.length;){const E=T[R];if(t(E,e?e.children.indexOf(E):void 0,e))return;e=E}if(e)return function(E,T){const e=T[T.length-1],R=O[I][0],A=O[I][1];let S=0;const t=e.children.indexOf(E);let N=!1,r=[];R.lastIndex=0;let n=R.exec(E.value);for(;n;){const e=n.index,t={index:n.index,input:n.input,stack:[...T,E]};let O=A(...n,t);if("string"===typeof O&&(O=O.length>0?{type:"text",value:O}:void 0),!1!==O&&(S!==e&&r.push({type:"text",value:E.value.slice(S,e)}),Array.isArray(O)?r.push(...O):O&&r.push(O),S=e+n[0].length,N=!0),!R.global)break;n=R.exec(E.value)}N?(S<E.value.length&&r.push({type:"text",value:E.value.slice(S)}),e.children.splice(t,1,...r)):r=[E];return t+r.length}(E,T)}};function Z(E){return"string"===typeof E?new RegExp(function(E){if("string"!==typeof E)throw new TypeError("Expected a string");return E.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(E),"g"):E}function Q(E){return"function"===typeof E?E:()=>E}const j="phrasing",q=["autolink","link","image","label"],z={transforms:[function(E){J(E,[[/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi,eE],[/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g,RE]],{ignore:["link","linkReference"]})}],enter:{literalAutolink:function(E){this.enter({type:"link",title:null,url:"",children:[]},E)},literalAutolinkEmail:TE,literalAutolinkHttp:TE,literalAutolinkWww:TE},exit:{literalAutolink:function(E){this.exit(E)},literalAutolinkEmail:function(E){this.config.exit.autolinkEmail.call(this,E)},literalAutolinkHttp:function(E){this.config.exit.autolinkProtocol.call(this,E)},literalAutolinkWww:function(E){this.config.exit.data.call(this,E);this.stack[this.stack.length-1].url="http://"+this.sliceSerialize(E)}}},EE={unsafe:[{character:"@",before:"[+\\-.\\w]",after:"[\\-.\\w]",inConstruct:j,notInConstruct:q},{character:".",before:"[Ww]",after:"[\\-.\\w]",inConstruct:j,notInConstruct:q},{character:":",before:"[ps]",after:"\\/",inConstruct:j,notInConstruct:q}]};function TE(E){this.config.enter.autolinkProtocol.call(this,E)}function eE(E,T,e,R,A){let S="";if(!AE(A))return!1;if(/^w/i.test(T)&&(e=T+e,T="",S="http://"),!function(E){const T=E.split(".");if(T.length<2||T[T.length-1]&&(/_/.test(T[T.length-1])||!/[a-zA-Z\d]/.test(T[T.length-1]))||T[T.length-2]&&(/_/.test(T[T.length-2])||!/[a-zA-Z\d]/.test(T[T.length-2])))return!1;return!0}(e))return!1;const t=function(E){const T=/[!"&'),.:;<>?\]}]+$/.exec(E);if(!T)return[E,void 0];E=E.slice(0,T.index);let e=T[0],R=e.indexOf(")");const A=v(E,"(");let S=v(E,")");for(;-1!==R&&A>S;)E+=e.slice(0,R+1),e=e.slice(R+1),R=e.indexOf(")"),S++;return[E,e]}(e+R);if(!t[0])return!1;const O={type:"link",title:null,url:S+T+t[0],children:[{type:"text",value:T+t[0]}]};return t[1]?[O,{type:"text",value:t[1]}]:O}function RE(E,T,e,R){return!(!AE(R,!0)||/[-\d_]$/.test(e))&&{type:"link",title:null,url:"mailto:"+T+"@"+e,children:[{type:"text",value:T+"@"+e}]}}function AE(E,T){const e=E.input.charCodeAt(E.index-1);return(0===E.index||(0,A.B8)(e)||(0,A.Xh)(e))&&(!T||47!==e)}var SE=e(12857);function tE(E){return E.label||!E.identifier?E.label||"":(0,SE.v)(E.identifier)}function OE(E,T,e,R){let A=R.join.length;for(;A--;){const S=R.join[A](E,T,e,R);if(!0===S||1===S)break;if("number"===typeof S)return"\n".repeat(1+S);if(!1===S)return"\n\n\x3c!----\x3e\n\n"}return"\n\n"}const IE=/\r?\n|\r/g;function NE(E){if(!E._compiled){const T=(E.atBreak?"[\\r\\n][\\t ]*":"")+(E.before?"(?:"+E.before+")":"");E._compiled=new RegExp((T?"("+T+")":"")+(/[|\\{}()[\]^$+*?.-]/.test(E.character)?"\\":"")+E.character+(E.after?"(?:"+E.after+")":""),"g")}return E._compiled}function rE(E,T){return nE(E,T.inConstruct,!0)&&!nE(E,T.notInConstruct,!1)}function nE(E,T,e){if("string"===typeof T&&(T=[T]),!T||0===T.length)return e;let R=-1;for(;++R<T.length;)if(E.includes(T[R]))return!0;return!1}function CE(E,T,e){const R=(e.before||"")+(T||"")+(e.after||""),A=[],S=[],t={};let O=-1;for(;++O<E.unsafe.length;){const T=E.unsafe[O];if(!rE(E.stack,T))continue;const e=NE(T);let S;for(;S=e.exec(R);){const E="before"in T||Boolean(T.atBreak),e="after"in T,R=S.index+(E?S[1].length:0);A.includes(R)?(t[R].before&&!E&&(t[R].before=!1),t[R].after&&!e&&(t[R].after=!1)):(A.push(R),t[R]={before:E,after:e})}}A.sort(LE);let I=e.before?e.before.length:0;const N=R.length-(e.after?e.after.length:0);for(O=-1;++O<A.length;){const E=A[O];E<I||E>=N||(E+1<N&&A[O+1]===E+1&&t[E].after&&!t[E+1].before&&!t[E+1].after||A[O-1]===E-1&&t[E].before&&!t[E-1].before&&!t[E-1].after||(I!==E&&S.push(sE(R.slice(I,E),"\\")),I=E,!/[!-/:-@[-`{-~]/.test(R.charAt(E))||e.encode&&e.encode.includes(R.charAt(E))?(S.push("&#x"+R.charCodeAt(E).toString(16).toUpperCase()+";"),I++):S.push("\\")))}return S.push(sE(R.slice(I,N),e.after)),S.join("")}function LE(E,T){return E-T}function sE(E,T){const e=/\\(?=[!-/:-@[-`{-~])/g,R=[],A=[],S=E+T;let t,O=-1,I=0;for(;t=e.exec(S);)R.push(t.index);for(;++O<R.length;)I!==R[O]&&A.push(E.slice(I,R[O])),A.push("\\"),I=R[O];return A.push(E.slice(I)),A.join("")}function _E(E){const T=E||{},e=T.now||{};let R=T.lineShift||0,A=e.line||1,S=e.column||1;return{move:function(E){const T=E||"",e=T.split(/\r?\n|\r/g),t=e[e.length-1];return A+=e.length-1,S=1===e.length?S+t.length:1+t.length+R,T},current:function(){return{now:{line:A,column:S},lineShift:R}},shift:function(E){R+=E}}}function oE(E){this.enter({type:"footnoteDefinition",identifier:"",label:"",children:[]},E)}function iE(){this.buffer()}function aE(E){const T=this.resume(),e=this.stack[this.stack.length-1];e.label=T,e.identifier=(0,c.d)(this.sliceSerialize(E)).toLowerCase()}function PE(E){this.exit(E)}function DE(E){this.enter({type:"footnoteReference",identifier:"",label:""},E)}function lE(){this.buffer()}function ME(E){const T=this.resume(),e=this.stack[this.stack.length-1];e.label=T,e.identifier=(0,c.d)(this.sliceSerialize(E)).toLowerCase()}function UE(E){this.exit(E)}function uE(E,T,e,R){const A=_E(R);let S=A.move("[^");const t=e.enter("footnoteReference"),O=e.enter("reference");return S+=A.move(CE(e,tE(E),{...A.current(),before:S,after:"]"})),O(),t(),S+=A.move("]"),S}function cE(E,T,e,R){const A=_E(R);let S=A.move("[^");const t=e.enter("footnoteDefinition"),O=e.enter("label");return S+=A.move(CE(e,tE(E),{...A.current(),before:S,after:"]"})),O(),S+=A.move("]:"+(E.children&&E.children.length>0?" ":"")),A.shift(4),S+=A.move(function(E,T){const e=[];let R,A=0,S=0;for(;R=IE.exec(E);)t(E.slice(A,R.index)),e.push(R[0]),A=R.index+R[0].length,S++;return t(E.slice(A)),e.join("");function t(E){e.push(T(E,S,!E))}}(function(E,T,e){const R=T.indexStack,A=E.children||[],S=T.createTracker(e),t=[];let O=-1;for(R.push(-1);++O<A.length;){const e=A[O];R[R.length-1]=O,t.push(S.move(T.handle(e,E,T,{before:"\n",after:"\n",...S.current()}))),"list"!==e.type&&(T.bulletLastUsed=void 0),O<A.length-1&&t.push(S.move(OE(e,A[O+1],E,T)))}return R.pop(),t.join("")}(E,e,A.current()),GE)),t(),S}function GE(E,T,e){return 0===T?E:(e?"":"    ")+E}function pE(E,T,e){const R=T.indexStack,A=E.children||[],S=[];let t=-1,O=e.before;R.push(-1);let I=T.createTracker(e);for(;++t<A.length;){const N=A[t];let r;if(R[R.length-1]=t,t+1<A.length){let e=T.handle.handlers[A[t+1].type];e&&e.peek&&(e=e.peek),r=e?e(A[t+1],E,T,{before:"",after:"",...I.current()}).charAt(0):""}else r=e.after;S.length>0&&("\r"===O||"\n"===O)&&"html"===N.type&&(S[S.length-1]=S[S.length-1].replace(/(\r?\n|\r)$/," "),O=" ",I=T.createTracker(e),I.move(S.join(""))),S.push(I.move(T.handle(N,E,T,{...I.current(),before:O,after:r}))),O=S[S.length-1].slice(-1)}return R.pop(),S.join("")}uE.peek=function(){return"["};BE.peek=function(){return"~"};const fE={canContainEols:["delete"],enter:{strikethrough:function(E){this.enter({type:"delete",children:[]},E)}},exit:{strikethrough:function(E){this.exit(E)}}},HE={unsafe:[{character:"~",inConstruct:"phrasing",notInConstruct:["autolink","destinationLiteral","destinationRaw","reference","titleQuote","titleApostrophe"]}],handlers:{delete:BE}};function BE(E,T,e,R){const A=_E(R),S=e.enter("strikethrough");let t=A.move("~~");return t+=pE(E,e,{...A.current(),before:t,after:"~"}),t+=A.move("~~"),S(),t}function dE(E,T,e){let R=E.value||"",A="`",S=-1;for(;new RegExp("(^|[^`])"+A+"([^`]|$)").test(R);)A+="`";for(/[^ \r\n]/.test(R)&&(/^[ \r\n]/.test(R)&&/[ \r\n]$/.test(R)||/^`|`$/.test(R))&&(R=" "+R+" ");++S<e.unsafe.length;){const E=e.unsafe[S],T=NE(E);let A;if(E.atBreak)for(;A=T.exec(R);){let E=A.index;10===R.charCodeAt(E)&&13===R.charCodeAt(E-1)&&E--,R=R.slice(0,E)+" "+R.slice(A.index+1)}}return A+R+A}function hE(E){return E.length}function FE(E){const T="string"===typeof E?E.codePointAt(0):0;return 67===T||99===T?99:76===T||108===T?108:82===T||114===T?114:0}dE.peek=function(){return"`"};const YE={enter:{table:function(E){const T=E._align;this.enter({type:"table",align:T.map((E=>"none"===E?null:E)),children:[]},E),this.setData("inTable",!0)},tableData:VE,tableHeader:VE,tableRow:function(E){this.enter({type:"tableRow",children:[]},E)}},exit:{codeText:function(E){let T=this.resume();this.getData("inTable")&&(T=T.replace(/\\([\\|])/g,WE));this.stack[this.stack.length-1].value=T,this.exit(E)},table:function(E){this.exit(E),this.setData("inTable")},tableData:mE,tableHeader:mE,tableRow:mE}};function mE(E){this.exit(E)}function VE(E){this.enter({type:"tableCell",children:[]},E)}function WE(E,T){return"|"===T?T:E}function yE(E){const T=E||{},e=T.tableCellPadding,R=T.tablePipeAlign,A=T.stringLength,S=e?" ":"|";return{unsafe:[{character:"\r",inConstruct:"tableCell"},{character:"\n",inConstruct:"tableCell"},{atBreak:!0,character:"|",after:"[\t :-]"},{character:"|",inConstruct:"tableCell"},{atBreak:!0,character:":",after:"-"},{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{table:function(E,T,e,R){return O(function(E,T,e){const R=E.children;let A=-1;const S=[],t=T.enter("table");for(;++A<R.length;)S[A]=I(R[A],T,e);return t(),S}(E,e,R),E.align)},tableRow:function(E,T,e,R){const A=O([I(E,e,R)]);return A.slice(0,A.indexOf("\n"))},tableCell:t,inlineCode:function(E,T,e){let R=dE(E,0,e);e.stack.includes("tableCell")&&(R=R.replace(/\|/g,"\\$&"));return R}}};function t(E,T,e,R){const A=e.enter("tableCell"),t=e.enter("phrasing"),O=pE(E,e,{...R,before:S,after:S});return t(),A(),O}function O(E,T){return function(E,T={}){const e=(T.align||[]).concat(),R=T.stringLength||hE,A=[],S=[],t=[],O=[];let I=0,N=-1;for(;++N<E.length;){const e=[],A=[];let n=-1;for(E[N].length>I&&(I=E[N].length);++n<E[N].length;){const S=null===(r=E[N][n])||void 0===r?"":String(r);if(!1!==T.alignDelimiters){const E=R(S);A[n]=E,(void 0===O[n]||E>O[n])&&(O[n]=E)}e.push(S)}S[N]=e,t[N]=A}var r;let n=-1;if("object"===typeof e&&"length"in e)for(;++n<I;)A[n]=FE(e[n]);else{const E=FE(e);for(;++n<I;)A[n]=E}n=-1;const C=[],L=[];for(;++n<I;){const E=A[n];let e="",R="";99===E?(e=":",R=":"):108===E?e=":":114===E&&(R=":");let S=!1===T.alignDelimiters?1:Math.max(1,O[n]-e.length-R.length);const t=e+"-".repeat(S)+R;!1!==T.alignDelimiters&&(S=e.length+S+R.length,S>O[n]&&(O[n]=S),L[n]=S),C[n]=t}S.splice(1,0,C),t.splice(1,0,L),N=-1;const s=[];for(;++N<S.length;){const E=S[N],e=t[N];n=-1;const R=[];for(;++n<I;){const S=E[n]||"";let t="",N="";if(!1!==T.alignDelimiters){const E=O[n]-(e[n]||0),T=A[n];114===T?t=" ".repeat(E):99===T?E%2?(t=" ".repeat(E/2+.5),N=" ".repeat(E/2-.5)):(t=" ".repeat(E/2),N=t):N=" ".repeat(E)}!1===T.delimiterStart||n||R.push("|"),!1===T.padding||!1===T.alignDelimiters&&""===S||!1===T.delimiterStart&&!n||R.push(" "),!1!==T.alignDelimiters&&R.push(t),R.push(S),!1!==T.alignDelimiters&&R.push(N),!1!==T.padding&&R.push(" "),!1===T.delimiterEnd&&n===I-1||R.push("|")}s.push(!1===T.delimiterEnd?R.join("").replace(/ +$/,""):R.join(""))}return s.join("\n")}(E,{align:T,alignDelimiters:R,padding:e,stringLength:A})}function I(E,T,e){const R=E.children;let A=-1;const S=[],O=T.enter("tableRow");for(;++A<R.length;)S[A]=t(R[A],0,T,e);return O(),S}}function gE(E,T,e,R){const A=function(E){const T=E.options.listItemIndent||"tab";if(1===T||"1"===T)return"one";if("tab"!==T&&"one"!==T&&"mixed"!==T)throw new Error("Cannot serialize items with `"+T+"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");return T}(e);let S=e.bulletCurrent||function(E){const T=E.options.bullet||"*";if("*"!==T&&"+"!==T&&"-"!==T)throw new Error("Cannot serialize items with `"+T+"` for `options.bullet`, expected `*`, `+`, or `-`");return T}(e);T&&"list"===T.type&&T.ordered&&(S=("number"===typeof T.start&&T.start>-1?T.start:1)+(!1===e.options.incrementListMarker?0:T.children.indexOf(E))+S);let t=S.length+1;("tab"===A||"mixed"===A&&(T&&"list"===T.type&&T.spread||E.spread))&&(t=4*Math.ceil(t/4));const O=e.createTracker(R);O.move(S+" ".repeat(t-S.length)),O.shift(t);const I=e.enter("listItem"),N=e.indentLines(e.containerFlow(E,O.current()),(function(E,T,e){if(T)return(e?"":" ".repeat(t))+E;return(e?S:S+" ".repeat(t-S.length))+E}));return I(),N}const XE={exit:{taskListCheckValueChecked:vE,taskListCheckValueUnchecked:vE,paragraph:function(E){const T=this.stack[this.stack.length-2];if(T&&"listItem"===T.type&&"boolean"===typeof T.checked){const E=this.stack[this.stack.length-1],e=E.children[0];if(e&&"text"===e.type){const R=T.children;let A,S=-1;for(;++S<R.length;){const E=R[S];if("paragraph"===E.type){A=E;break}}A===E&&(e.value=e.value.slice(1),0===e.value.length?E.children.shift():E.position&&e.position&&"number"===typeof e.position.start.offset&&(e.position.start.column++,e.position.start.offset++,E.position.start=Object.assign({},e.position.start)))}}this.exit(E)}}},bE={unsafe:[{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{listItem:function(E,T,e,R){const A=E.children[0],S="boolean"===typeof E.checked&&A&&"paragraph"===A.type,t="["+(E.checked?"x":" ")+"] ",O=_E(R);S&&O.move(t);let I=gE(E,T,e,{...R,...O.current()});S&&(I=I.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/,(function(E){return E+t})));return I}}};function vE(E){this.stack[this.stack.length-2].checked="taskListCheckValueChecked"===E.type}function KE(E={}){const T=this.data();function e(E,e){(T[E]?T[E]:T[E]=[]).push(e)}e("micromarkExtensions",function(E){return(0,R.W)([s,{document:{91:{tokenize:B,continuation:{tokenize:d},exit:h}},text:{91:{tokenize:H},93:{add:"after",tokenize:p,resolveTo:f}}},V(E),W,X])}(E)),e("fromMarkdownExtensions",[z,{enter:{gfmFootnoteDefinition:oE,gfmFootnoteDefinitionLabelString:iE,gfmFootnoteCall:DE,gfmFootnoteCallString:lE},exit:{gfmFootnoteDefinition:PE,gfmFootnoteDefinitionLabelString:aE,gfmFootnoteCall:UE,gfmFootnoteCallString:ME}},fE,YE,XE]),e("toMarkdownExtensions",function(E){return{extensions:[EE,{unsafe:[{character:"[",inConstruct:["phrasing","label","reference"]}],handlers:{footnoteDefinition:cE,footnoteReference:uE}},HE,yE(E),bE]}}(E))}},95688:function(E,T,e){"use strict";e.d(T,{WU:function(){return lR}});var R={};let A;e.r(R),e.d(R,{bigquery:function(){return d},db2:function(){return v},hive:function(){return j},mariadb:function(){return tE},mysql:function(){return _E},n1ql:function(){return uE},plsql:function(){return FE},postgresql:function(){return vE},redshift:function(){return jE},singlestoredb:function(){return jT},snowflake:function(){return te},spark:function(){return tT},sql:function(){return uT},sqlite:function(){return _T},transactsql:function(){return vT},trino:function(){return FT}}),function(E){E.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",E.IDENTIFIER="IDENTIFIER",E.STRING="STRING",E.VARIABLE="VARIABLE",E.RESERVED_KEYWORD="RESERVED_KEYWORD",E.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",E.RESERVED_PHRASE="RESERVED_PHRASE",E.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",E.RESERVED_CLAUSE="RESERVED_CLAUSE",E.RESERVED_SELECT="RESERVED_SELECT",E.RESERVED_JOIN="RESERVED_JOIN",E.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",E.ARRAY_KEYWORD="ARRAY_KEYWORD",E.CASE="CASE",E.END="END",E.WHEN="WHEN",E.ELSE="ELSE",E.THEN="THEN",E.LIMIT="LIMIT",E.BETWEEN="BETWEEN",E.AND="AND",E.OR="OR",E.XOR="XOR",E.OPERATOR="OPERATOR",E.COMMA="COMMA",E.ASTERISK="ASTERISK",E.DOT="DOT",E.OPEN_PAREN="OPEN_PAREN",E.CLOSE_PAREN="CLOSE_PAREN",E.LINE_COMMENT="LINE_COMMENT",E.BLOCK_COMMENT="BLOCK_COMMENT",E.NUMBER="NUMBER",E.NAMED_PARAMETER="NAMED_PARAMETER",E.QUOTED_PARAMETER="QUOTED_PARAMETER",E.NUMBERED_PARAMETER="NUMBERED_PARAMETER",E.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",E.CUSTOM_PARAMETER="CUSTOM_PARAMETER",E.DELIMITER="DELIMITER",E.EOF="EOF"}(A||(A={}));const S=E=>({type:A.EOF,raw:"\xabEOF\xbb",text:"\xabEOF\xbb",start:E}),t=S(1/0),O=E=>T=>T.type===E.type&&T.text===E.text,I={ARRAY:O({text:"ARRAY",type:A.RESERVED_KEYWORD}),BY:O({text:"BY",type:A.RESERVED_KEYWORD}),SET:O({text:"SET",type:A.RESERVED_CLAUSE}),STRUCT:O({text:"STRUCT",type:A.RESERVED_KEYWORD}),WINDOW:O({text:"WINDOW",type:A.RESERVED_CLAUSE})},N=E=>E===A.RESERVED_KEYWORD||E===A.RESERVED_FUNCTION_NAME||E===A.RESERVED_PHRASE||E===A.RESERVED_CLAUSE||E===A.RESERVED_SELECT||E===A.RESERVED_SET_OPERATION||E===A.RESERVED_JOIN||E===A.ARRAY_KEYWORD||E===A.CASE||E===A.END||E===A.WHEN||E===A.ELSE||E===A.THEN||E===A.LIMIT||E===A.BETWEEN||E===A.AND||E===A.OR||E===A.XOR,r=E=>E.flatMap(n),n=E=>o(_(E)).map((E=>E.trim())),C=/[^[\]{}]+/y,L=/\{.*?\}/y,s=/\[.*?\]/y,_=E=>{let T=0;const e=[];for(;T<E.length;){C.lastIndex=T;const R=C.exec(E);R&&(e.push([R[0].trim()]),T+=R[0].length),s.lastIndex=T;const A=s.exec(E);if(A){const E=A[0].slice(1,-1).split("|").map((E=>E.trim()));e.push(["",...E]),T+=A[0].length}L.lastIndex=T;const S=L.exec(E);if(S){const E=S[0].slice(1,-1).split("|").map((E=>E.trim()));e.push(E),T+=S[0].length}if(!R&&!A&&!S)throw new Error(`Unbalanced parenthesis in: ${E}`)}return e},o=([E,...T])=>void 0===E?[""]:o(T).flatMap((T=>E.map((E=>E.trim()+" "+T.trim())))),i=E=>E[E.length-1],a=E=>E.sort(((E,T)=>T.length-E.length||E.localeCompare(T))),P=E=>E.reduce(((E,T)=>Math.max(E,T.length)),0),D=E=>E.replace(/\s+/gu," "),l=E=>{return T=Object.values(E).flat(),[...new Set(T)];var T},M=E=>/\n/.test(E),U=l({keywords:["ALL","AND","ANY","ARRAY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LIKE","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","STRUCT","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN"],datatypes:["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],stringFormat:["HEX","BASEX","BASE64M","ASCII","UTF-8","UTF8"],misc:["SAFE"],ddl:["LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"]}),u=l({aead:["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH"],aggregateAnalytic:["ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP"],aggregate:["ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM"],approximateAggregate:["APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM"],array:["ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL"],bitwise:["BIT_COUNT"],conversion:["PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST"],date:["CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE"],datetime:["CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME"],debugging:["ERROR"],federatedQuery:["EXTERNAL_QUERY"],geography:["S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y"],hash:["FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512"],hll:["HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT"],interval:["MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL"],json:["JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING"],math:["ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET"],navigation:["FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC"],net:["NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN"],numbering:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER"],security:["SESSION_USER"],statisticalAggregate:["CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE"],string:["ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER"],time:["CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME"],timestamp:["CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS"],uuid:["GENERATE_UUID"],conditional:["COALESCE","IF","IFNULL","NULLIF"],legacyAggregate:["AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP"],legacyBitwise:["BIT_COUNT"],legacyCasting:["BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING"],legacyComparison:["COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL"],legacyDatetime:["CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR"],legacyIp:["FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP"],legacyJson:["JSON_EXTRACT","JSON_EXTRACT_SCALAR"],legacyMath:["ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH"],legacyRegex:["REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE"],legacyString:["CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER"],legacyTableWildcard:["TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY"],legacyUrl:["HOST","DOMAIN","TLD"],legacyWindow:["AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER"],legacyMisc:["CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64"],other:["BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW"],ddl:["OPTIONS"],pivot:["PIVOT","UNPIVOT"],dataTypes:["BYTES","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","STRING"]}),c=r(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),G=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","REMOTE WITH CONNECTION"]),p=r(["UPDATE","DELETE [FROM]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","TRUNCATE TABLE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),f=r(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),H=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),B=r(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN","IS [NOT] DISTINCT FROM"]),d={tokenizerOptions:{reservedSelect:c,reservedClauses:[...G,...p],reservedSetOperations:f,reservedJoins:H,reservedPhrases:B,reservedKeywords:U,reservedFunctionNames:u,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},variableTypes:[{regex:String.raw`@@\w+`}],lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||"],postProcess:function(E){return function(E){let T=t;return E.map((E=>"OFFSET"===E.text&&"["===T.text?(T=E,{...E,type:A.RESERVED_FUNCTION_NAME}):(T=E,E)))}(function(E){const T=[];for(let R=0;R<E.length;R++){var e;const S=E[R];if((I.ARRAY(S)||I.STRUCT(S))&&"<"===(null===(e=E[R+1])||void 0===e?void 0:e.text)){const e=F(E,R+1),t=E.slice(R,e+1);T.push({type:A.IDENTIFIER,raw:t.map(h("raw")).join(""),text:t.map(h("text")).join(""),start:S.start}),R=e}else T.push(S)}return T}(E))}},formatOptions:{onelineClauses:p}};const h=E=>T=>T.type===A.IDENTIFIER||T.type===A.COMMA?T[E]+" ":T[E];function F(E,T){let e=0;for(let R=T;R<E.length;R++){const T=E[R];if("<"===T.text?e++:">"===T.text?e--:">>"===T.text&&(e-=2),0===e)return R}return E.length-1}const Y=l({aggregate:["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG"],scalar:["ABS","ABSVAL","ACOS","ADD_DAYS","ADD_MONTHS","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ARRAY_TRIM","ASCII","ASCII_CHR","ASCII_STR","ASCIISTR","ASIN","ATAN","ATANH","ATAN2","BIGINT","BINARY","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BLOB","BTRIM","CARDINALITY","CCSID_ENCODING","CEILING","CEIL","CHAR","CHAR9","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CLOB","COALESCE","COLLATION_KEY","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","DATE","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DBCLOB","DECFLOAT","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECIMAL","DEC","DECODE","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DECRYPT_DATAKEY_BIGINT","DECRYPT_DATAKEY_BIT","DECRYPT_DATAKEY_CLOB","DECRYPT_DATAKEY_DBCLOB","DECRYPT_DATAKEY_DECIMAL","DECRYPT_DATAKEY_INTEGER","DECRYPT_DATAKEY_VARCHAR","DECRYPT_DATAKEY_VARGRAPHIC","DEGREES","DIFFERENCE","DIGITS","DOUBLE_PRECISION","DOUBLE","DSN_XMLVALIDATE","EBCDIC_CHR","EBCDIC_STR","ENCRYPT_DATAKEY","ENCRYPT_TDES","EXP","EXTRACT","FLOAT","FLOOR","GENERATE_UNIQUE","GENERATE_UNIQUE_BINARY","GETHINT","GETVARIABLE","GRAPHIC","GREATEST","HASH","HASH_CRC32","HASH_MD5","HASH_SHA1","HASH_SHA256","HEX","HOUR","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTEGER","INT","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LOCATE","LOCATE_IN_STRING","LOG10","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NORMALIZE_DECFLOAT","NORMALIZE_STRING","NULLIF","NVL","OVERLAY","PACK","POSITION","POSSTR","POWER","POW","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND","ROUND_TIMESTAMP","ROWID","RPAD","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SMALLINT","SOUNDEX","SOAPHTTPC","SOAPHTTPV","SOAPHTTPNC","SOAPHTTPNV","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TAN","TANH","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMP_TZ","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TOTALORDER","TO_TIMESTAMP","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRUNC","TRUNC_TIMESTAMP","UCASE","UNICODE","UNICODE_STR","UNISTR","UPPER","VALUE","VARBINARY","VARCHAR","VARCHAR9","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARGRAPHIC","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLMODIFY","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLSERIALIZE","XMLTEXT","XMLXSROBJECTID","XSLTRANSFORM","YEAR"],table:["ADMIN_TASK_LIST","ADMIN_TASK_OUTPUT","ADMIN_TASK_STATUS","BLOCKING_THREADS","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE"],row:["UNPACK"],olap:["CUME_DIST","PERCENT_RANK","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT"],cast:["CAST"]}),m=l({standard:["ALL","ALLOCATE","ALLOW","ALTERAND","ANY","AS","ARRAY","ARRAY_EXISTS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","AUDIT","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BUFFERPOOL","BY","CAPTURE","CASCADED","CAST","CCSID","CHARACTER","CHECK","CLONE","CLUSTER","COLLECTION","COLLID","COLUMN","CONDITION","CONNECTION","CONSTRAINT","CONTENT","CONTINUE","CREATE","CUBE","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRVAL","CURSOR","DATA","DATABASE","DBINFO","DECLARE","DEFAULT","DESCRIPTOR","DETERMINISTIC","DISABLE","DISALLOW","DISTINCT","DO","DOCUMENT","DSSIZE","DYNAMIC","EDITPROC","ELSE","ELSEIF","ENCODING","ENCRYPTION","ENDING","END-EXEC","ERASE","ESCAPE","EXCEPTION","EXISTS","EXIT","EXTERNAL","FENCED","FIELDPROC","FINAL","FIRST","FOR","FREE","FULL","FUNCTION","GENERATED","GET","GLOBAL","GOTO","GROUP","HANDLER","HOLD","HOURS","IF","IMMEDIATE","IN","INCLUSIVE","INDEX","INHERIT","INNER","INOUT","INSENSITIVE","INTO","IS","ISOBID","ITERATE","JAR","KEEP","KEY","LANGUAGE","LAST","LC_CTYPE","LEAVE","LIKE","LOCAL","LOCALE","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LONG","LOOP","MAINTAINED","MATERIALIZED","MICROSECONDS","MINUTEMINUTES","MODIFIES","MONTHS","NEXT","NEXTVAL","NO","NONE","NOT","NULL","NULLS","NUMPARTS","OBID","OF","OLD","ON","OPTIMIZATION","OPTIMIZE","ORDER","ORGANIZATION","OUT","OUTER","PACKAGE","PARAMETER","PART","PADDED","PARTITION","PARTITIONED","PARTITIONING","PATH","PIECESIZE","PERIOD","PLAN","PRECISION","PREVVAL","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","READS","REFERENCES","RESIGNAL","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","ROLE","ROLLUP","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROW","ROWSET","SCHEMA","SCRATCHPAD","SECONDS","SECQTY","SECURITY","SEQUENCE","SENSITIVE","SESSION_USER","SIMPLE","SOME","SOURCE","SPECIFIC","STANDARD","STATIC","STATEMENT","STAY","STOGROUP","STORES","STYLE","SUMMARY","SYNONYM","SYSDATE","SYSTEM","SYSTIMESTAMP","TABLE","TABLESPACE","THEN","TO","TRIGGER","TYPE","UNDO","UNIQUE","UNTIL","USER","USING","VALIDPROC","VARIABLE","VARIANT","VCAT","VERSIONING","VIEW","VOLATILE","VOLUMES","WHILE","WLM","XMLEXISTS","XMLCAST","YEARS","ZONE"]}),V=r(["SELECT [ALL | DISTINCT]"]),W=r(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","FETCH FIRST","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT","CREATE [OR REPLACE] VIEW","CREATE [GLOBAL TEMPORARY] TABLE"]),y=r(["UPDATE","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","DROP TABLE [HIERARCHY]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {IDENTITY | EXPRESSION | DEFAULT | NOT NULL}","TRUNCATE [TABLE]","SET [CURRENT] SCHEMA","AFTER","GO","ALLOCATE CURSOR","ALTER DATABASE","ALTER FUNCTION","ALTER INDEX","ALTER MASK","ALTER PERMISSION","ALTER PROCEDURE","ALTER SEQUENCE","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE LOCATORS","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT","COMMIT","CONNECT","CREATE ALIAS","CREATE AUXILIARY TABLE","CREATE DATABASE","CREATE FUNCTION","CREATE GLOBAL TEMPORARY TABLE","CREATE INDEX","CREATE LOB TABLESPACE","CREATE MASK","CREATE PERMISSION","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE STOGROUP","CREATE SYNONYM","CREATE TABLESPACE","CREATE TRIGGER","CREATE TRUSTED CONTEXT","CREATE TYPE","CREATE VARIABLE","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE STATEMENT","DECLARE TABLE","DECLARE VARIABLE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE OUTPUT","DESCRIBE PROCEDURE","DESCRIBE TABLE","DROP","END DECLARE SECTION","EXCHANGE","EXECUTE","EXECUTE IMMEDIATE","EXPLAIN","FETCH","FREE LOCATOR","GET DIAGNOSTICS","GRANT","HOLD LOCATOR","INCLUDE","LABEL","LOCK TABLE","OPEN","PREPARE","REFRESH","RELEASE","RELEASE SAVEPOINT","RENAME","REVOKE","ROLLBACK","SAVEPOINT","SELECT INTO","SET CONNECTION","SET CURRENT ACCELERATOR","SET CURRENT APPLICATION COMPATIBILITY","SET CURRENT APPLICATION ENCODING SCHEME","SET CURRENT DEBUG MODE","SET CURRENT DECFLOAT ROUNDING MODE","SET CURRENT DEGREE","SET CURRENT EXPLAIN MODE","SET CURRENT GET_ACCEL_ARCHIVE","SET CURRENT LOCALE LC_CTYPE","SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION","SET CURRENT OPTIMIZATION HINT","SET CURRENT PACKAGE PATH","SET CURRENT PACKAGESET","SET CURRENT PRECISION","SET CURRENT QUERY ACCELERATION","SET CURRENT QUERY ACCELERATION WAITFORDATA","SET CURRENT REFRESH AGE","SET CURRENT ROUTINE VERSION","SET CURRENT RULES","SET CURRENT SQLID","SET CURRENT TEMPORAL BUSINESS_TIME","SET CURRENT TEMPORAL SYSTEM_TIME","SET ENCRYPTION PASSWORD","SET PATH","SET SESSION TIME ZONE","SIGNAL","VALUES INTO","WHENEVER"]),g=r(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),X=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),b=r(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),v={tokenizerOptions:{reservedSelect:V,reservedClauses:[...W,...y],reservedSetOperations:g,reservedJoins:X,reservedPhrases:b,reservedKeywords:m,reservedFunctionNames:Y,stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","\xac=","\xac>","\xac<","!>","!<","||"]},formatOptions:{onelineClauses:y}},K=l({math:["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET"],array:["ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY"],conversion:["BINARY","CAST"],date:["ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR"],conditional:["ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL"],string:["ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER"],masking:["MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N"],misc:["AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION"],aggregate:["AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],table:["EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK"],window:["LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],dataTypes:["DECIMAL","NUMERIC","VARCHAR","CHAR"]}),x=l({nonReserved:["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","STRUCT","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE"],reserved:["ALL","ALTER","AND","ARRAY","AS","AUTHORIZATION","BETWEEN","BIGINT","BINARY","BOOLEAN","BOTH","BY","CASE","CAST","CHAR","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DATE","DECIMAL","DELETE","DESCRIBE","DISTINCT","DOUBLE","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FLOAT","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INT","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MAP","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","SMALLINT","TABLE","TABLESAMPLE","THEN","TIMESTAMP","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","VARCHAR","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","INTEGER","PRECISION","VIEWS","TIME","NUMERIC","SYNC"],fileTypes:["TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"]}),w=r(["SELECT [ALL | DISTINCT]"]),k=r(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]"]),$=r(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","TRUNCATE [TABLE]","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SHOW","STORED AS","STORED BY","ROW FORMAT"]),J=r(["UNION [ALL | DISTINCT]"]),Z=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),Q=r(["{ROWS | RANGE} BETWEEN"]),j={tokenizerOptions:{reservedSelect:w,reservedClauses:[...k,...$],reservedSetOperations:J,reservedJoins:Z,reservedPhrases:Q,reservedKeywords:x,reservedFunctionNames:K,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]},formatOptions:{onelineClauses:$}},q=l({all:["ACCESSIBLE","ACCOUNT","ACTION","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALL","ALGORITHM","ALTER","ALWAYS","ANALYZE","AND","ANY","AS","ASC","ASCII","ASENSITIVE","AT","ATOMIC","AUTHORS","AUTO_INCREMENT","AUTOEXTEND_SIZE","AUTO","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BODY","BOOL","BOOLEAN","BOTH","BTREE","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHANGE","CHANGED","CHAR","CHARACTER","CHARSET","CHECK","CHECKPOINT","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLOB","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMN_NAME","COLUMNS","COLUMN_ADD","COLUMN_CHECK","COLUMN_CREATE","COLUMN_DELETE","COLUMN_GET","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPRESSED","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONTRIBUTORS","CONVERT","CPU","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_POS","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","CYCLE","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DES_KEY_FILE","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DO_DOMAIN_IDS","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","ELSIF","EMPTY","ENABLE","ENCLOSED","END","ENDS","ENGINE","ENGINES","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXAMINED","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXCEPTION","EXISTS","EXIT","EXPANSION","EXPIRE","EXPORT","EXPLAIN","EXTENDED","EXTENT_SIZE","FALSE","FAST","FAULTS","FEDERATED","FETCH","FIELDS","FILE","FIRST","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GET_FORMAT","GET","GLOBAL","GOTO","GRANT","GRANTS","GROUP","HANDLER","HARD","HASH","HAVING","HELP","HIGH_PRIORITY","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORED","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IMMEDIATE","IMPORT","INTERSECT","IN","INCREMENT","INDEX","INDEXES","INFILE","INITIAL_SIZE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INVISIBLE","INTO","IO","IO_THREAD","IPC","IS","ISOLATION","ISOPEN","ISSUER","ITERATE","INVOKER","JOIN","JSON","JSON_TABLE","KEY","KEYS","KEY_BLOCK_SIZE","KILL","LANGUAGE","LAST","LAST_VALUE","LASTVAL","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_GTID_POS","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_USER","MASTER_USE_GTID","MASTER_HEARTBEAT_PERIOD","MATCH","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_STATEMENT_TIME","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MAXVALUE","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUS","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONITOR","MONTH","MUTEX","MYSQL","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NESTED","NEVER","NEW","NEXT","NEXTVAL","NO","NOMAXVALUE","NOMINVALUE","NOCACHE","NOCYCLE","NO_WAIT","NOWAIT","NODEGROUP","NONE","NOT","NOTFOUND","NO_WRITE_TO_BINLOG","NULL","NUMBER","NUMERIC","NVARCHAR","OF","OFFSET","OLD_PASSWORD","ON","ONE","ONLINE","ONLY","OPEN","OPTIMIZE","OPTIONS","OPTION","OPTIONALLY","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OUTFILE","OVER","OVERLAPS","OWNER","PACKAGE","PACK_KEYS","PAGE","PAGE_CHECKSUM","PARSER","PARSE_VCOL_EXPR","PATH","PERIOD","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PERSISTENT","PHASE","PLUGIN","PLUGINS","PORT","PORTION","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PREVIOUS","PRIMARY","PRIVILEGES","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RAISE","RANGE","RAW","READ","READ_ONLY","READ_WRITE","READS","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDOFILE","REDUNDANT","REFERENCES","REGEXP","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEATABLE","REPLACE","REPLAY","REPLICA","REPLICAS","REPLICA_POS","REPLICATION","REPEAT","REQUIRE","RESET","RESIGNAL","RESTART","RESTORE","RESTRICT","RESUME","RETURNED_SQLSTATE","RETURN","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROW","ROWCOUNT","ROWNUM","ROWS","ROWTYPE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMA_NAME","SCHEMAS","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SEQUENCE","SERIAL","SERIALIZABLE","SESSION","SERVER","SET","SETVAL","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLAVES","SLAVE_POS","SLOW","SNAPSHOT","SMALLINT","SOCKET","SOFT","SOME","SONAME","SOUNDS","SOURCE","STAGE","STORED","SPATIAL","SPECIFIC","REF_SYSTEM_ID","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_SECOND","SQL_TSI_MINUTE","SQL_TSI_HOUR","SQL_TSI_DAY","SQL_TSI_WEEK","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_YEAR","SSL","START","STARTING","STARTS","STATEMENT","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STRAIGHT_JOIN","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSDATE","SYSTEM","SYSTEM_TIME","TABLE","TABLE_NAME","TABLES","TABLESPACE","TABLE_CHECKSUM","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRANSACTION","TRANSACTIONAL","THREADS","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO_BUFFER_SIZE","UNDOFILE","UNDO","UNICODE","UNION","UNIQUE","UNKNOWN","UNLOCK","UNINSTALL","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARCHAR2","VARIABLES","VARYING","VIA","VIEW","VIRTUAL","VISIBLE","VERSIONING","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","X509","XOR","XA","XML","YEAR","YEAR_MONTH","ZEROFILL"]}),z=l({all:["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","BIT","BINARY","BLOB","CHAR","NATIONAL CHAR","CHAR BYTE","ENUM","VARBINARY","VARCHAR","NATIONAL VARCHAR","TIME","DATETIME","TIMESTAMP","YEAR"]}),EE=r(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),TE=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","SET","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]","RETURNING"]),eE=r(["UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","TRUNCATE [TABLE]","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),RE=r(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),AE=r(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),SE=r(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),tE={tokenizerOptions:{reservedSelect:EE,reservedClauses:[...TE,...eE],reservedSetOperations:RE,reservedJoins:AE,reservedPhrases:SE,supportsXor:!0,reservedKeywords:q,reservedFunctionNames:z,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!"],postProcess:function(E){return E.map(((T,e)=>{const R=E[e+1]||t;return I.SET(T)&&"("===R.text?{...T,type:A.RESERVED_FUNCTION_NAME}:T}))}},formatOptions:{onelineClauses:eE}};const OE=l({all:["ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALL","ALTER","ALWAYS","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASCII","ASENSITIVE","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BOOL","BOOLEAN","BOTH","BTREE","BUCKETS","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGE","CHANGED","CHANNEL","CHAR","CHARACTER","CHARSET","CHECK","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONVERT","CPU","CREATE","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULT_AUTH","DEFINER","DEFINITION","DELAYED","DELAY_KEY_WRITE","DELETE","DENSE_RANK","DESC","DESCRIBE","DESCRIPTION","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCLOSED","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXISTS","EXIT","EXPANSION","EXPIRE","EXPLAIN","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FALSE","FAST","FAULTS","FETCH","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIRST_VALUE","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANT","GRANTS","GROUP","GROUPING","GROUPS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HAVING","HELP","HIGH_PRIORITY","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORE_SERVER_IDS","IMPORT","IN","INACTIVE","INDEX","INDEXES","INFILE","INITIAL","INITIAL_SIZE","INITIATE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INSTANCE","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERSECT","INTERVAL","INTO","INVISIBLE","INVOKER","IO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IO_THREAD","IPC","IS","ISOLATION","ISSUER","ITERATE","JOIN","JSON","JSON_TABLE","JSON_VALUE","KEY","KEYRING","KEYS","KEY_BLOCK_SIZE","KILL","LAG","LANGUAGE","LAST","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LINESTRING","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_AUTO_POSITION","MASTER_BIND","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MATCH","MAXVALUE","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOT","NOWAIT","NO_WAIT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NULLS","NUMBER","NUMERIC","NVARCHAR","OF","OFF","OFFSET","OJ","OLD","ON","ONE","ONLY","OPEN","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONAL","OPTIONALLY","OPTIONS","OR","ORDER","ORDINALITY","ORGANIZATION","OTHERS","OUT","OUTER","OUTFILE","OVER","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERCENT_RANK","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PRIMARY","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RANDOM","RANGE","RANK","READ","READS","READ_ONLY","READ_WRITE","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REFERENCES","REGEXP","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEAT","REPEATABLE","REPLACE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE","REQUIRE_ROW_FORMAT","RESET","RESIGNAL","RESOURCE","RESPECT","RESTART","RESTORE","RESTRICT","RESUME","RETAIN","RETURN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW","ROWS","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMAS","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SERIAL","SERIALIZABLE","SERVER","SESSION","SET","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SMALLINT","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","SSL","STACKED","START","STARTING","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STORED","STRAIGHT_JOIN","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSTEM","TABLE","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TLS","TO","TRAILING","TRANSACTION","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNION","UNIQUE","UNKNOWN","UNLOCK","UNREGISTER","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALIDATION","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARYING","VCPU","VIEW","VIRTUAL","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHOUT","WORK","WRAPPER","WRITE","X509","XA","XID","XML","XOR","YEAR","YEAR_MONTH","ZEROFILL","ZONE"]}),IE=l({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),NE=r(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),rE=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","SET","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),nE=r(["UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),CE=r(["UNION [ALL | DISTINCT]"]),LE=r(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),sE=r(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),_E={tokenizerOptions:{reservedSelect:NE,reservedClauses:[...rE,...nE],reservedSetOperations:CE,reservedJoins:LE,reservedPhrases:sE,supportsXor:!0,reservedKeywords:OE,reservedFunctionNames:IE,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!"],postProcess:function(E){return E.map(((T,e)=>{const R=E[e+1]||t;return I.SET(T)&&"("===R.text?{...T,type:A.RESERVED_FUNCTION_NAME}:T}))}},formatOptions:{onelineClauses:nE}};const oE=l({all:["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"]}),iE=l({all:["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","ISOLATION","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"]}),aE=r(["SELECT [ALL | DISTINCT]"]),PE=r(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","NEST","UNNEST","RETURNING"]),DE=r(["UPDATE","DELETE FROM","SET SCHEMA","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","SET CURRENT SCHEMA","SHOW","USE [PRIMARY] KEYS"]),lE=r(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),ME=r(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),UE=r(["{ROWS | RANGE | GROUPS} BETWEEN"]),uE={tokenizerOptions:{reservedSelect:aE,reservedClauses:[...PE,...DE],reservedSetOperations:lE,reservedJoins:ME,reservedPhrases:UE,supportsXor:!0,reservedKeywords:iE,reservedFunctionNames:oE,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]},formatOptions:{onelineClauses:DE}},cE=l({all:["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARRAY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BFILE_BASE","BINARY","BLOB_BASE","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHAR","CHAR_BASE","CHARACTER","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOB_BASE","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DATE","DATE_BASE","DAY","DECIMAL","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DOUBLE","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FLOAT","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INT","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LONG","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NCHAR","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","NUMBER_BASE","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRECISION","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RAW","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMESTAMP","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"]}),GE=l({numeric:["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET"],character:["CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET"],comparison:["GREATEST","LEAST"],conversion:["ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR"],largeObject:["BFILENAME","EMPTY_BLOB,","EMPTY_CLOB"],collection:["CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET"],hierarchical:["SYS_CONNECT_BY_PATH"],dataMining:["CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET"],xml:["APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM"],encoding:["DECODE","DUMP","ORA_HASH","VSIZE"],nullRelated:["COALESCE","LNNVL","NULLIF","NVL","NVL2"],env:["SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV"],aggregate:["AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER"],objectReference:["DEREF","MAKE_REF","REF","REFTOHEX","VALUE"],model:["CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],dataTypes:["VARCHAR2","NVARCHAR2","NUMBER","FLOAT","TIMESTAMP","INTERVAL YEAR","INTERVAL DAY","RAW","UROWID","NCHAR","CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","NATIONAL CHARACTER","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NUMERIC","DECIMAL","FLOAT","VARCHAR"]}),pE=r(["SELECT [ALL | DISTINCT | UNIQUE]"]),fE=r(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","INSERT [INTO | ALL INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE","RETURNING"]),HE=r(["UPDATE [ONLY]","DELETE FROM [ONLY]","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","TRUNCATE TABLE","SET SCHEMA","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","START WITH"]),BE=r(["UNION [ALL]","EXCEPT","INTERSECT"]),dE=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),hE=r(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]),FE={tokenizerOptions:{reservedSelect:pE,reservedClauses:[...fE,...HE],reservedSetOperations:BE,reservedJoins:dE,reservedPhrases:hE,supportsXor:!0,reservedKeywords:cE,reservedFunctionNames:GE,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},paramChars:{},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:function(E){let T=t;return E.map((E=>I.SET(E)&&I.BY(T)?{...E,type:A.RESERVED_KEYWORD}:(N(E.type)&&(T=E),E)))}},formatOptions:{alwaysDenseOperators:["@"],onelineClauses:HE}};const YE=l({math:["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET"],string:["ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER"],binary:["BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM"],bitstring:["BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING"],pattern:["REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE"],datatype:["TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP"],datetime:["CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP"],enum:["ENUM_FIRST","ENUM_LAST","ENUM_RANGE"],geometry:["AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH"],network:["ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TEXT","TRUNC"],textsearch:["ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY"],uuid:["UUID"],xml:["CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS"],json:["ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP"],sequence:["CURRVAL","LASTVAL","NEXTVAL","SETVAL"],conditional:["COALESCE","GREATEST","LEAST","NULLIF"],array:["ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST"],range:["ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF"],aggregate:["ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG"],window:["CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],set:["GENERATE_SERIES","GENERATE_SUBSCRIPTS"],sysInfo:["ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION"],sysAdmin:["BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG"],trigger:["SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN"],eventTrigger:["PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS"],stats:["PG_MCV_LIST_ITEMS"],cast:["CAST"],dataTypes:["BIT","BIT VARYING","CHARACTER","CHARACTER VARYING","VARCHAR","CHAR","DECIMAL","NUMERIC","TIME","TIMESTAMP","ENUM"]}),mE=l({all:["ABORT","ABSOLUTE","ACCESS","ACTION","ADD","ADMIN","AFTER","AGGREGATE","ALL","ALSO","ALTER","ALWAYS","ANALYSE","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASENSITIVE","ASSERTION","ASSIGNMENT","ASYMMETRIC","AT","ATOMIC","ATTACH","ATTRIBUTE","AUTHORIZATION","BACKWARD","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BIT","BOOLEAN","BOTH","BREADTH","BY","CACHE","CALL","CALLED","CASCADE","CASCADED","CASE","CAST","CATALOG","CHAIN","CHAR","CHARACTER","CHARACTERISTICS","CHECK","CHECKPOINT","CLASS","CLOSE","CLUSTER","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNS","COMMENT","COMMENTS","COMMIT","COMMITTED","COMPRESSION","CONCURRENTLY","CONFIGURATION","CONFLICT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTENT","CONTINUE","CONVERSION","COPY","COST","CREATE","CROSS","CSV","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINER","DELETE","DELIMITER","DELIMITERS","DEPENDS","DEPTH","DESC","DETACH","DICTIONARY","DISABLE","DISCARD","DISTINCT","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","EACH","ELSE","ENABLE","ENCODING","ENCRYPTED","END","ENUM","ESCAPE","EVENT","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXPLAIN","EXPRESSION","EXTENSION","EXTERNAL","EXTRACT","FALSE","FAMILY","FETCH","FILTER","FINALIZE","FIRST","FLOAT","FOLLOWING","FOR","FORCE","FOREIGN","FORWARD","FREEZE","FROM","FULL","FUNCTION","FUNCTIONS","GENERATED","GLOBAL","GRANT","GRANTED","GREATEST","GROUP","GROUPING","GROUPS","HANDLER","HAVING","HEADER","HOLD","HOUR","IDENTITY","IF","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDE","INCLUDING","INCREMENT","INDEX","INDEXES","INHERIT","INHERITS","INITIALLY","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSTEAD","INT","INTEGER","INTERSECT","INTERVAL","INTO","INVOKER","IS","ISNULL","ISOLATION","JOIN","KEY","LABEL","LANGUAGE","LARGE","LAST","LATERAL","LEADING","LEAKPROOF","LEAST","LEFT","LEVEL","LIKE","LIMIT","LISTEN","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LOCKED","LOGGED","MAPPING","MATCH","MATERIALIZED","MAXVALUE","METHOD","MINUTE","MINVALUE","MODE","MONTH","MOVE","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEW","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NORMALIZE","NORMALIZED","NOT","NOTHING","NOTIFY","NOTNULL","NOWAIT","NULL","NULLIF","NULLS","NUMERIC","OBJECT","OF","OFF","OFFSET","OIDS","OLD","ON","ONLY","OPERATOR","OPTION","OPTIONS","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OVER","OVERLAPS","OVERLAY","OVERRIDING","OWNED","OWNER","PARALLEL","PARSER","PARTIAL","PARTITION","PASSING","PASSWORD","PLACING","PLANS","POLICY","POSITION","PRECEDING","PRECISION","PREPARE","PREPARED","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROGRAM","PUBLICATION","QUOTE","RANGE","READ","REAL","REASSIGN","RECHECK","RECURSIVE","REF","REFERENCES","REFERENCING","REFRESH","REINDEX","RELATIVE","RELEASE","RENAME","REPEATABLE","REPLACE","REPLICA","RESET","RESTART","RESTRICT","RETURN","RETURNING","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROUTINES","ROW","ROWS","RULE","SAVEPOINT","SCHEMA","SCHEMAS","SCROLL","SEARCH","SECOND","SECURITY","SELECT","SEQUENCE","SEQUENCES","SERIALIZABLE","SERVER","SESSION","SESSION_USER","SET","SETOF","SETS","SHARE","SHOW","SIMILAR","SIMPLE","SKIP","SMALLINT","SNAPSHOT","SOME","SQL","STABLE","STANDALONE","START","STATEMENT","STATISTICS","STDIN","STDOUT","STORAGE","STORED","STRICT","STRIP","SUBSCRIPTION","SUBSTRING","SUPPORT","SYMMETRIC","SYSID","SYSTEM","TABLE","TABLES","TABLESAMPLE","TABLESPACE","TEMP","TEMPLATE","TEMPORARY","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRANSFORM","TREAT","TRIGGER","TRIM","TRUE","TRUNCATE","TRUSTED","TYPE","TYPES","UESCAPE","UNBOUNDED","UNCOMMITTED","UNENCRYPTED","UNION","UNIQUE","UNKNOWN","UNLISTEN","UNLOGGED","UNTIL","UPDATE","USER","USING","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARCHAR","VARIADIC","VARYING","VERBOSE","VERSION","VIEW","VIEWS","VOLATILE","WHEN","WHERE","WHITESPACE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","XML","XMLATTRIBUTES","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","YEAR","YES","ZONE"]}),VE=r(["SELECT [ALL | DISTINCT]"]),WE=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]","INSERT INTO","VALUES","SET","CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE MATERIALIZED VIEW [IF NOT EXISTS]","CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]","RETURNING"]),yE=r(["UPDATE [ONLY]","WHERE CURRENT OF","ON CONFLICT","DELETE FROM [ONLY]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","[SET DATA] TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","TRUNCATE [TABLE] [ONLY]","SET SCHEMA","AFTER","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMENT","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE FUNCTION","CREATE GROUP","CREATE INDEX","CREATE LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE RULE","CREATE SCHEMA","CREATE SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE TRANSFORM","CREATE TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM"]),gE=r(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),XE=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),bE=r(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","{TIMESTAMP | TIME} {WITH | WITHOUT} TIME ZONE","IS [NOT] DISTINCT FROM"]),vE={tokenizerOptions:{reservedSelect:VE,reservedClauses:[...WE,...yE],reservedSetOperations:gE,reservedJoins:XE,reservedPhrases:bE,reservedKeywords:mE,reservedFunctionNames:YE,nestedBlockComments:!0,extraParens:["[]"],stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:yE}},KE=l({aggregate:["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],array:["array","array_concat","array_flatten","get_array_length","split_to_array","subarray"],bitwise:["BIT_AND","BIT_OR","BOOL_AND","BOOL_OR"],conditional:["COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF"],dateTime:["ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC"],spatial:["AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox"],hash:["CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2"],hyperLogLog:["HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE"],json:["IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE"],math:["ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC"],machineLearning:["EXPLAIN_MODEL"],string:["ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER"],superType:["decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof"],window:["AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],dataType:["CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT"],sysAdmin:["CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG"],sysInfo:["CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],dataTypes:["DECIMAL","NUMERIC","CHAR","CHARACTER","VARCHAR","CHARACTER VARYING","NCHAR","NVARCHAR","VARBYTE"]}),xE=l({standard:["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","ARRAY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT"],dataConversionParams:["ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS"],dataLoadParams:["COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE"],dataFormatParams:["FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC"],copyAuthParams:["ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN"],copyCompressionParams:["BZIP2","GZIP","LZOP","ZSTD"],copyMiscParams:["MANIFEST","READRATIO","REGION","SSH"],compressionEncodings:["RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K"],misc:["CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],dataTypes:["BPCHAR","TEXT"]}),wE=r(["SELECT [ALL | DISTINCT]"]),kE=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","CREATE [OR REPLACE | MATERIALIZED] VIEW","CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]"]),$E=r(["UPDATE","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","TRUNCATE [TABLE]","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMENT","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM"]),JE=r(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),ZE=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),QE=r(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]),jE={tokenizerOptions:{reservedSelect:wE,reservedClauses:[...kE,...$E],reservedSetOperations:JE,reservedJoins:ZE,reservedPhrases:QE,reservedKeywords:xE,reservedFunctionNames:KE,stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:$E}},qE=l({all:["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","ARRAY","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTERVAL","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MAP","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","STRUCT","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","STRING","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"]}),zE=l({aggregate:["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],array:["ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY"],map:["ELEMENT_AT","ELEMENT_AT","MAP","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR"],json:["FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON"],misc:["ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIGINT","BIN","BINARY","BIT_COUNT","BIT_GET","BIT_LENGTH","BOOLEAN","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DATE","DECIMAL","DEGREES","DOUBLE","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOAT","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","INT","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SMALLINT","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TIMESTAMP","TINYINT","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","DEC","NUMERIC","VARCHAR"]}),ET=r(["SELECT [ALL | DISTINCT]"]),TT=r(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","CREATE [EXTERNAL] TABLE [IF NOT EXISTS]"]),eT=r(["DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","TRUNCATE TABLE","LATERAL VIEW","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE"]),RT=r(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),AT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),ST=r(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]),tT={tokenizerOptions:{reservedSelect:ET,reservedClauses:[...TT,...eT],reservedSetOperations:RT,reservedJoins:AT,reservedPhrases:ST,supportsXor:!0,reservedKeywords:qE,reservedFunctionNames:zE,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess:function(E){return E.map(((T,e)=>{const R=E[e-1]||t,S=E[e+1]||t;return I.WINDOW(T)&&S.type===A.OPEN_PAREN?{...T,type:A.RESERVED_FUNCTION_NAME}:"ITEMS"!==T.text||T.type!==A.RESERVED_KEYWORD||"COLLECTION"===R.text&&"TERMINATED"===S.text?T:{...T,type:A.IDENTIFIER,text:T.raw}}))}},formatOptions:{onelineClauses:eT}};const OT=l({scalar:["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB"],aggregate:["AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL"],datetime:["DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME"],window:["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],math:["ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC"],json:["JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE"],cast:["CAST"],dataTypes:["CHARACTER","VARCHAR","VARYING CHARACTER","NCHAR","NATIVE CHARACTER","NVARCHAR","NUMERIC","DECIMAL"]}),IT=l({all:["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ANY","ARE","ARRAY","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"]}),NT=r(["SELECT [ALL | DISTINCT]"]),rT=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","SET","CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]"]),nT=r(["UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","ON CONFLICT","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),CT=r(["UNION [ALL]","EXCEPT","INTERSECT"]),LT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),sT=r(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN"]),_T={tokenizerOptions:{reservedSelect:NT,reservedClauses:[...rT,...nT],reservedSetOperations:CT,reservedJoins:LT,reservedPhrases:sT,reservedKeywords:IT,reservedFunctionNames:OT,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]},formatOptions:{onelineClauses:nT}},oT=l({set:["GROUPING"],window:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER"],numeric:["POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET"],string:["SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE"],datetime:["CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP"],aggregate:["COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],nonStandard:["ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],dataTypes:["CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","VARCHAR","CHARACTER LARGE OBJECT","CHAR LARGE OBJECT","CLOB","NATIONAL CHARACTER","NATIONAL CHAR","NCHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NATIONAL CHARACTER LARGE OBJECT","NCHAR LARGE OBJECT","NCLOB","BINARY","BINARY VARYING","VARBINARY","BINARY LARGE OBJECT","BLOB","NUMERIC","DECIMAL","DEC","TIME","TIMESTAMP"]}),iT=l({all:["ALL","ALLOCATE","ALTER","ANY","ARE","ARRAY","AS","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BIGINT","BINARY","BLOB","BOOLEAN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHAR","CHARACTER","CHECK","CLOB","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DELETE","DEREF","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DOUBLE","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FLOAT","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","MULTISET","NATIONAL","NATURAL","NCHAR","NCLOB","NEW","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SMALLINT","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","VARBINARY","VARCHAR","VARYING","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"]}),aT=r(["SELECT [ALL | DISTINCT]"]),PT=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","CREATE [RECURSIVE] VIEW","CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE"]),DT=r(["UPDATE","WHERE CURRENT OF","DELETE FROM","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","TRUNCATE TABLE","SET SCHEMA"]),lT=r(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),MT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),UT=r(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),uT={tokenizerOptions:{reservedSelect:aT,reservedClauses:[...PT,...DT],reservedSetOperations:lT,reservedJoins:MT,reservedPhrases:UT,reservedKeywords:iT,reservedFunctionNames:oT,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]},formatOptions:{onelineClauses:DT}},cT=l({all:["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH"],rowPattern:["CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"]}),GT=l({all:["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],types:["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"]}),pT=r(["SELECT [ALL | DISTINCT]"]),fT=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW","CREATE TABLE [IF NOT EXISTS]","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),HT=r(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","TRUNCATE TABLE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","COMMENT ON TABLE","COMMENT ON COLUMN","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION"]),BT=r(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),dT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),hT=r(["{ROWS | RANGE | GROUPS} BETWEEN","IS [NOT] DISTINCT FROM"]),FT={tokenizerOptions:{reservedSelect:pT,reservedClauses:[...fT,...HT],reservedSetOperations:BT,reservedJoins:dT,reservedPhrases:hT,reservedKeywords:GT,reservedFunctionNames:cT,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->","=>",":","||","|","^","$"]},formatOptions:{onelineClauses:HT}},YT=l({aggregate:["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP"],analytic:["CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS"],configuration:["@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION"],conversion:["CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE"],cryptographic:["ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY"],cursor:["@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS"],dataType:["DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY"],datetime:["@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY"],mathematical:["ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST"],metadata:["@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY"],ranking:["DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME"],security:["CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME"],string:["ASCII","CHAR","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER"],system:["$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE"],statistical:["@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID"],trigger:["COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","NUMERIC","FLOAT","REAL","DATETIME2","DATETIMEOFFSET","TIME","CHAR","VARCHAR","NCHAR","NVARCHAR","BINARY","VARBINARY"]}),mT=l({standard:["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DOUBLE","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NATIONAL","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRECISION","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VARYING","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT"],odbc:["ABSOLUTE","ACTION","ADA","ADD","ALL","ALLOCATE","ALTER","AND","ANY","ARE","AS","ASC","ASSERTION","AT","AUTHORIZATION","AVG","BEGIN","BETWEEN","BIT","BIT_LENGTH","BOTH","BY","CASCADE","CASCADED","CAST","CATALOG","CHAR","CHARACTER","CHARACTER_LENGTH","CHAR_LENGTH","CHECK","CLOSE","COALESCE","COLLATE","COLLATION","COLUMN","COMMIT","CONNECT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTINUE","CONVERT","CORRESPONDING","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DESCRIBE","DESCRIPTOR","DIAGNOSTICS","DISCONNECT","DISTINCT","DOMAIN","DOUBLE","DROP","END-EXEC","ESCAPE","EXCEPTION","EXEC","EXECUTE","EXISTS","EXTERNAL","EXTRACT","FALSE","FETCH","FIRST","FLOAT","FOR","FOREIGN","FORTRAN","FOUND","FROM","FULL","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HAVING","HOUR","IDENTITY","IMMEDIATE","IN","INCLUDE","INDEX","INDICATOR","INITIALLY","INNER","INPUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","ISOLATION","JOIN","KEY","LANGUAGE","LAST","LEADING","LEFT","LEVEL","LIKE","LOCAL","LOWER","MATCH","MAX","MIN","MINUTE","MODULE","MONTH","NAMES","NATIONAL","NATURAL","NCHAR","NEXT","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OCTET_LENGTH","OF","ONLY","OPEN","OPTION","OR","ORDER","OUTER","OUTPUT","OVERLAPS","PAD","PARTIAL","PASCAL","POSITION","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURE","PUBLIC","READ","REAL","REFERENCES","RELATIVE","RESTRICT","REVOKE","RIGHT","ROLLBACK","ROWS","SCHEMA","SCROLL","SECOND","SECTION","SELECT","SESSION","SESSION_USER","SET","SIZE","SMALLINT","SOME","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","SUBSTRING","SUM","SYSTEM_USER","TABLE","TEMPORARY","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSACTION","TRANSLATE","TRANSLATION","TRIM","TRUE","UNION","UNIQUE","UNKNOWN","UPDATE","UPPER","USAGE","USER","VALUE","VALUES","VARCHAR","VARYING","VIEW","WHENEVER","WHERE","WITH","WORK","WRITE","YEAR","ZONE"]}),VT=r(["SELECT [ALL | DISTINCT]"]),WT=r(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET","CREATE [OR ALTER] [MATERIALIZED] VIEW","CREATE TABLE"]),yT=r(["UPDATE","WHERE CURRENT OF","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","TRUNCATE TABLE","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLLATE","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","FUNCTION","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION FUNCTION","PARTITION SCHEME","PROCEDURE","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),gT=r(["UNION [ALL]","EXCEPT","INTERSECT"]),XT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),bT=r(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),vT={tokenizerOptions:{reservedSelect:VT,reservedClauses:[...WT,...yT],reservedSetOperations:gT,reservedJoins:XT,reservedPhrases:bT,reservedKeywords:mT,reservedFunctionNames:YT,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]}],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:yT}},KT=l({all:["ABORT","ABSOLUTE","ACCESS","ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","AGGREGATES","AGGREGATOR","AGGREGATOR_ID","AGGREGATOR_PLAN_HASH","AGGREGATORS","ALGORITHM","ALL","ALSO","ALTER","ALWAYS","ANALYZE","AND","ANY","ARGHISTORY","ARRANGE","ARRANGEMENT","ARRAY","AS","ASC","ASCII","ASENSITIVE","ASM","ASSERTION","ASSIGNMENT","AST","ASYMMETRIC","ASYNC","AT","ATTACH","ATTRIBUTE","AUTHORIZATION","AUTO","AUTO_INCREMENT","AUTO_REPROVISION","AUTOSTATS","AUTOSTATS_CARDINALITY_MODE","AUTOSTATS_ENABLED","AUTOSTATS_HISTOGRAM_MODE","AUTOSTATS_SAMPLING","AVAILABILITY","AVG","AVG_ROW_LENGTH","AVRO","AZURE","BACKGROUND","_BACKGROUND_THREADS_FOR_CLEANUP","BACKUP","BACKUP_HISTORY","BACKUP_ID","BACKWARD","BATCH","BATCHES","BATCH_INTERVAL","_BATCH_SIZE_LIMIT","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","_BINARY","BIT","BLOB","BOOL","BOOLEAN","BOOTSTRAP","BOTH","_BT","BTREE","BUCKET_COUNT","BUCKETS","BY","BYTE","BYTE_LENGTH","CACHE","CALL","CALL_FOR_PIPELINE","CALLED","CAPTURE","CASCADE","CASCADED","CASE","CATALOG","CHAIN","CHANGE","CHAR","CHARACTER","CHARACTERISTICS","CHARSET","CHECK","CHECKPOINT","_CHECK_CAN_CONNECT","_CHECK_CONSISTENCY","CHECKSUM","_CHECKSUM","CLASS","CLEAR","CLIENT","CLIENT_FOUND_ROWS","CLOSE","CLUSTER","CLUSTERED","CNF","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNAR","COLUMNS","COLUMNSTORE","COLUMNSTORE_SEGMENT_ROWS","COMMENT","COMMENTS","COMMIT","COMMITTED","_COMMIT_LOG_TAIL","COMPACT","COMPILE","COMPRESSED","COMPRESSION","CONCURRENT","CONCURRENTLY","CONDITION","CONFIGURATION","CONNECTION","CONNECTIONS","CONFIG","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","_CONTINUE_REPLAY","CONVERSION","CONVERT","COPY","_CORE","COST","CREATE","CREDENTIALS","CROSS","CUBE","CSV","CUME_DIST","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_SCHEMA","CURRENT_SECURITY_GROUPS","CURRENT_SECURITY_ROLES","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATABASES","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELIMITER","DELIMITERS","DENSE_RANK","DESC","DESCRIBE","DETACH","DETERMINISTIC","DICTIONARY","DIFFERENTIAL","DIRECTORY","DISABLE","DISCARD","_DISCONNECT","DISK","DISTINCT","DISTINCTROW","DISTRIBUTED_JOINS","DIV","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","_DROP_PROFILE","DUAL","DUMP","DUPLICATE","DURABILITY","DYNAMIC","EARLIEST","EACH","ECHO","ELECTION","ELSE","ELSEIF","ENABLE","ENCLOSED","ENCODING","ENCRYPTED","END","ENGINE","ENGINES","ENUM","ERRORS","ESCAPE","ESCAPED","ESTIMATE","EVENT","EVENTS","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTENSION","EXTERNAL","EXTERNAL_HOST","EXTERNAL_PORT","EXTRACTOR","EXTRACTORS","EXTRA_JOIN","_FAILOVER","FAILED_LOGIN_ATTEMPTS","FAILURE","FALSE","FAMILY","FAULT","FETCH","FIELDS","FILE","FILES","FILL","FIX_ALTER","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREGROUND","FOREIGN","FORMAT","FORWARD","FREEZE","FROM","FS","_FSYNC","FULL","FULLTEXT","FUNCTION","FUNCTIONS","GC","GCS","GET_FORMAT","_GC","_GCX","GENERATE","GEOGRAPHY","GEOGRAPHYPOINT","GEOMETRY","GEOMETRYPOINT","GLOBAL","_GLOBAL_VERSION_TIMESTAMP","GRANT","GRANTED","GRANTS","GROUP","GROUPING","GROUPS","GZIP","HANDLE","HANDLER","HARD_CPU_LIMIT_PERCENTAGE","HASH","HAS_TEMP_TABLES","HAVING","HDFS","HEADER","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HISTOGRAM","HOLD","HOLDING","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IDENTITY","IF","IGNORE","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDING","INCREMENT","INCREMENTAL","INDEX","INDEXES","INFILE","INHERIT","INHERITS","_INIT_PROFILE","INIT","INITIALIZE","INITIALLY","INJECT","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTANCE","INSTEAD","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","_INTERNAL_DYNAMIC_TYPECAST","INTERPRETER_MODE","INTERSECT","INTERVAL","INTO","INVOKER","ISOLATION","ITERATE","JOIN","JSON","KAFKA","KEY","KEY_BLOCK_SIZE","KEYS","KILL","KILLALL","LABEL","LAG","LANGUAGE","LARGE","LAST","LAST_VALUE","LATERAL","LATEST","LC_COLLATE","LC_CTYPE","LEAD","LEADING","LEAF","LEAKPROOF","LEAVE","LEAVES","LEFT","LEVEL","LICENSE","LIKE","LIMIT","LINES","LISTEN","LLVM","LOADDATA_WHERE","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","_LS","LZ4","MANAGEMENT","_MANAGEMENT_THREAD","MAPPING","MASTER","MATCH","MATERIALIZED","MAXVALUE","MAX_CONCURRENCY","MAX_ERRORS","MAX_PARTITIONS_PER_BATCH","MAX_QUEUE_DEPTH","MAX_RETRIES_PER_BATCH_PARTITION","MAX_ROWS","MBC","MPL","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MEMORY_PERCENTAGE","_MEMSQL_TABLE_ID_LOOKUP","MEMSQL","MEMSQL_DESERIALIZE","MEMSQL_IMITATING_KAFKA","MEMSQL_SERIALIZE","MERGE","METADATA","MICROSECOND","MIDDLEINT","MIN_ROWS","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MOD","MODE","MODEL","MODIFIES","MODIFY","MONTH","MOVE","MPL","NAMES","NAMED","NAMESPACE","NATIONAL","NATURAL","NCHAR","NEXT","NO","NODE","NONE","NO_QUERY_REWRITE","NOPARAM","NOT","NOTHING","NOTIFY","NOWAIT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NORELY","NTH_VALUE","NTILE","NULL","NULLCOLS","NULLS","NUMERIC","NVARCHAR","OBJECT","OF","OFF","OFFLINE","OFFSET","OFFSETS","OIDS","ON","ONLINE","ONLY","OPEN","OPERATOR","OPTIMIZATION","OPTIMIZE","OPTIMIZER","OPTIMIZER_STATE","OPTION","OPTIONS","OPTIONALLY","OR","ORDER","ORDERED_SERIALIZE","ORPHAN","OUT","OUT_OF_ORDER","OUTER","OUTFILE","OVER","OVERLAPS","OVERLAY","OWNED","OWNER","PACK_KEYS","PAIRED","PARSER","PARQUET","PARTIAL","PARTITION","PARTITION_ID","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PASSWORD_LOCK_TIME","PAUSE","_PAUSE_REPLAY","PERIODIC","PERSISTED","PIPELINE","PIPELINES","PLACING","PLAN","PLANS","PLANCACHE","PLUGINS","POOL","POOLS","PORT","PRECEDING","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROGRAM","PROMOTE","PROXY","PURGE","QUARTER","QUERIES","QUERY","QUERY_TIMEOUT","QUEUE","RANGE","RANK","READ","_READ","READS","REAL","REASSIGN","REBALANCE","RECHECK","RECORD","RECURSIVE","REDUNDANCY","REDUNDANT","REF","REFERENCE","REFERENCES","REFRESH","REGEXP","REINDEX","RELATIVE","RELEASE","RELOAD","RELY","REMOTE","REMOVE","RENAME","REPAIR","_REPAIR_TABLE","REPEAT","REPEATABLE","_REPL","_REPROVISIONING","REPLACE","REPLICA","REPLICATE","REPLICATING","REPLICATION","REQUIRE","RESOURCE","RESOURCE_POOL","RESET","RESTART","RESTORE","RESTRICT","RESULT","_RESURRECT","RETRY","RETURN","RETURNING","RETURNS","REVERSE","RG_POOL","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","ROLES","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","ROWS","ROWSTORE","RULE","_RPC","RUNNING","S3","SAFE","SAVE","SAVEPOINT","SCALAR","SCHEMA","SCHEMAS","SCHEMA_BINDING","SCROLL","SEARCH","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SEMI_JOIN","_SEND_THREADS","SENSITIVE","SEPARATOR","SEQUENCE","SEQUENCES","SERIAL","SERIALIZABLE","SERIES","SERVICE_USER","SERVER","SESSION","SESSION_USER","SET","SETOF","SECURITY_LISTS_INTERSECT","SHA","SHARD","SHARDED","SHARDED_ID","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMILAR","SIMPLE","SITE","SKIP","SKIPPED_BATCHES","__SLEEP","SMALLINT","SNAPSHOT","_SNAPSHOT","_SNAPSHOTS","SOFT_CPU_LIMIT_PERCENTAGE","SOME","SONAME","SPARSE","SPATIAL","SPATIAL_CHECK_INDEX","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_MODE","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STDIN","STDOUT","STOP","STORAGE","STRAIGHT_JOIN","STRICT","STRING","STRIP","SUCCESS","SUPER","SYMMETRIC","SYNC_SNAPSHOT","SYNC","_SYNC","_SYNC2","_SYNC_PARTITIONS","_SYNC_SNAPSHOT","SYNCHRONIZE","SYSID","SYSTEM","TABLE","TABLE_CHECKSUM","TABLES","TABLESPACE","TAGS","TARGET_SIZE","TASK","TEMP","TEMPLATE","TEMPORARY","TEMPTABLE","_TERM_BUMP","TERMINATE","TERMINATED","TEXT","THEN","TIME","TIMEOUT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMEZONE","TINYBLOB","TINYINT","TINYTEXT","TO","TRACELOGS","TRADITIONAL","TRAILING","TRANSFORM","TRANSACTION","_TRANSACTIONS_EXPERIMENTAL","TREAT","TRIGGER","TRIGGERS","TRUE","TRUNC","TRUNCATE","TRUSTED","TWO_PHASE","_TWOPCID","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNENCRYPTED","UNENFORCED","UNHOLD","UNICODE","UNION","UNIQUE","_UNITTEST","UNKNOWN","UNLISTEN","_UNLOAD","UNLOCK","UNLOGGED","UNPIVOT","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USERS","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARIADIC","VARYING","VERBOSE","VIEW","VOID","VOLATILE","VOTING","WAIT","_WAKE","WARNINGS","WEEK","WHEN","WHERE","WHILE","WHITESPACE","WINDOW","WITH","WITHOUT","WITHIN","_WM_HEARTBEAT","WORK","WORKLOAD","WRAPPER","WRITE","XACT_ID","XOR","YEAR","YEAR_MONTH","YES","ZEROFILL","ZONE"]}),xT=l({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),wT=r(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),kT=r(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","SET","CREATE VIEW","CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION"]),$T=r(["UPDATE","DELETE [FROM]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","TRUNCATE [TABLE]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),JT=r(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),ZT=r(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),QT=r(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),jT={tokenizerOptions:{reservedSelect:wT,reservedClauses:[...kT,...$T],reservedSetOperations:JT,reservedJoins:ZT,reservedPhrases:QT,reservedKeywords:KT,reservedFunctionNames:xT,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||","::","::$","::%",":>","!:>"],postProcess:function(E){return E.map(((T,e)=>{const R=E[e+1]||t;return I.SET(T)&&"("===R.text?{...T,type:A.RESERVED_FUNCTION_NAME}:T}))}},formatOptions:{alwaysDenseOperators:["::","::$","::%"],onelineClauses:$T}};const qT=l({all:["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER \u2014 Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"]}),zT=l({all:["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH"]}),Ee=r(["SELECT [ALL | DISTINCT]"]),Te=r(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","QUALIFY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","SET","CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT"]),ee=r(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} TAG","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","[SET DATA] TYPE","[UNSET] COMMENT","{SET | UNSET} MASKING POLICY","TRUNCATE [TABLE] [IF EXISTS]","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),Re=r(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),Ae=r(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),Se=r(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]),te={tokenizerOptions:{reservedSelect:Ee,reservedClauses:[...Te,...ee],reservedSetOperations:Re,reservedJoins:Ae,reservedPhrases:Se,reservedKeywords:zT,reservedFunctionNames:qT,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||",":","=>"]},formatOptions:{alwaysDenseOperators:[":","::"],onelineClauses:ee}},Oe=E=>E.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),Ie=/\s+/uy,Ne=E=>new RegExp(`(?:${E})`,"uy"),re=E=>E.split("").map((E=>/ /gu.test(E)?"\\s+":`[${E.toUpperCase()}${E.toLowerCase()}]`)).join(""),ne=(E,T=[])=>{const e="open"===E?0:1,R=["()",...T].map((E=>E[e]));return Ne(R.map(Oe).join("|"))},Ce=(E,T={})=>{if(0===E.length)return/^\b$/u;const e=(({rest:E,dashes:T})=>E||T?`(?![${E||""}${T?"-":""}])`:"")(T),R=a(E).map(Oe).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${R})${e}\\b`,"iuy")},Le=(E,T)=>{if(!E.length)return;const e=E.map(Oe).join("|");return Ne(`(?:${e})(?:${T})`)},se={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":(()=>{const E={"<":">","[":"]","(":")","{":"}"},T=Object.entries(E).map((([E,T])=>"{left}(?:(?!{right}').)*?{right}".replace(/{left}/g,Oe(E)).replace(/{right}/g,Oe(T)))),e=Oe(Object.keys(E).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${e}])(?:(?!\k<tag>').)*?\k<tag>`}|${T.join("|")})'`})()},_e=E=>"string"===typeof E?se[E]:"regex"in E?E.regex:(({prefixes:E,requirePrefix:T})=>`(?:${E.map(re).join("|")}${T?"":"|"})`)(E)+se[E.quote],oe=E=>E.map(_e).join("|"),ie=E=>Ne(oe(E)),ae=(E={})=>Ne(Pe(E)),Pe=({first:E,rest:T,dashes:e,allowFirstCharNumber:R}={})=>{const A="\\p{Alphabetic}\\p{Mark}_",S="\\p{Decimal_Number}",t=Oe(E??""),O=Oe(T??""),I=R?`[${A}${S}${t}][${A}${S}${O}]*`:`[${A}${t}][${A}${S}${O}]*`;return e?(E=>E+"(?:-"+E+")*")(I):I};function De(E,T){const e=E.slice(0,T).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}class le{input="";index=0;constructor(E){this.rules=E}tokenize(E){this.input=E,this.index=0;const T=[];let e;for(;this.index<this.input.length;){const E=this.getWhitespace();if(this.index<this.input.length){if(e=this.getNextToken(),!e)throw this.createParseError();T.push({...e,precedingWhitespace:E})}}return T}createParseError(){const E=this.input.slice(this.index,this.index+10),{line:T,col:e}=De(this.input,this.index);return new Error(`Parse error: Unexpected "${E}" at line ${T} column ${e}`)}getWhitespace(){Ie.lastIndex=this.index;const E=Ie.exec(this.input);if(E)return this.index+=E[0].length,E[0]}getNextToken(){for(const E of this.rules){const T=this.match(E);if(T)return T}}match(E){E.regex.lastIndex=this.index;const T=E.regex.exec(this.input);if(T){const e=T[0],R={type:E.type,raw:e,text:E.text?E.text(e):e,start:this.index};return E.key&&(R.key=E.key(e)),this.index+=e.length,R}}}const Me=/\/\*/uy,Ue=/([^/*]|\*[^/]|\/[^*])+/uy,ue=/\*\//uy;class ce{lastIndex=0;exec(E){let T,e="",R=0;if(!(T=this.matchSection(Me,E)))return null;for(e+=T,R++;R>0;)if(T=this.matchSection(Me,E))e+=T,R++;else if(T=this.matchSection(ue,E))e+=T,R--;else{if(!(T=this.matchSection(Ue,E)))return null;e+=T}return[e]}matchSection(E,T){E.lastIndex=this.lastIndex;const e=E.exec(T);return e&&(this.lastIndex+=e[0].length),e?e[0]:null}}class Ge{constructor(E){this.cfg=E,this.rulesBeforeParams=this.buildRulesBeforeParams(E),this.rulesAfterParams=this.buildRulesAfterParams(E)}tokenize(E,T){const e=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,T),...this.rulesAfterParams],R=new le(e).tokenize(E);return this.cfg.postProcess?this.cfg.postProcess(R):R}buildRulesBeforeParams(E){return this.validRules([{type:A.BLOCK_COMMENT,regex:E.nestedBlockComments?new ce:/(\/\*[^]*?\*\/)/uy},{type:A.LINE_COMMENT,regex:(T=E.lineCommentTypes??["--"],new RegExp(`(?:${T.map(Oe).join("|")}).*?(?=\r\n|\r|\n|$)`,"uy"))},{type:A.QUOTED_IDENTIFIER,regex:ie(E.identTypes)},{type:A.NUMBER,regex:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?[0-9]+(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?!\w)/uy},{type:A.RESERVED_PHRASE,regex:Ce(E.reservedPhrases??[],E.identChars),text:pe},{type:A.CASE,regex:/CASE\b/iuy,text:pe},{type:A.END,regex:/END\b/iuy,text:pe},{type:A.BETWEEN,regex:/BETWEEN\b/iuy,text:pe},{type:A.LIMIT,regex:E.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:pe},{type:A.RESERVED_CLAUSE,regex:Ce(E.reservedClauses,E.identChars),text:pe},{type:A.RESERVED_SELECT,regex:Ce(E.reservedSelect,E.identChars),text:pe},{type:A.RESERVED_SET_OPERATION,regex:Ce(E.reservedSetOperations,E.identChars),text:pe},{type:A.WHEN,regex:/WHEN\b/iuy,text:pe},{type:A.ELSE,regex:/ELSE\b/iuy,text:pe},{type:A.THEN,regex:/THEN\b/iuy,text:pe},{type:A.RESERVED_JOIN,regex:Ce(E.reservedJoins,E.identChars),text:pe},{type:A.AND,regex:/AND\b/iuy,text:pe},{type:A.OR,regex:/OR\b/iuy,text:pe},{type:A.XOR,regex:E.supportsXor?/XOR\b/iuy:void 0,text:pe},{type:A.RESERVED_FUNCTION_NAME,regex:Ce(E.reservedFunctionNames,E.identChars),text:pe},{type:A.RESERVED_KEYWORD,regex:Ce(E.reservedKeywords,E.identChars),text:pe}]);var T}buildRulesAfterParams(E){return this.validRules([{type:A.VARIABLE,regex:E.variableTypes?(e=E.variableTypes,Ne(e.map((E=>"regex"in E?E.regex:_e(E))).join("|"))):void 0},{type:A.STRING,regex:ie(E.stringTypes)},{type:A.IDENTIFIER,regex:ae(E.identChars)},{type:A.DELIMITER,regex:/[;]/uy},{type:A.COMMA,regex:/[,]/y},{type:A.OPEN_PAREN,regex:ne("open",E.extraParens)},{type:A.CLOSE_PAREN,regex:ne("close",E.extraParens)},{type:A.OPERATOR,regex:(T=["+","-","/",">","<","=","<>","<=",">=","!=",...E.operators??[]],Ne(`${a(T).map(Oe).join("|")}`))},{type:A.ASTERISK,regex:/[*]/uy},{type:A.DOT,regex:/[.]/uy}]);var T,e}buildParamRules(E,T){var e,R,S,t,O;const I={named:(null===T||void 0===T?void 0:T.named)||(null===(e=E.paramTypes)||void 0===e?void 0:e.named)||[],quoted:(null===T||void 0===T?void 0:T.quoted)||(null===(R=E.paramTypes)||void 0===R?void 0:R.quoted)||[],numbered:(null===T||void 0===T?void 0:T.numbered)||(null===(S=E.paramTypes)||void 0===S?void 0:S.numbered)||[],positional:"boolean"===typeof(null===T||void 0===T?void 0:T.positional)?T.positional:null===(t=E.paramTypes)||void 0===t?void 0:t.positional,custom:(null===T||void 0===T?void 0:T.custom)||(null===(O=E.paramTypes)||void 0===O?void 0:O.custom)||[]};return this.validRules([{type:A.NAMED_PARAMETER,regex:Le(I.named,Pe(E.paramChars||E.identChars)),key:E=>E.slice(1)},{type:A.QUOTED_PARAMETER,regex:Le(I.quoted,oe(E.identTypes)),key:E=>(({tokenKey:E,quoteChar:T})=>E.replace(new RegExp(Oe("\\"+T),"gu"),T))({tokenKey:E.slice(2,-1),quoteChar:E.slice(-1)})},{type:A.NUMBERED_PARAMETER,regex:Le(I.numbered,"[0-9]+"),key:E=>E.slice(1)},{type:A.POSITIONAL_PARAMETER,regex:I.positional?/[?]/y:void 0},...I.custom.map((E=>({type:A.CUSTOM_PARAMETER,regex:Ne(E.regex),key:E.key??(E=>E)})))])}validRules(E){return E.filter((E=>Boolean(E.regex)))}}const pe=E=>D(E.toUpperCase()),fe=new Map,He=E=>({tokenizer:new Ge(E.tokenizerOptions),formatOptions:Be(E.formatOptions)}),Be=E=>({alwaysDenseOperators:E.alwaysDenseOperators||[],onelineClauses:Object.fromEntries(E.onelineClauses.map((E=>[E,!0])))});function de(E){return"tabularLeft"===E.indentStyle||"tabularRight"===E.indentStyle?" ".repeat(10):E.useTabs?"\t":" ".repeat(E.tabWidth)}function he(E){return"tabularLeft"===E.indentStyle||"tabularRight"===E.indentStyle}class Fe{constructor(E){this.params=E,this.index=0}get({key:E,text:T}){return this.params?E?this.params[E]:this.params[this.index++]:T}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(E){this.index=E}}var Ye=e(43614);const me=(E,T,e)=>{if(N(E.type)){const R=ge(e,T);if(R&&"."===R.text)return{...E,type:A.IDENTIFIER,text:E.raw}}return E},Ve=(E,T,e)=>{if(E.type===A.RESERVED_FUNCTION_NAME){const R=Xe(e,T);if(!R||!be(R))return{...E,type:A.RESERVED_KEYWORD}}return E},We=(E,T,e)=>{if(E.type===A.IDENTIFIER){const R=Xe(e,T);if(R&&ve(R))return{...E,type:A.ARRAY_IDENTIFIER}}return E},ye=(E,T,e)=>{if(E.type===A.RESERVED_KEYWORD){const R=Xe(e,T);if(R&&ve(R))return{...E,type:A.ARRAY_KEYWORD}}return E},ge=(E,T)=>Xe(E,T,-1),Xe=(E,T,e=1)=>{let R=1;for(;E[T+R*e]&&Ke(E[T+R*e]);)R++;return E[T+R*e]},be=E=>E.type===A.OPEN_PAREN&&"("===E.text,ve=E=>E.type===A.OPEN_PAREN&&"["===E.text,Ke=E=>E.type===A.BLOCK_COMMENT||E.type===A.LINE_COMMENT;class xe{index=0;tokens=[];input="";constructor(E){this.tokenize=E}reset(E,T){this.input=E,this.index=0,this.tokens=this.tokenize(E)}next(){return this.tokens[this.index++]}save(){}formatError(E){const{line:T,col:e}=De(this.input,E.start);return`Parse error at token: ${E.text} at line ${T} column ${e}`}has(E){return E in A}}let we;function ke(E){return E[0]}!function(E){E.statement="statement",E.clause="clause",E.set_operation="set_operation",E.function_call="function_call",E.array_subscript="array_subscript",E.property_access="property_access",E.parenthesis="parenthesis",E.between_predicate="between_predicate",E.case_expression="case_expression",E.case_when="case_when",E.case_else="case_else",E.limit_clause="limit_clause",E.all_columns_asterisk="all_columns_asterisk",E.literal="literal",E.identifier="identifier",E.keyword="keyword",E.parameter="parameter",E.operator="operator",E.comma="comma",E.line_comment="line_comment",E.block_comment="block_comment"}(we||(we={}));const $e=new xe((E=>[])),Je=([[E]])=>E,Ze=E=>({type:we.keyword,tokenType:E.type,text:E.text,raw:E.raw}),Qe=(E,{leading:T,trailing:e})=>(null!==T&&void 0!==T&&T.length&&(E={...E,leadingComments:T}),null!==e&&void 0!==e&&e.length&&(E={...E,trailingComments:e}),E),je=(E,{leading:T,trailing:e})=>{if(null!==T&&void 0!==T&&T.length){const[e,...R]=E;E=[Qe(e,{leading:T}),...R]}if(null!==e&&void 0!==e&&e.length){const T=E.slice(0,-1),R=E[E.length-1];E=[...T,Qe(R,{trailing:e})]}return E},qe={Lexer:$e,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:E=>E[0].concat([E[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([E])=>{const T=E[E.length-1];return T&&!T.hasSemicolon?T.children.length>0?E:E.slice(0,-1):E}},{name:"statement$subexpression$1",symbols:[$e.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[$e.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([E,[T]])=>({type:we.statement,children:E,hasSemicolon:T.type===A.DELIMITER})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([E,T])=>[...E,...T]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:Je},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[$e.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:ke},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[$e.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([E,T,e,R])=>{if(R){const[A,S]=R;return{type:we.limit_clause,limitKw:Qe(Ze(E),{trailing:T}),offset:e,count:S}}return{type:we.limit_clause,limitKw:Qe(Ze(E),{trailing:T}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[$e.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([E,[T,e]])=>({type:we.clause,nameKw:Ze(E),children:[T,...e]})},{name:"select_clause",symbols:[$e.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([E])=>({type:we.clause,nameKw:Ze(E),children:[]})},{name:"all_columns_asterisk",symbols:[$e.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:we.all_columns_asterisk})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"other_clause",symbols:[$e.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([E,T])=>({type:we.clause,nameKw:Ze(E),children:T})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"set_operation",symbols:[$e.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([E,T])=>({type:we.set_operation,nameKw:Ze(E),children:T})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:E=>E[0].concat([E[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:ke},{name:"expression_chain$ebnf$1",symbols:[]},{name:"expression_chain$ebnf$1",symbols:["expression_chain$ebnf$1","_expression_with_comments"],postprocess:E=>E[0].concat([E[1]])},{name:"expression_chain",symbols:["expression","expression_chain$ebnf$1"],postprocess:([E,T])=>[E,...T]},{name:"andless_expression_chain$ebnf$1",symbols:[]},{name:"andless_expression_chain$ebnf$1",symbols:["andless_expression_chain$ebnf$1","_andless_expression_with_comments"],postprocess:E=>E[0].concat([E[1]])},{name:"andless_expression_chain",symbols:["andless_expression","andless_expression_chain$ebnf$1"],postprocess:([E,T])=>[E,...T]},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([E,T])=>Qe(E,{trailing:T})},{name:"_expression_with_comments",symbols:["_","expression"],postprocess:([E,T])=>Qe(T,{leading:E})},{name:"_andless_expression_with_comments",symbols:["_","andless_expression"],postprocess:([E,T])=>Qe(T,{leading:E})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:Je},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["logic_operator"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:Je},{name:"expression$subexpression$1",symbols:["andless_expression"]},{name:"expression$subexpression$1",symbols:["logic_operator"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:Je},{name:"andless_expression$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"andless_expression$subexpression$1",symbols:["asterisk"]},{name:"andless_expression",symbols:["andless_expression$subexpression$1"],postprocess:Je},{name:"asteriskless_andless_expression$subexpression$1",symbols:["array_subscript"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["function_call"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["property_access"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["parenthesis"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["curly_braces"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["square_brackets"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["operator"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["identifier"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["parameter"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["literal"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["keyword"]},{name:"asteriskless_andless_expression",symbols:["asteriskless_andless_expression$subexpression$1"],postprocess:Je},{name:"array_subscript",symbols:[$e.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([E,T,e])=>({type:we.array_subscript,array:Qe({type:we.identifier,text:E.text},{trailing:T}),parenthesis:e})},{name:"array_subscript",symbols:[$e.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([E,T,e])=>({type:we.array_subscript,array:Qe(Ze(E),{trailing:T}),parenthesis:e})},{name:"function_call",symbols:[$e.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([E,T,e])=>({type:we.function_call,nameKw:Qe(Ze(E),{trailing:T}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([E,T,e])=>({type:we.parenthesis,children:T,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([E,T,e])=>({type:we.parenthesis,children:T,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([E,T,e])=>({type:we.parenthesis,children:T,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access",symbols:["expression","_",$e.has("DOT")?{type:"DOT"}:DOT,"_","property_access$subexpression$1"],postprocess:([E,T,e,R,[A]])=>({type:we.property_access,object:Qe(E,{trailing:T}),property:Qe(A,{leading:R})})},{name:"between_predicate",symbols:[$e.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","andless_expression_chain","_",$e.has("AND")?{type:"AND"}:AND,"_","andless_expression"],postprocess:([E,T,e,R,A,S,t])=>({type:we.between_predicate,betweenKw:Ze(E),expr1:je(e,{leading:T,trailing:R}),andKw:Ze(A),expr2:[Qe(t,{leading:S})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:ke},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:E=>E[0].concat([E[1]])},{name:"case_expression",symbols:[$e.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",$e.has("END")?{type:"END"}:END],postprocess:([E,T,e,R,A])=>({type:we.case_expression,caseKw:Qe(Ze(E),{trailing:T}),endKw:Ze(A),expr:e||[],clauses:R})},{name:"case_clause",symbols:[$e.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",$e.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([E,T,e,R,A,S])=>({type:we.case_when,whenKw:Qe(Ze(E),{trailing:T}),thenKw:Qe(Ze(R),{trailing:A}),condition:e,result:S})},{name:"case_clause",symbols:[$e.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([E,T,e])=>({type:we.case_else,elseKw:Qe(Ze(E),{trailing:T}),result:e})},{name:"comma$subexpression$1",symbols:[$e.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[E]])=>({type:we.comma})},{name:"asterisk$subexpression$1",symbols:[$e.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[E]])=>({type:we.operator,text:E.text})},{name:"operator$subexpression$1",symbols:[$e.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[E]])=>({type:we.operator,text:E.text})},{name:"identifier$subexpression$1",symbols:[$e.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[$e.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[$e.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[E]])=>({type:we.identifier,text:E.text})},{name:"parameter$subexpression$1",symbols:[$e.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[$e.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[$e.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[$e.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter$subexpression$1",symbols:[$e.has("CUSTOM_PARAMETER")?{type:"CUSTOM_PARAMETER"}:CUSTOM_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[E]])=>({type:we.parameter,key:E.key,text:E.text})},{name:"literal$subexpression$1",symbols:[$e.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[$e.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[E]])=>({type:we.literal,text:E.text})},{name:"keyword$subexpression$1",symbols:[$e.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[$e.has("RESERVED_PHRASE")?{type:"RESERVED_PHRASE"}:RESERVED_PHRASE]},{name:"keyword$subexpression$1",symbols:[$e.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[E]])=>Ze(E)},{name:"logic_operator$subexpression$1",symbols:[$e.has("AND")?{type:"AND"}:AND]},{name:"logic_operator$subexpression$1",symbols:[$e.has("OR")?{type:"OR"}:OR]},{name:"logic_operator$subexpression$1",symbols:[$e.has("XOR")?{type:"XOR"}:XOR]},{name:"logic_operator",symbols:["logic_operator$subexpression$1"],postprocess:([[E]])=>Ze(E)},{name:"other_keyword$subexpression$1",symbols:[$e.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[$e.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[$e.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[$e.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[E]])=>Ze(E)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:E=>E[0].concat([E[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([E])=>E},{name:"comment",symbols:[$e.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([E])=>({type:we.line_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})},{name:"comment",symbols:[$e.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([E])=>({type:we.block_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})}],ParserStart:"main"};var ze=qe;const{Parser:ER,Grammar:TR}=Ye;const eR=/^\s+/u;function RR(E,T,e){return function(E){const T=[];for(let e=0;e<E.length;e++){const R=[E[e]];for(;E[e].match(/.*,(\s*(--.*)?$)/);)e++,R.push(E[e]);T.push(R)}return T}(E.split("\n")).flatMap((E=>{if(1===E.length)return E;if("tabular"===T)return function(E){const T=P((e=E,e.map((E=>E.replace(/\s*--.*/,"")))))-1;var e;return E.map(((e,R)=>R===E.length-1?e:function(E,T){const[,e,R]=E.match(/^(.*?),(\s*--.*)?$/)||[],A=" ".repeat(T-e.length);return`${e}${A},${R??""}`}(e,T)))}(E);if("before"===T)return function(E,T){return(e=E,e.map((E=>E.replace(/,(\s*(--.*)?$)/,"$1")))).map(((E,e)=>{if(0===e)return E;const[R]=E.match(eR)||[""];return function(E,T){return E.replace(new RegExp(T+"$"),"")}(R,T)+T.replace(/ {2}$/,", ")+E.trimStart()}));var e}(E,e);throw new Error(`Unexpected commaPosition: ${T}`)})).join("\n")}let AR;!function(E){E[E.SPACE=0]="SPACE",E[E.NO_SPACE=1]="NO_SPACE",E[E.NO_NEWLINE=2]="NO_NEWLINE",E[E.NEWLINE=3]="NEWLINE",E[E.MANDATORY_NEWLINE=4]="MANDATORY_NEWLINE",E[E.INDENT=5]="INDENT",E[E.SINGLE_INDENT=6]="SINGLE_INDENT"}(AR||(AR={}));class SR{items=[];constructor(E){this.indentation=E}add(...E){for(const T of E)switch(T){case AR.SPACE:this.items.push(AR.SPACE);break;case AR.NO_SPACE:this.trimHorizontalWhitespace();break;case AR.NO_NEWLINE:this.trimWhitespace();break;case AR.NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(AR.NEWLINE);break;case AR.MANDATORY_NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(AR.MANDATORY_NEWLINE);break;case AR.INDENT:this.addIndentation();break;case AR.SINGLE_INDENT:this.items.push(AR.SINGLE_INDENT);break;default:this.items.push(T)}}trimHorizontalWhitespace(){for(;tR(i(this.items));)this.items.pop()}trimWhitespace(){for(;IR(i(this.items));)this.items.pop()}addNewline(E){if(this.items.length>0)switch(i(this.items)){case AR.NEWLINE:this.items.pop(),this.items.push(E);break;case AR.MANDATORY_NEWLINE:break;default:this.items.push(E)}}addIndentation(){for(let E=0;E<this.indentation.getLevel();E++)this.items.push(AR.SINGLE_INDENT)}toString(){return this.items.map((E=>this.itemToString(E))).join("")}getLayoutItems(){return this.items}itemToString(E){switch(E){case AR.SPACE:return" ";case AR.NEWLINE:case AR.MANDATORY_NEWLINE:return"\n";case AR.SINGLE_INDENT:return this.indentation.getSingleIndent();default:return E}}}const tR=E=>E===AR.SPACE||E===AR.SINGLE_INDENT,IR=E=>E===AR.SPACE||E===AR.SINGLE_INDENT||E===AR.NEWLINE;function NR(E){return(E=>E===A.AND||E===A.OR||E===A.XOR)(E)||E===A.RESERVED_CLAUSE||E===A.RESERVED_SELECT||E===A.RESERVED_SET_OPERATION||E===A.RESERVED_JOIN||E===A.LIMIT}const rR="top-level";class nR{indentTypes=[];constructor(E){this.indent=E}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(rR)}increaseBlockLevel(){this.indentTypes.push("block-level")}decreaseTopLevel(){this.indentTypes.length>0&&i(this.indentTypes)===rR&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0;){if(this.indentTypes.pop()!==rR)break}}}class CR extends SR{length=0;trailingSpace=!1;constructor(E){super(new nR("")),this.expressionWidth=E}add(...E){if(E.forEach((E=>this.addToLength(E))),this.length>this.expressionWidth)throw new LR;super.add(...E)}addToLength(E){if("string"===typeof E)this.length+=E.length,this.trailingSpace=!1;else{if(E===AR.MANDATORY_NEWLINE||E===AR.NEWLINE)throw new LR;E===AR.INDENT||E===AR.SINGLE_INDENT||E===AR.SPACE?this.trailingSpace||(this.length++,this.trailingSpace=!0):E!==AR.NO_NEWLINE&&E!==AR.NO_SPACE||this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}}class LR extends Error{}class sR{inline=!1;nodes=[];index=-1;constructor({cfg:E,dialectCfg:T,params:e,layout:R,inline:A=!1}){this.cfg=E,this.dialectCfg=T,this.inline=A,this.params=e,this.layout=R}format(E){for(this.nodes=E,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(E){this.formatComments(E.leadingComments),this.formatNodeWithoutComments(E),this.formatComments(E.trailingComments)}formatNodeWithoutComments(E){switch(E.type){case we.function_call:return this.formatFunctionCall(E);case we.array_subscript:return this.formatArraySubscript(E);case we.property_access:return this.formatPropertyAccess(E);case we.parenthesis:return this.formatParenthesis(E);case we.between_predicate:return this.formatBetweenPredicate(E);case we.case_expression:return this.formatCaseExpression(E);case we.case_when:return this.formatCaseWhen(E);case we.case_else:return this.formatCaseElse(E);case we.clause:return this.formatClause(E);case we.set_operation:return this.formatSetOperation(E);case we.limit_clause:return this.formatLimitClause(E);case we.all_columns_asterisk:return this.formatAllColumnsAsterisk(E);case we.literal:return this.formatLiteral(E);case we.identifier:return this.formatIdentifier(E);case we.parameter:return this.formatParameter(E);case we.operator:return this.formatOperator(E);case we.comma:return this.formatComma(E);case we.line_comment:return this.formatLineComment(E);case we.block_comment:return this.formatBlockComment(E);case we.keyword:return this.formatKeywordNode(E)}}formatFunctionCall(E){this.withComments(E.nameKw,(()=>{this.layout.add(this.showKw(E.nameKw))})),this.formatNode(E.parenthesis)}formatArraySubscript(E){this.withComments(E.array,(()=>{this.layout.add(E.array.type===we.keyword?this.showKw(E.array):E.array.text)})),this.formatNode(E.parenthesis)}formatPropertyAccess(E){this.formatNode(E.object),this.layout.add(AR.NO_SPACE,"."),this.formatNode(E.property)}formatParenthesis(E){const T=this.formatInlineExpression(E.children);T?(this.layout.add(E.openParen),this.layout.add(...T.getLayoutItems()),this.layout.add(AR.NO_SPACE,E.closeParen,AR.SPACE)):(this.layout.add(E.openParen,AR.NEWLINE),he(this.cfg)?(this.layout.add(AR.INDENT),this.layout=this.formatSubExpression(E.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(AR.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(AR.NEWLINE,AR.INDENT,E.closeParen,AR.SPACE))}formatBetweenPredicate(E){this.layout.add(this.showKw(E.betweenKw),AR.SPACE),this.layout=this.formatSubExpression(E.expr1),this.layout.add(AR.NO_SPACE,AR.SPACE,this.showNonTabularKw(E.andKw),AR.SPACE),this.layout=this.formatSubExpression(E.expr2),this.layout.add(AR.SPACE)}formatCaseExpression(E){this.formatNode(E.caseKw),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(E.expr),this.layout=this.formatSubExpression(E.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(AR.NEWLINE,AR.INDENT),this.formatNode(E.endKw)}formatCaseWhen(E){this.layout.add(AR.NEWLINE,AR.INDENT),this.formatNode(E.whenKw),this.layout=this.formatSubExpression(E.condition),this.formatNode(E.thenKw),this.layout=this.formatSubExpression(E.result)}formatCaseElse(E){this.layout.add(AR.NEWLINE,AR.INDENT),this.formatNode(E.elseKw),this.layout=this.formatSubExpression(E.result)}formatClause(E){this.isOnelineClause(E)?this.formatClauseInOnelineStyle(E):he(this.cfg)?this.formatClauseInTabularStyle(E):this.formatClauseInIndentedStyle(E)}isOnelineClause(E){return this.dialectCfg.onelineClauses[E.nameKw.text]}formatClauseInIndentedStyle(E){this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E.nameKw),AR.NEWLINE),this.layout.indentation.increaseTopLevel(),this.layout.add(AR.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatClauseInOnelineStyle(E){this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E.nameKw),AR.SPACE),this.layout=this.formatSubExpression(E.children)}formatClauseInTabularStyle(E){this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E.nameKw),AR.SPACE),this.layout.indentation.increaseTopLevel(),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(E){this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E.nameKw),AR.NEWLINE),this.layout.add(AR.INDENT),this.layout=this.formatSubExpression(E.children)}formatLimitClause(E){this.withComments(E.limitKw,(()=>{this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E.limitKw))})),this.layout.indentation.increaseTopLevel(),he(this.cfg)?this.layout.add(AR.SPACE):this.layout.add(AR.NEWLINE,AR.INDENT),E.offset?(this.layout=this.formatSubExpression(E.offset),this.layout.add(AR.NO_SPACE,",",AR.SPACE),this.layout=this.formatSubExpression(E.count)):this.layout=this.formatSubExpression(E.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(E){this.layout.add("*",AR.SPACE)}formatLiteral(E){this.layout.add(E.text,AR.SPACE)}formatIdentifier(E){this.layout.add(E.text,AR.SPACE)}formatParameter(E){this.layout.add(this.params.get(E),AR.SPACE)}formatOperator({text:E}){this.cfg.denseOperators||this.dialectCfg.alwaysDenseOperators.includes(E)?this.layout.add(AR.NO_SPACE,E):":"===E?this.layout.add(AR.NO_SPACE,E,AR.SPACE):this.layout.add(E,AR.SPACE)}formatComma(E){this.inline?this.layout.add(AR.NO_SPACE,",",AR.SPACE):this.layout.add(AR.NO_SPACE,",",AR.NEWLINE,AR.INDENT)}withComments(E,T){this.formatComments(E.leadingComments),T(),this.formatComments(E.trailingComments)}formatComments(E){E&&E.forEach((E=>{E.type===we.line_comment?this.formatLineComment(E):this.formatBlockComment(E)}))}formatLineComment(E){M(E.precedingWhitespace||"")?this.layout.add(AR.NEWLINE,AR.INDENT,E.text,AR.MANDATORY_NEWLINE,AR.INDENT):this.layout.getLayoutItems().length>0?this.layout.add(AR.NO_NEWLINE,AR.SPACE,E.text,AR.MANDATORY_NEWLINE,AR.INDENT):this.layout.add(E.text,AR.MANDATORY_NEWLINE,AR.INDENT)}formatBlockComment(E){this.isMultilineBlockComment(E)?(this.splitBlockComment(E.text).forEach((E=>{this.layout.add(AR.NEWLINE,AR.INDENT,E)})),this.layout.add(AR.NEWLINE,AR.INDENT)):this.layout.add(E.text,AR.SPACE)}isMultilineBlockComment(E){return M(E.text)||M(E.precedingWhitespace||"")}isDocComment(E){const T=E.split(/\n/);return/^\/\*\*?$/.test(T[0])&&T.slice(1,T.length-1).every((E=>/^\s*\*/.test(E)))&&/^\s*\*\/$/.test(i(T))}splitBlockComment(E){return this.isDocComment(E)?E.split(/\n/).map((E=>/^\s*\*/.test(E)?" "+E.replace(/^\s*/,""):E)):E.split(/\n/).map((E=>E.replace(/^\s*/,"")))}formatSubExpression(E){return new sR({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(E)}formatInlineExpression(E){const T=this.params.getPositionalParameterIndex();try{return new sR({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new CR(this.cfg.expressionWidth),inline:!0}).format(E)}catch(e){if(e instanceof LR)return void this.params.setPositionalParameterIndex(T);throw e}}formatKeywordNode(E){switch(E.tokenType){case A.RESERVED_JOIN:return this.formatJoin(E);case A.AND:case A.OR:case A.XOR:return this.formatLogicalOperator(E);default:return this.formatKeyword(E)}}formatJoin(E){he(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E),AR.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E),AR.SPACE)}formatKeyword(E){this.layout.add(this.showKw(E),AR.SPACE)}formatLogicalOperator(E){"before"===this.cfg.logicalOperatorNewline?he(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E),AR.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(AR.NEWLINE,AR.INDENT,this.showKw(E),AR.SPACE):this.layout.add(this.showKw(E),AR.NEWLINE,AR.INDENT)}showKw(E){return NR(E.tokenType)?function(E,T){if("standard"===T)return E;let e=[];return E.length>=10&&E.includes(" ")&&([E,...e]=E.split(" ")),(E="tabularLeft"===T?E.padEnd(9," "):E.padStart(9," "))+["",...e].join(" ")}(this.showNonTabularKw(E),this.cfg.indentStyle):this.showNonTabularKw(E)}showNonTabularKw(E){switch(this.cfg.keywordCase){case"preserve":return D(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}}class _R{constructor(E,T){this.dialect=E,this.cfg=T,this.params=new Fe(this.cfg.params)}format(E){const T=this.parse(E),e=this.formatAst(T);return this.postFormat(e).trimEnd()}parse(E){return function(E){let T={};const e=new xe((e=>{return[...(R=E.tokenize(e,T),R.map(me).map(Ve).map(We).map(ye)),S(e.length)];var R})),R=new ER(TR.fromCompiled(ze),{lexer:e});return{parse:(E,e)=>{T=e;const{results:A}=R.feed(E);if(1===A.length)return A[0];throw 0===A.length?new Error("Parse error: Invalid SQL"):new Error(`Parse error: Ambiguous grammar\n${JSON.stringify(A,void 0,2)}`)}}}(this.dialect.tokenizer).parse(E,this.cfg.paramTypes||{})}formatAst(E){return E.map((E=>this.formatStatement(E))).join("\n".repeat(this.cfg.linesBetweenQueries+1))}formatStatement(E){const T=new sR({cfg:this.cfg,dialectCfg:this.dialect.formatOptions,params:this.params,layout:new SR(new nR(de(this.cfg)))}).format(E.children);return E.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?T.add(AR.NEWLINE,";"):T.add(AR.NO_NEWLINE,";")),T.toString()}postFormat(E){return this.cfg.tabulateAlias&&(E=function(E){const T=E.split("\n");let e=[];for(let R=0;R<T.length;R++){if(T[R].match(/^\s*SELECT/i)){let E=[];if(T[R].match(/.*,$/))E=[T[R]];else{if(e.push(T[R]),T[R].match(/^\s*SELECT\s+.+(?!,$)/i))continue;E.push(T[++R])}for(;T[R++].match(/.*,$/);)E.push(T[R]);const A=E.map((E=>({line:E,matches:E.match(/(^.*?\S) (AS )?(\S+,?$)/i)}))).map((({line:E,matches:T})=>T?{precedingText:T[1],as:T[2],alias:T[3]}:{precedingText:E})),S=P(A.map((({precedingText:E})=>E.replace(/\s*,\s*$/,""))));E=A.map((({precedingText:E,as:T,alias:e})=>E+(e?" ".repeat(S-E.length+1)+(T??"")+e:""))),e=[...e,...E]}e.push(T[R])}return e.join("\n")}(E)),"before"!==this.cfg.commaPosition&&"tabular"!==this.cfg.commaPosition||(E=RR(E,this.cfg.commaPosition,de(this.cfg))),E}}class oR extends Error{}function iR(E){if("multilineLists"in E)throw new oR("multilineLists config is no more supported.");if("newlineBeforeOpenParen"in E)throw new oR("newlineBeforeOpenParen config is no more supported.");if("newlineBeforeCloseParen"in E)throw new oR("newlineBeforeCloseParen config is no more supported.");if("aliasAs"in E)throw new oR("aliasAs config is no more supported.");if(E.expressionWidth<=0)throw new oR(`expressionWidth config must be positive number. Received ${E.expressionWidth} instead.`);if("before"===E.commaPosition&&E.useTabs)throw new oR("commaPosition: before does not work when tabs are used for indentation.");var T;return E.params&&!((T=E.params)instanceof Array?T:Object.values(T)).every((E=>"string"===typeof E))&&console.warn('WARNING: All "params" option values should be strings.'),E}const aR={bigquery:"bigquery",db2:"db2",hive:"hive",mariadb:"mariadb",mysql:"mysql",n1ql:"n1ql",plsql:"plsql",postgresql:"postgresql",redshift:"redshift",spark:"spark",sqlite:"sqlite",sql:"sql",trino:"trino",transactsql:"transactsql",tsql:"transactsql",singlestoredb:"singlestoredb",snowflake:"snowflake"},PR=Object.keys(aR),DR={tabWidth:2,useTabs:!1,keywordCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",tabulateAlias:!1,commaPosition:"after",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},lR=(E,T={})=>{if("string"===typeof T.language&&!PR.includes(T.language))throw new oR(`Unsupported SQL dialect: ${T.language}`);const e=aR[T.language||"sql"];return MR(E,{...T,dialect:R[e]})},MR=(E,{dialect:T,...e})=>{if("string"!==typeof E)throw new Error("Invalid query argument. Expected string, instead got "+typeof E);const R=iR({...DR,...e});return new _R((E=>{let T=fe.get(E);return T||(T=He(E),fe.set(E,T)),T})(T),R).format(E)}}}]);